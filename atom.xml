<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Note</title>
  
  <subtitle>Welcome To My World</subtitle>
  <link href="https://lyblog2022.github.io/atom.xml" rel="self"/>
  
  <link href="https://lyblog2022.github.io/"/>
  <updated>2022-11-13T13:27:36.585Z</updated>
  <id>https://lyblog2022.github.io/</id>
  
  <author>
    <name>ly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis安装</title>
    <link href="https://lyblog2022.github.io/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/"/>
    <id>https://lyblog2022.github.io/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/</id>
    <published>2022-11-13T11:08:30.000Z</published>
    <updated>2022-11-13T13:27:36.585Z</updated>
    
    <content type="html"><![CDATA[<p>Redis安装</p><span id="more"></span><h3 id="1、Redis安装"><a href="#1、Redis安装" class="headerlink" title="1、Redis安装"></a>1、Redis安装</h3><p>执行一下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.6.tar.gz</span><br></pre></td></tr></table></figure><p>下载得到压缩包</p><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis1.png" class="" title="redis1 image"><p>解压压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf redis-6.0.6.tar.gz</span><br></pre></td></tr></table></figure><p>执行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>报错信息:</p><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis2.png" class="" title="redis2 image"><p>原因：Redis为C语言编写，需要先安装C语言环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br></pre></td></tr></table></figure><p>重新执行make，报错</p><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis3.png" class="" title="redis3 image"><p>执行命令，清楚已安装的程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make distclean</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>执行命令，启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server</span><br></pre></td></tr></table></figure><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis4.png" class="" title="redis4 image"><h3 id="2、配置service"><a href="#2、配置service" class="headerlink" title="2、配置service"></a>2、配置service</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX=/opt/ly/redis6</span><br></pre></td></tr></table></figure><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis5.png" class="" title="redis5 image"><p>修改profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">REDIS_HOME=/opt/ly/redis6</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$REDIS_HOME/bin</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/opt/ly/redis6/bin</span><br></pre></td></tr></table></figure><p>执行以下命令，报错信息为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install_server.sh</span><br></pre></td></tr></table></figure><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis6.png" class="" title="redis6 image"><p>解决方案：注释掉以下代码</p><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis7.png" class="" title="redis7 image"><p>重新执行以上代码</p><img src="/2022/11/13/study/framework/redis/Redis%E5%AE%89%E8%A3%85/redis8.png" class="" title="redis8 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis安装&lt;/p&gt;</summary>
    
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/categories/framework/"/>
    
    <category term="Redis" scheme="https://lyblog2022.github.io/categories/framework/Redis/"/>
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/tags/framework/"/>
    
    <category term="Redis" scheme="https://lyblog2022.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>通过URL下载文件</title>
    <link href="https://lyblog2022.github.io/2022/10/30/summary/20221030/%E9%80%9A%E8%BF%87URL%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>https://lyblog2022.github.io/2022/10/30/summary/20221030/%E9%80%9A%E8%BF%87URL%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</id>
    <published>2022-10-30T04:27:27.000Z</published>
    <updated>2022-10-30T04:34:51.082Z</updated>
    
    <content type="html"><![CDATA[<p>java通过URL下载文件到本地</p> <span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从网络Url中下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> savePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downLoadFromUrl</span><span class="params">(String urlStr, String fileName, String savePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlStr);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        <span class="comment">//设置超时间为3秒</span></span><br><span class="line">        conn.setConnectTimeout(<span class="number">3</span> * <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//防止屏蔽程序抓取而返回403错误</span></span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">        <span class="comment">//获取自己数组</span></span><br><span class="line">        <span class="type">byte</span>[] getData = readInputStream(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件保存位置</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">saveDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(savePath);</span><br><span class="line">        <span class="keyword">if</span> (!saveDir.exists()) &#123;</span><br><span class="line">            saveDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(saveDir + File.separator + fileName);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fos.write(getData);</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;info:&quot;</span> + url + <span class="string">&quot; download success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从输入流中获取字节数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] readInputStream(InputStream inputStream) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            downLoadFromUrl(<span class="string">&quot;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/topnav/newfanyi-da0cea8f7e.png&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;百度.png&quot;</span>, <span class="string">&quot;E:\\&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;java通过URL下载文件到本地&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://lyblog2022.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>redis基础及使用</title>
    <link href="https://lyblog2022.github.io/2022/10/24/study/framework/redis/redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://lyblog2022.github.io/2022/10/24/study/framework/redis/redis%E5%9F%BA%E7%A1%80/</id>
    <published>2022-10-24T12:52:15.000Z</published>
    <updated>2022-12-13T08:50:51.719Z</updated>
    
    <content type="html"><![CDATA[<p>Redis概述及使用</p><span id="more"></span><h3 id="1、Redis"><a href="#1、Redis" class="headerlink" title="1、Redis"></a>1、Redis</h3><p>​Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets）与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial）索引半径查询。</p><p>​Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions）和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><h3 id="2、数据结构"><a href="#2、数据结构" class="headerlink" title="2、数据结构"></a>2、数据结构</h3><h4 id="2-1-字符串（strings"><a href="#2-1-字符串（strings" class="headerlink" title="2.1 字符串（strings)"></a>2.1 字符串（strings)</h4><p>字符串是一种最基本的Redis值类型。Redis字符串是二进制安全的，这意味着一个Redis字符串能包含任意类型的数据，例如： 一张JPEG格式的图片或者一个序列化的Ruby对象。</p><p>一个字符串类型的值最多能存储512M字节的内容。</p><p>用途：</p><ul><li>利用INCR命令簇（INCR, DECR, INCRBY）来把字符串当作原子计数器使用。</li><li>使用APPEND命令在字符串后添加内容。</li><li>将字符串作为GETRANGE和 SETRANGE的随机访问向量。</li><li>在小空间里编码大量数据，或者使用 GETBIT和 SETBIT创建一个Redis支持的Bloom过滤器。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 101</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;101&quot;</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(integer) 100</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; incrby num 1.2</span><br><span class="line">(error) ERR value is not an integer or out of range</span><br><span class="line">127.0.0.1:6379&gt; incrby num 9</span><br><span class="line">(integer) 109</span><br><span class="line">127.0.0.1:6379&gt; append num zhangsan</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;109zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(error) ERR value is not an integer or out of range</span><br><span class="line">127.0.0.1:6379&gt; getrange num 3 7</span><br><span class="line">&quot;zhang&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange num 7 si</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;109zhansian&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange num 7 qwerty</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;109zhanqwerty&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2-列表（Lists）"><a href="#2-2-列表（Lists）" class="headerlink" title="2.2 列表（Lists）"></a>2.2 <strong>列表（Lists）</strong></h4><p>Redis列表是简单的字符串列表，按照插入顺序排序。 你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>LPUSH命令插入一个新元素到列表头部，而RPUSH命令 插入一个新元素到列表的尾部。当 对一个空key执行其中某个命令时，将会创建一个新表。 类似的，如果一个操作要清空列表，那么key会从对应的key空间删除。这是个非常便利的语义， 因为如果使用一个不存在的key作为参数，所有的列表命令都会像在对一个空表操作一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush mylist a# now the list is &quot;a&quot;</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lpush mylist b# now the list is &quot;b&quot;,&quot;a&quot;</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist c# now the list is &quot;b&quot;,&quot;a&quot;,&quot;c&quot;</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure><p>一个列表最多可以包含2的32次方-1个元素（4294967295，每个表超过40亿个元素）。</p><p>从时间复杂度的角度来看，Redis列表主要的特性就是支持时间常数的 插入和靠近头尾部元素的删除，即使是需要插入上百万的条目。 访问列表两端的元素是非常快的，但如果你试着访问一个非常大 的列表的中间元素仍然是十分慢的，因为那是一个时间复杂度为 <strong>O(N)</strong> 的操作。</p><p>应用：</p><ul><li>在社交网络中建立一个时间线模型，使用LPUSH去添加新的元素到用户时间线中，使用LRANGE去检索一些最近插入的条目</li><li>可以同时使用LPUSH和LTRIM去创建一个永远不会超过指定元素数目的列表并同时记住最后的N个元素。</li><li>列表可以用来当作消息传递的基元（primitive），例如，众所周知的用来创建后台任务的Resque Ruby库。</li><li>可以使用列表做更多事，这个数据类型支持许多命令，包括像BLPOP这样的阻塞命令。</li></ul><p>​</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis概述及使用&lt;/p&gt;</summary>
    
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/categories/framework/"/>
    
    <category term="Redis" scheme="https://lyblog2022.github.io/categories/framework/Redis/"/>
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/tags/framework/"/>
    
    <category term="Redis" scheme="https://lyblog2022.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MyCat数据切分及配置文件介绍</title>
    <link href="https://lyblog2022.github.io/2022/10/09/study/framework/mycat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://lyblog2022.github.io/2022/10/09/study/framework/mycat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-10-09T05:55:55.000Z</published>
    <updated>2022-10-24T09:51:05.887Z</updated>
    
    <content type="html"><![CDATA[<p>MyCat数据切分及配置文件介绍</p><span id="more"></span><h3 id="1、数据切分"><a href="#1、数据切分" class="headerlink" title="1、数据切分"></a>1、数据切分</h3><p>​数据切分指的是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库上面，以达到分散单台设备负载的效果。</p><p>​数据的切分根据其切分规则的类型，可以分为两种切分模式。一种是按照不同的表来切分到不同的数据库之上，这种切可以称之为数据的垂直切分或者纵向切分，另外一种则是根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库上面，这种切分称之为数据的水平切分或者横向切分。</p><p>​垂直切分的最大特点就是 规则简单，实施也更为方便，尤其适合各业务之间的耦合度非常低，相互影响很小，业务逻辑非常清晰的系统。在这种系统中，可以很容易做到将不同业务模块所使用的表分拆到不同的数据库中。根据不同的表来进行拆分，对应用程序的影响也很小，拆分规则也会比较简单清晰。</p><p>​水平切分与垂直切分相比，相对来说稍微复杂一些。因为要将同一个表中的不同数据拆分到不同的数据库中，对于应用程序来说，拆分规则本身就较根据表明来拆分更为复杂，后期的数据维护也会更为复杂一些。</p><h4 id="1-1-垂直切分"><a href="#1-1-垂直切分" class="headerlink" title="1.1 垂直切分"></a>1.1 垂直切分</h4><p>​一个数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者压力分担到不同的库上面。</p><p>​<img src="/2022/10/09/study/framework/mycat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/cat1.png" class="" title="cat1 image"></p><p>​如上图，一个系统被切分成了用户系统、订单交易、支付系统等多个库</p><p>​一个架构设计较好的应用系统，其总体功能肯定是又多个功能模块所组成的。而每一个功能模块所需要的数据对应到数据库中就是一个或者多个表。而在架构设计中，各个功能模块相关质检的交互点越统一越少，系统的耦合度就越低，系统各个模块的维护性以及扩展性也就越好。这样的系统，实现数据的垂直切分也就越容易。</p><p>​但是往往系统中有些表难以做到完全的独立，存在着跨库join的情况，对于这类的表，就需要去做平衡，是数据让步业务，共用一个数据源还是分成多个库，业务之间通过接口来做调用。在系统初期，数据量比较少，或者资源有限的情况下，会选择共用数据源，但是当数据发展到一定规模，负载很大的情况下就必须要做分割。</p><p>​一般来讲业务存在着复杂join的场景是难以切分的，往往业务独立的易于切分。如何切分，切分到何种程度是考验技术架构的一个难题。下面来分析下垂直切分的优缺点：</p><p>优点：</p><ul><li>拆分后业务清晰，拆分规则明确</li><li>系统之间整合或扩展容易</li><li>数据维护简单</li></ul><p>缺点：</p><ul><li>部分业务表无法实现join，只能通过接口方式解决，提高了系统复杂度</li><li>受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高</li><li>事务处理复杂</li></ul><h4 id="1-2-水平切分"><a href="#1-2-水平切分" class="headerlink" title="1.2 水平切分"></a>1.2 水平切分</h4><p>​相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库中，每个表中包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行切分，就是将表中的某些行切分到一个数据库，而另外的某些行又切分到其他的数据库中，</p><p>​<img src="/2022/10/09/study/framework/mycat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/cat2.png" class="" title="cat2 image"></p><p>​拆分数据就需要定义分片规则。关系型数据库是行列的二维模型，拆分的第一原则是找到拆分维度。比如从会员的角度来分析，商户订单交易类系统中查询会员某天某月某个订单，那么就需要按照会员结合日期来拆分，不同的数据按照会员id做分组，这样所有的数据查询join都会在单库内解决；如果从商户的角度来讲，要查询某个商家某天所有的订单数，就需要按照商户id做拆分；但是如果系统既想按照会员拆分，又想按照商家数据拆分，就会有一定的困难，需要综合考虑找到合适的分片。</p><p>几种典型的分片规则包括：</p><ol><li>按照用户id取模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中；</li><li>按照日期，将不同月甚至日的数据分散到不同的库中；</li><li>按照某个特定的字段求模，或者根据特定范围段分散到不同的库中。</li></ol><p>如图，切分原则都是根据业务找到适合的切分规则分散到不同的库，下图是用用户id求模的案例：</p><p>​<img src="/2022/10/09/study/framework/mycat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/cat3.png" class="" title="cat3 image"></p><p>数据做完了水平拆分之后也是有优缺点的。</p><p>优点：</p><ol><li>拆分规则抽象好，join操作基本可以数据库做；</li><li>不存在单库大数据，高并发的性能瓶颈；</li><li>应用端改造较少；</li><li>提高了系统的稳定性跟负载能力</li></ol><p>缺点：</p><ol><li>拆分规则难以抽象</li><li>分片事务一致性难以解决</li><li>数据多次扩展跟维护量极大</li><li>跨库join性能较差</li></ol><h4 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h4><p>垂直切分和水平切分共同的缺点：</p><ol><li>引入了分布式事务的问题</li><li>跨节点join的问题</li><li>跨节点合并排序分页的问题</li><li>多数据源管理的问题</li></ol><p>针对数据源管理，目前主要有两种思路：</p><ol><li>客户端模式，在每个应用程序模块中配置管理自己需要的一个或多个数据源，直接访问各个数据库，在模块内完成数据的整合</li><li>通过中间代理层来统一管理所有的数据源，后端数据库集群对前端应用程序透明；</li></ol><p>​在实际的生产环境中，我们都会选择第二种方案来解决问题，尤其是系统不断变得庞大复杂的时候，其实这是非常正确的，虽然短期内付出的成本可能会比较大，但是对整个系统的扩展性来说，是非常有帮助的。</p><p>​mycat通过数据切分解决传统数据库的缺陷，又有了nosql易于扩展的优点。通过中间代理层规避了多数据源的数据问题，对应用完全透明，同时对数据切分后存在的问题，也做了解决方案。</p><p>​mycat在做数据切分的时候应该尽可能的遵循以下原则，当然这也是经验之谈，最终的落地实现还是要看具体的应用场景在做具体的分析</p><ul><li>第一原则：能不切分尽量不要切分</li><li>第二原则：如果要切分一定要选择合适的切分规则，提前规划好</li><li>第三原则：数据切分尽量通过数据冗余或表分组来降低跨库join的可能</li><li>第四原则：由于数据库中间件对数据join实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表join。</li></ul><h3 id="2、MyCat配置文件"><a href="#2、MyCat配置文件" class="headerlink" title="2、MyCat配置文件"></a>2、MyCat配置文件</h3><h4 id="2-1-schema-xml文件"><a href="#2-1-schema-xml文件" class="headerlink" title="2.1 schema.xml文件"></a>2.1 schema.xml文件</h4><p>schema.xml作为mycat中重要地配置文件之一，管理着mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p><h5 id="2-1-1-schema标签"><a href="#2-1-1-schema标签" class="headerlink" title="2.1.1 schema标签"></a>2.1.1 schema标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>schema标签用于定义mycat实例中的逻辑库，mycat可以有多个逻辑库，每个逻辑库都有自己相关的配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schame，那么所有的表配置都将属于同一个默认的逻辑库。</p><ul><li><strong>dataNode：</strong>该属性用于绑定逻辑库到某个具体的database上。</li><li><strong>checkSQLschema：</strong>当该值为true时，如果执行select * from TESTDB.user，那么mycat会将语句修改为select * from user,即把表示schema的字符去掉，避免发送到后端数据库执行时报错。</li><li><strong>sqlMaxLimit：</strong>当该值设置为某个数值的时候，每次执行的sql语句，如果没有加上limit语句，mycat也会自动加上对应的值。例如，当设置值为100的时候，那么select * from user的效果跟执行select * from user limit 100相同。如果不设置该值的话，mycat默认会把所有的数据信息都查询出来，造成过多的输出，所以，还是建议设置一个具体的值，以减少过多的数据返回。当然sql语句中可以显式的制定limit的大小，不受该属性的约束。</li></ul><h5 id="2-1-2-table标签"><a href="#2-1-2-table标签" class="headerlink" title="2.1.2 table标签"></a>2.1.2 table标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>table标签定义了mycat中的逻辑表，所有需要拆分的表都需要在这个标签中定义。</p><ul><li><strong>name：</strong>定义逻辑表的表名，这个名字就如同创建表的时候指定的表名一样，同个schema标签中定义的名字必须唯一。</li><li><strong>dataNode：</strong>定义这个逻辑表所属的dataNode，该属性的值需要和dataNode标签中的name属性值对应，如果需要定义的dn过多，可以使用如下方法减少配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;multipleDn$0-99,multipleDn2$100-199&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-shardinglong&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;multipleDn$0-99&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db$0-99&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;multipleDn2$100-199&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot; db$100-199&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>rule：</strong>该属性用于指定逻辑表要使用的规则名字，规则名字在rule.xml中定义，必须与tableRule标签中的name属性值一一对应</li><li><strong>ruleRequired：</strong>该属性用于指定表是否绑定分片规则，如果配置为true，但没有配置具体rule的话，程序会报错。</li><li><strong>primaryKey：</strong>该逻辑表对应真实表的主键，例如：分片的规则是使用非主键进行分片的，那么在使用主键查询的时候，就会发送查询语句到所有配置的DN上，如果使用改属性配置真实表的主键。那么mycat会缓存主键与具体DN的信息，那么再次使用非主键进行查询的时候就不会进行广播式的查询，就会直接发送语句到具体的DN，但是尽管配置改属性，如果缓存没有命中的话，还是会发送语句给具体的DN来获得数据</li><li><strong>type：</strong>该属性定义了逻辑表的类型，目前逻辑表只有全局表和普通表两种类型。对应的配置：<ul><li>全局表：global</li><li>普通表：不指定该值为global的所有表</li></ul></li><li><strong>autoIncrement：</strong>mysql 对非自增长主键，使用 last_insert_id()是不会返回结果的，只会返回 0。所以，只有定义了自增长主键的表才可以用 last_insert_id()返回主键值。mycat 目前提供了自增长主键功能，但是如果对应的 mysql 节点上数据表，没有定义 auto_increment，那么在 mycat 层调用 last_insert_id()也是不会返回结果的。由于 insert 操作的时候没有带入分片键， mycat 会先取下这个表对应的全局序列，然后赋值给分片键。 这样才能正常的插入到数据库中，最后使用 last_insert_id()才会返回插入的分片键值。如果要使用这个功能最好配合使用数据库模式的全局序列。使用 autoIncrement&#x3D;“true” 指定这个表有使用自增长主键，这样 mycat 才会不抛出分片键找不到的异常。使用 autoIncrement&#x3D;“false” 来禁用这个功能，当然你也可以直接删除掉这个属性。默认就是禁用的。 </li><li><strong>needAddLimit：</strong>指定表是否需要自动的在每个语句后面加上limit限制。由于使用了分库分表，数据量有时会特别巨大。这时候执行查询语句，如果恰巧又忘记了加上数量限制的话，那么查询所有的数据出来，就会执行很久的时间，所以mycat自动为我们加上了limit 100。当前如果语句中又limit，那么就不会添加了。</li></ul><h5 id="2-1-3-childTable标签"><a href="#2-1-3-childTable标签" class="headerlink" title="2.1.3 childTable标签"></a>2.1.3 childTable标签</h5><p>childTable标签用于定义ER分片的子表。通过标签上的属性与父表进行关联。</p><ul><li><strong>name：</strong>定义子表的表名</li><li><strong>joinKey：</strong>插入子表的时候会使用这个列的值查找父表存储的数据节点</li><li><strong>parentKey：</strong>属性指定的值一般为与父表建立关联关系的列名。程序首先获取joinkey的值，再通过parentKey属性指定的列名产生查询语句，通过执行该语句得到父表存储再哪个分片上，从而确定子表存储的位置。</li><li><strong>primaryKey：</strong>跟table标签所描述相同</li><li><strong>needAddLimit：</strong>跟table标签所描述相同</li></ul><h5 id="2-1-4-dataNode标签"><a href="#2-1-4-dataNode标签" class="headerlink" title="2.1.4 dataNode标签"></a>2.1.4 dataNode标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;lch3307&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dataNode标签定义了mycat中的数据节点，也就是我们通常说的数据分片，一个dataNode标签就是一个独立的数据分片。</p><ul><li><strong>name：</strong>定义数据节点的名字，这个名字需要是唯一的，我们需要再table标签上应用这个名字，来建立表与分片对应的关系</li><li><strong>dataHost：</strong>该属性用于定义该分片属于哪个数据库实例，属性值是引用dataHost标签上定义的name属性。</li><li><strong>database：</strong>该属性用于定义该分片属性哪个具体数据库实力上的具体库</li></ul><h5 id="2-1-5-dataHost标签"><a href="#2-1-5-dataHost标签" class="headerlink" title="2.1.5 dataHost标签"></a>2.1.5 dataHost标签</h5><p>​该标签定义了具体的数据库实例、读写分离配置和心跳语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- can have multi write hosts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;readHost host=&quot;hostS1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;</span></span><br><span class="line"><span class="comment">/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>name：</strong>唯一标识dataHost标签，供上层的标签使用</li><li><strong>maxcon：</strong>指定每个读写实例连接池的最大连接</li><li><strong>mincon：</strong>指定每个读写实例连接连接池的最小链接，初始化连接池的大小</li><li><strong>balance：</strong>负载均衡类型：<ul><li>0：不开启读写分离机制，所有读操作都发送到当前可用的writeHost上</li><li>1：全部的readHost和stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式（M1-&gt;S1,M2-&gt;S2,并且M1与M2互为主备），正常情况下，M2,S1,S2都参与select语句的负载均衡</li><li>2：所有读操作都随机的再writeHost、readHost上分发</li><li>3：所有读请求随机的分发到writeHost对应readHost执行，writeHost不负担读压力，在之后的版本中失效。</li></ul></li><li><strong>writeType：</strong>写类型<ul><li>writeType&#x3D;0：所有的写操作发送到配置的第一个writeHost，第一个挂了切换到还生存的第二个writeHost，重启之后以切换后的为准，切换记录保存在配置文件 dnindex.properties</li><li>writeType&#x3D;1：所有写操作都随机的发送到配置的writeHost，1.5以后废弃不推荐</li></ul></li><li><strong>dbType：</strong>指定后端连接的数据库类型，如MySQL，mongodb,oracle</li><li><strong>dbDriver：</strong>指定连接后端数据库使用的Driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和maridb，其他类型的数据库则需要使用JDBC驱动来支持</li><li><strong>switchType：</strong>是否进行主从切换<ul><li>-1：表示不自动切换</li><li>1：默认值，自动切换</li><li>2：基于mysql主从同步的状态决定是否切换</li></ul></li></ul><h5 id="2-1-6-heartbeat标签"><a href="#2-1-6-heartbeat标签" class="headerlink" title="2.1.6 heartbeat标签"></a>2.1.6 heartbeat标签</h5><p>​这个标签指明用于和后端数据库进行心跳检测的语句。</p><h4 id="2-2-server-xml文件"><a href="#2-2-server-xml文件" class="headerlink" title="2.2 server.xml文件"></a>2.2 server.xml文件</h4><p>server.xml几乎保存了所有mycat需要的系统配置信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">privileges</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0010&quot;</span> <span class="attr">showTables</span>=<span class="string">&quot;custome/mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tbl_user&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0110&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tbl_dynamic&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">privileges</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>​server.xml中的标签本就不多，这个标签主要用于定义登录mycat的用户和权限。</p><ul><li>property标签用来声明具体的属性值<ul><li>name用来指定用户名</li><li>password用来修改密码</li><li>readonly用来限制用户是否是只读的</li><li>schemas用来控制用户课访问的schema，如果有多个的话，用逗号分隔</li></ul></li><li>privileges标签是对用户的schema及下级的table进行精细化的DML控制<ul><li>check属性适用于标识是否开启DML权限检查，默认false标识不检查，当然不配置等同于不检查<ul><li>在进行检查的时候，是通过四个二进制位来标识的，insert，update，select，delete按照顺序标识，0表示未检查，1表示要检查</li></ul></li></ul></li><li>system标签表示系统的相关属性：<ul><li>charset：字符集设置，utf8，utf8mb4</li><li>defaultSqlParser：指定的默认解析器，druidparser，fdbparser(1.4之后作废)</li><li>processors：系统可用的线程数， 默认为机器CPU核心线程数</li><li>processorBufferChunk：每次分配socket direct buffer的大小，默认是4096个字节</li><li>processorExecutor：指定NIOProcessor共享的businessExecutor固定线程池大小，mycat在处理异步逻辑的时候会把任务提交到这个线程池中</li><li>sequnceHandlerType：mycat全局序列的类型，0为本地文件，1为数据库方式，2为时间戳方式，3为分布式ZK ID生成器，4为zk递增id生成</li></ul></li></ul><h4 id="2-3-rule-xml"><a href="#2-3-rule-xml" class="headerlink" title="2.3 rule.xml"></a>2.3 rule.xml</h4><p>​rule.xml里面就定义了我们对表进行拆分所涉及到的规则定义。我们可以灵活的对表使用不同的分片算法，或者对表使用相同的算法但具体的参数不同，这个文件里面主要有tableRule和function这两个标签。</p><h5 id="2-3-1-tableRule"><a href="#2-3-1-tableRule" class="headerlink" title="2.3.1 tableRule"></a>2.3.1 tableRule</h5><p>​这个标签被用来定义表规则，定义的表规则在schema.xml文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span>    </span><br></pre></td></tr></table></figure><ul><li>name属性：指定唯一的名字，用来标识不同的表规则</li><li>内嵌的rule标签：指定对物理表中的哪一列进行拆分和使用什么路由算法<ul><li>columns内指定要拆分的列的名字</li><li>algorithm使用function标签中的那么属性，连接表规则和具体路由算法。当然，多个表规则可以连接到同一个路由算法上。</li></ul></li></ul><h5 id="2-3-2-function"><a href="#2-3-2-function" class="headerlink" title="2.3.2 function"></a>2.3.2 function</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>name：指定算法的名字</li><li>class：指定路由算法具体的类名字</li><li>property：具体算法需要用到的一些属性</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyCat数据切分及配置文件介绍&lt;/p&gt;</summary>
    
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/categories/framework/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/categories/framework/MyCat/"/>
    
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/tags/MyCat/"/>
    
    <category term="framework" scheme="https://lyblog2022.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>MyCat安装</title>
    <link href="https://lyblog2022.github.io/2022/10/08/study/framework/mycat/mycat%E5%AE%89%E8%A3%85/"/>
    <id>https://lyblog2022.github.io/2022/10/08/study/framework/mycat/mycat%E5%AE%89%E8%A3%85/</id>
    <published>2022-10-08T09:01:24.000Z</published>
    <updated>2022-10-24T09:51:42.382Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8 安装 MyCat</p><span id="more"></span><h3 id="1、安装JDK"><a href="#1、安装JDK" class="headerlink" title="1、安装JDK"></a>1、安装JDK</h3><p><a href="/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/JDK/">CentOS8配置JDK</a></p><h3 id="2、安装MyCat"><a href="#2、安装MyCat" class="headerlink" title="2、安装MyCat"></a>2、安装MyCat</h3><h4 id="2-1-下载MyCat"><a href="#2-1-下载MyCat" class="headerlink" title="2.1 下载MyCat"></a>2.1 下载MyCat</h4><p>从官网下载需要的安装包，并且上传到具体的虚拟机中</p><p>下载地址为：<a href="http://dl.mycat.org.cn/">http://dl.mycat.org.cn/</a></p><p>解压文件到&#x2F;usr&#x2F;local文件夹下</p><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加以下配置信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">MYCAT_HOME=/usr/local/mycat</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$MYCAT_HOME/bin:$PATH:$JAVA_HOME/bin</span></span><br></pre></td></tr></table></figure><p>当执行到这步的时候，其实就可以启动了，但是为了能正确显示出效果，最好修改下mycat的具体配置，让我们能够正常进行访问。</p><h4 id="2-2-配置MyCat"><a href="#2-2-配置MyCat" class="headerlink" title="2.2 配置MyCat"></a>2.2 配置MyCat</h4><p>进入到&#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf目录下，修改该文件夹下的配置文件</p><p>1、修改server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </span></span><br><span class="line"><span class="comment">- you may not use this file except in compliance with the License. - You </span></span><br><span class="line"><span class="comment">may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span></span><br><span class="line"><span class="comment">- - Unless required by applicable law or agreed to in writing, software - </span></span><br><span class="line"><span class="comment">distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT </span></span><br><span class="line"><span class="comment">WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span></span><br><span class="line"><span class="comment">License for the specific language governing permissions and - limitations </span></span><br><span class="line"><span class="comment">under the License. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:server <span class="keyword">SYSTEM</span> <span class="string">&quot;server.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、修改schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;msb&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.213.164:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                                   <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.213.165:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-启动MyCat"><a href="#2-3-启动MyCat" class="headerlink" title="2.3 启动MyCat"></a>2.3 启动MyCat</h4><p>​MyCat的启动有两种方式，一种是控制台启动，一种是后台启动，在初学的时候建议使用控制台启动的方式，当配置文件写错之后，可以方便的看到错误，及时修改，但是在生产环境中，使用后台启动的方式比较稳妥。</p><ul><li>控制台启动：去mycat&#x2F;bin目录下执行 .&#x2F;mycat console</li><li>后台启动：去mycat&#x2F;bin目录下执行 .&#x2F;mycat start</li></ul><h4 id="2-4-登录验证"><a href="#2-4-登录验证" class="headerlink" title="2.4 登录验证"></a>2.4 登录验证</h4><ul><li><p><strong>管理窗口的登录</strong></p><p>从另外的虚拟机去登录访问当前mycat，输入如下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -P 9066 -h 192.168.213.168</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/08/study/framework/mycat/mycat%E5%AE%89%E8%A3%85/cat2.png" class="" title="cat2 image"></p></li><li><p><strong>数据窗口的登录</strong></p><p>从另外的虚拟机去登录访问mycat，输入命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -P8066 -h 192.168.213.168</span><br></pre></td></tr></table></figure><img src="/2022/10/08/study/framework/mycat/mycat%E5%AE%89%E8%A3%85/cat3.png" class="" title="cat3 image"><p>当都能够成功的时候以为着mycat已经搭建完成。</p></li></ul><h4 id="2-5-报错"><a href="#2-5-报错" class="headerlink" title="2.5 报错"></a>2.5 报错</h4><p><strong>启动报错</strong></p><p>​<img src="/2022/10/08/study/framework/mycat/mycat%E5%AE%89%E8%A3%85/cat1.png" class="" title="cat1 image"></p><p>提示 .&#x2F;wrapper-linux-x86-64 (Found but not executable.)、.&#x2F;wrapper-linux-x86-32 (Found but not executable.) 这两个文件不可执行</p><p><em>解决方案</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给权限</span></span><br><span class="line">chmod 755 ./wrapper-linux-x86-64 ./wrapper-linux-x86-32</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8 安装 MyCat&lt;/p&gt;</summary>
    
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/categories/framework/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/categories/framework/MyCat/"/>
    
    
    <category term="软件安装" scheme="https://lyblog2022.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/tags/MyCat/"/>
    
    <category term="framework" scheme="https://lyblog2022.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>MyCat的基本介绍</title>
    <link href="https://lyblog2022.github.io/2022/10/08/study/framework/mycat/mycat%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>https://lyblog2022.github.io/2022/10/08/study/framework/mycat/mycat%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-10-08T05:47:44.000Z</published>
    <updated>2022-10-24T08:59:32.641Z</updated>
    
    <content type="html"><![CDATA[<p>MyCat的前置知识及基本介绍</p><span id="more"></span><h3 id="1、前置知识"><a href="#1、前置知识" class="headerlink" title="1、前置知识"></a>1、前置知识</h3><h4 id="1-1-分布式系统"><a href="#1-1-分布式系统" class="headerlink" title="1.1 分布式系统"></a>1.1 分布式系统</h4><p>​分布式系统是指其组件分布在网络上，组件之间通过传递消息进行通信和动作协调的系统。它的核心理念是让多台服务器协同工作，完成单台服务器无法处理的任务，尤其是高并发或者大数据量的额任务。它的特点是：</p><ul><li><strong>透明性：</strong>分布式系统对于用户是透明的，一个分布式系统在用户面前的表现就像一个传统的单处理机分时系统，可用用户不必了解其内部结构就能使用;</li><li><strong>扩展性：</strong>分布式系统的最大特点是可扩展性，它能够根据需求的增加而扩展，可以通过横向扩展使集群的整体性能得到线性提升，也可以通过纵向扩展单台服务器的性能使服务器集群的性能得到提升;</li><li><strong>可靠性：</strong>分布式系统不允许单点失效的问题存在，它的基本思想是，如果一台机器坏了，则其他机器能够接替它进行工作，具有持续服务的特性;</li><li><strong>高性能：</strong>高性能才是设计分布式系统的初衷.</li></ul><p>分布式系统的缺点：</p><ul><li>在节点通信部分的开销比较大，线程安全问题也变得复杂，需要在保证数据完整性的同时兼顾性能</li><li>过分依赖网络，网络信息的丢失和饱和将会抵消分布式系统的大部分优势</li><li>有潜在的数据安全和网络安全等安全性问题。</li></ul><h4 id="1-2-分布式数据库"><a href="#1-2-分布式数据库" class="headerlink" title="1.2 分布式数据库"></a>1.2 分布式数据库</h4><p>​随着技术的发展，各个行业所产生的数据量呈爆炸式增长，动辄就达到数百TB或者PB的级别，已经远远超过了传统单机数据库的处理能力，因此分布式数据库已经成为了最最迫切的需求。</p><p>​分布式数据库是指数据在物理上分步而在逻辑上集中管理的数据库系统。物理上分步是指分布式数据库的数据分步在物理位置不同并由网络连接的节点或站点上；逻辑上集中是指各数据库节点之间在逻辑上是一个整体，并由统一的数据库管理系统管理，不同的节点分步可以跨不同的机房、城市甚至国家。</p><p>分布式数据库的特点:</p><ul><li><strong>透明性：</strong>用户不必关系数据的逻辑分区和物理位置分步的细节，也不必关系重复副本的一致性问题，同时不必关心在局部场地上数据库支持哪种数据模型</li><li><strong>数据冗余性：</strong>分布式数据库通过冗余实现系统的可靠性、可用性，并改善其性能。多个节点存储数据副本，当某一个节点的数据遭到破坏时，冗余的副本可保证数据的完整性；当工作的节点受损害时，可通过心跳等机制进行切换，系统整体不被破坏。还可以通过热点数据的就近分步原则减少网络通信的消耗，加快访问速度，改善性能。</li><li><strong>易于扩展性：</strong>在分布式数据库中能够方便地通过水平扩展提高系统的整体性能，也能够通过垂直扩展来提高性能，扩展并不需要修改系统程序。</li><li><strong>自治性：</strong>各节点上的数据由本地的DBMS管理，具有自治处理能力，完成本场地的应用或局部应用</li></ul><p>​分布式数据库还具有经济、性能优越、响应速度更快、灵活的体系结构、易于继承现有系统等特点。</p><h4 id="1-3-分布式数据库的实现原理"><a href="#1-3-分布式数据库的实现原理" class="headerlink" title="1.3 分布式数据库的实现原理"></a>1.3 分布式数据库的实现原理</h4><p>​分布式数据库具有逻辑整体性、物理分布式，正是因为其物理分布性才使得分布式数据库的实现变得更加复杂，因为数据划分后存储在不同的节点上，而为了保证可靠性，需要存储多个副本，所以产生了数据复制的问题。为了保证良好的性能，分布式数据库必须易于扩展，具体来讲分布式数据库应有4个优势：数据分片及复制管理、具有事务的可靠性存取、良好的性能、易于扩展，所以分布式数据库在设计上需要实现数据库数据库的目录管理、数据分片、分布式查询处理、分布式并发控制、分布式锁管理、分布式存储、分布式网络架构、分布式安全管理等。</p><p>​<strong>1、分布式数据库的目录管理</strong></p><p>​分布式数据库的目录存放着系统元数据及数据库的元数据的全部信息，这些数据的存在是为了正确、有效地访问数据。数据的增删改查操作都需要用到目录，用户授权、安全管理及并发控制等也都需要用到目录，目录结构的合理性直接影响数据库的性能。目录一般包括各级的描述、访问方法的描述、关于数据库的统计数据和一致性信息等，系统根据这些信息将用户查询转换为物理数据库上的查询，选择一条最佳的存取路径进行事务管理及安全性、完整性检查等。</p><p>​分布式数据库的目录课分为全局目录、分布式目录、全局与本地混合目录。</p><p>​<strong>2、数据分片</strong></p><p>​当数据库过于庞大，尤其是写入过于频繁且很难由一台主机支撑时，我们还是会面临扩展瓶颈。我们将存放在同一个数据库实例中的数据分散存放到多个数据库实例上，进行多台设备存取以提高性能，在切分数据的同时可以提高系统整体的可用性。</p><p>​数据分片是指将数据全局地划分为相关的逻辑片段，有水平切分、垂直切分、混合切分三种类型。</p><p>​<strong>水平切分：</strong>按照某个字段的某种规则分散到多个节点库中，每个节点中包含一部分数据。可以将数据的水平切分简单理解为按照数据行进行切分，就是将表中的某些行分到一个节点，将另外某些行切分到其他节点，从分布式的整体来看它们是一个整体的表</p><p>​<strong>垂直切分：</strong>一个数据库由很多表构成，每个表对应不同的业务，垂直切分是指按照业务将表进行分类并分不到不同的节点上，垂直拆分简单明了，拆分规则明确，应用程序模块清晰、明确、容易整合，但是某个表的数据量达到一定程度后扩展起来比较困难。</p><p>​<strong>混合切分：</strong>水平切分和垂直切分的结合</p><p>​<strong>3、分布式查询处理</strong></p><p>​分布式查询处理的任务就是把一个分布式数据库上的高层次查询映射为在本地数据库上的操作，查询的解析必须拆分为代数查询的关系运算序列，将要查询的数据定位到各节点，使得查询在各节点进行，最后通过网络通信的操作汇聚查询结果。</p><p>​<strong>4、分布式并发控制</strong></p><p>​并发控制是分布式事务管理的基本任务之一，其目的是保证分布式数据库中的多个事务并发高效、正确的执行。并发控制用来保证事务的可串行性，也就是说事务的并发执行等价于它们按某种次序的串行执行，从而为用户提供并发的透明性。进行并发控制的方法主要有三种：加锁并发控制、时间戳控制、乐观并发控制</p><ol><li>加锁并发控制应用广泛，但是容易发生死锁</li><li>时间戳控制消除了死锁，一旦发生冲突变回重启而不是等待，需要有全局的统一时钟</li><li>乐观并发控制对于冲突较少的系统较为合适，对于冲突多的系统则效率低下。</li></ol><h4 id="1-4-OLTP和OLAP"><a href="#1-4-OLTP和OLAP" class="headerlink" title="1.4 OLTP和OLAP"></a>1.4 OLTP和OLAP</h4><p>​在互联网时代，海量数据的存储和访问成为系统设计与使用的瓶颈，对于海量数据处理，按照使用场景，主要分为两种类型：联级事务处理（OLTP）和联级分析处理（OLAP）。</p><ul><li><strong>联级事务处理</strong>也称为面向事务的处理系统，其基本特征是原始数据可以立即传送到计算中心进行处理，在很短的时间内给出处理结果。</li><li><strong>联级分析处理</strong>是指通过多维的方式对数据进行分析、查询和报表，可以同数据挖掘工具、统计分析工具配合使用，增强决策分析功能。</li></ul><p>两者之间的区别:</p><table><thead><tr><th></th><th>OLTP</th><th>OLAP</th></tr></thead><tbody><tr><td>系统功能</td><td>日常交易处理</td><td>统计、分析、报表</td></tr><tr><td>DB设计</td><td>面向实时交易类应用</td><td>面向统计分析类应用</td></tr><tr><td>数据处理</td><td>当前的，最新的细节的，</td><td>历史的、聚集的、多维的、集成的</td></tr><tr><td>实时性</td><td>实时读写要求高</td><td>实时要求读写低</td></tr><tr><td>事务</td><td>强一致性</td><td>弱事务</td></tr><tr><td>分析要求</td><td>低，简单</td><td>高，复杂</td></tr></tbody></table><h4 id="1-5-关系型数据库和NoSQL"><a href="#1-5-关系型数据库和NoSQL" class="headerlink" title="1.5 关系型数据库和NoSQL"></a>1.5 关系型数据库和NoSQL</h4><p>​NoSQL数据库，全称为Not Only SQL,意思就是适用关系型数据库的时候就是用关系型数据库，不适用的时候也没必要非使用关系型数据库不可，可以考虑更加合适的数据存储，主要分为临时性键值存储（memcached，redis），永久性键值存储（redis），面向文档的数据库（mongoDB，CouchDB）,面向列的数据库（Cassandra，HBase），每种NoSQL都有其特有的使用场景及优点。</p><table><thead><tr><th></th><th>关系型数据库</th><th>NoSQL数据库</th></tr></thead><tbody><tr><td>特点</td><td>数据关系模型基于关系模型，结构化存储，完整性约束<br />基于二维表及其之间的联系，需要连接、并、交、差等操作<br />采用结构化的查询语言做数据读写<br />操作需要数据的一致性，需要事务甚至强一致性</td><td>非结构化的存储<br />基于多维关系模型<br />具有特色的使用场景</td></tr><tr><td>优点</td><td>保证数据的一致性<br />可以进行join等复杂查询<br />通用化，技术成熟</td><td>高并发、大数据下读写能力强<br />支持分布式，易于扩展，可伸缩<br />简单，弱结构化存储</td></tr><tr><td>缺点</td><td>数据读写必须经过sql解析，大量数据、高并发读写性能不足<br />对数据做读写，或修改数据结构时需要加锁，影响并发操作<br />无法适应非结构化存储<br />扩展困难<br />昂贵、复杂</td><td>join等复杂操作能力较弱<br />事务支持较弱<br />通用性差<br />无完整约束复杂业务场景支持较差</td></tr></tbody></table><h3 id="2、MyCat"><a href="#2、MyCat" class="headerlink" title="2、MyCat"></a>2、MyCat</h3><h4 id="2-1-MyCat是什么"><a href="#2-1-MyCat是什么" class="headerlink" title="2.1 MyCat是什么"></a>2.1 MyCat是什么</h4><ul><li><p>从定义和分类来看，它是一个开源的分布式数据库系统，是一个实现了 MySQL 协议的 Server</p></li><li><p>前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问</p></li><li><p>后端可以用 MySQL 原生（Native） 协议与多个 MySQL 服务器通信，也可以用 JDBC 协议与大多数主流数据库服务器通信</p></li><li><p>其核心功能是分表分库，即将一个大表水平分割为 N 个小表，存储在后端 MySQL 服务器里或者其他数据库里。</p></li></ul><blockquote><p>Mycat 发展到目前的版本，已经不是一个单纯的 MySQL 代理了，它的后端可以支持 MySQL、 SQL Server、Oracle、 DB2、 PostgreSQL 等主流数据库，也支持 MongoDB 这种新型 NoSQL 方式的存储，未来还会支持更多类型的存储。</p><p>而在最终用户看来，无论是那种存储方式，在 Mycat 里，都是一个传统的数据库表，支持标准的<br>SQL 语句进行数据的操作，这样一来，对前端业务系统来说，可以大幅降低开发难度，提升开发速度，在测试阶段，可以将一个表定义为任何一种 Mycat 支持的存储方式，比如 MySQL 的 MyASIM 表、内存表、或者MongoDB、 LevelDB 以及号称是世界上最快的内存数据库 MemSQL 上。</p><p>试想一下，用户表存放在 MemSQL 上，大量读频率远超过写频率的数据如订单的快照数据存放于 InnoDB 中，一些日志数据存放于 MongoDB 中，而且还能把 Oracle 的表跟 MySQL 的表做关联查询，你是否有一种不能呼吸的感觉？而未来，还能通过 Mycat 自动将一些计算分析后的数据灌入到 Hadoop 中，并能用 Mycat+Storm&#x2F;Spark Stream 引擎做大规模数据分析</p></blockquote><p>【不同角色对MyCat的理解】</p><ul><li>对于<strong>DBA</strong>而言，可以这么理解MyCat：</li></ul><blockquote><p>Mycat就是MySQL Server，而Mycat后面连接的MySQL Server，就好像是MySQL的存储引擎，如InnoDB，MyISAM等，因此，Mycat本身并不存储数据，数据是在后端的MySQL上存储的，因此数据可靠性以及事务都是MySQL保证的，简单说，Mycat就是MySQL最佳伴侣，它再一定程度上让MySQL拥有了能跟Oracle PK的能力。</p></blockquote><ul><li>对于<strong>软件工程师</strong>来说，可以这么理解MyCat:</li></ul><blockquote><p>Mycat就是一个近似等于MySQL的数据库服务器，你可以用连接MySQL的方式去连接Mycat，除了端口不同，默认的mycat端口是8066而不是mysql的3306，因此需要再连接字符串上增加端口信息，大多数情况下，可以用你熟悉的对象映射框架使用mycat，但建议对于分片表，尽量使用基础的SQL语句，因为这样能达到最佳性能，特别是几千万甚至几百亿条记录的情况下。</p></blockquote><ul><li>对于<strong>架构师</strong>来说，可以这么理解MyCat：</li></ul><blockquote><p>mycat是一个强大的数据库中间件，不仅仅可以用作读写分离、以及分库分表、容灾备份，而且可以用于多租户应用开发，云平台基础设施，让你的架构具备很强的适应性和灵活性，借助于即将发布的mycat只能优化模块，系统的数据访问瓶颈和热点一目了然，根据这些统计分析数据，你可以自动或手工调整后端存储，将不同的表映射到不同的存储引擎上，而整个应用的代码一行也不用改变。</p></blockquote><h4 id="2-2-MyCat原理"><a href="#2-2-MyCat原理" class="headerlink" title="2.2 MyCat原理"></a>2.2 MyCat原理</h4><p>​mycat的原理并不复杂，复杂的是代码</p><p>​mycat的原理中最重要的一个动作是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发送后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户</p><img src="/2022/10/08/study/framework/mycat/mycat%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/cat1.png" class="" title="cat1 image"><p>​上述图片里，orders表被分为了三个分片datanode（简称dn），这三个分片是分布在两台MySQL Server上（Datahost），即datanode&#x3D;database@datahost方式，因此你可以用一台到N台服务器来分片，分片规则为（sharding rule）典型的字符串枚举分片规则，一个规则的定义是分片字段（sharding column）+ 分片函数（rule function），这里的分片字段为prov而分片函数为字符串枚举方式。</p><p>​当mycat收到一个SQL时，会先解析这个SQL，查找涉及到的表，然后看此表的定义，如果有分片规则，则获取到SQL里分片字段的值，并分配分片函数，得到该SQL对应的分片列表，然后将SQL发往这些分片去执行，最后收集和处理所有分片返回的结果数据，并输出到客户端，以select * from orders where prov &#x3D; ?语句为例，查到prov&#x3D;wuhan，按照分片函数，wuhan返回dn1，于是sql就发给了mysql1，去取db1上的查询结果，并返回给用户。</p><p>​如果上述sql改为select * from orders where prov in (wuhan,beijing)，那么，sql就会发给MySQL1和MySQL2去执行，然后结果集合并后输出给用户。但通常业务中我们的SQL会有order by以及limit翻页语法，此时就设计到结果集在mycat端的二次处理，这部分代码也比较复杂，而最复杂的则属两个表的join，为此，mycat提出了创新性的ER分片，全局表，HBT（human brain tech）人工智能的catlet，以及结合storm&#x2F;spark引擎等十八般武艺的解决办法</p><h4 id="2-3-应用场景"><a href="#2-3-应用场景" class="headerlink" title="2.3 应用场景"></a>2.3 应用场景</h4><p>mycat发展到现在，使用的场景已经很丰富，而且不断有新用户给出新的创新性的方案，以下是典型的应用场景：</p><ul><li>单纯的读写分离，此时配置最为简单，支持读写分离，主从切换</li><li>分库分表，对于超过1000万的表进行分片，最大支持1000亿的单表分片</li><li>多租户应用，每个应用一个库，但应用程序只连接mycat，从而不改造程序本身，实现多租户化</li><li>报表系统，借助mycat的分表能力，处理大规模报表的统计</li><li>整合多数据源</li><li>作为海量数据实时查询的一种简单有效方案，比如100亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时mycat可能是最简单有效的选择</li><li>数据库路由器，mycat基于mysql实例的连接池复用机制，可以让每一个应用最大程度地共享一个mysql实例地所有连接池，让数据库地并发访问能力大大提升</li></ul><h4 id="2-4-为什么使用mycat"><a href="#2-4-为什么使用mycat" class="headerlink" title="2.4 为什么使用mycat"></a>2.4 为什么使用mycat</h4><ol><li>java与数据库紧耦合</li><li>高访问量高并发对数据库的压力</li><li>读写请求数据不一致</li></ol><h4 id="2-5-数据库中间件对比"><a href="#2-5-数据库中间件对比" class="headerlink" title="2.5 数据库中间件对比"></a>2.5 数据库中间件对比</h4><table><thead><tr><th>对比项目</th><th>mycat</th><th>mango</th><th>cobar</th><th>heisenberg</th><th>altas</th><th>amoeba</th></tr></thead><tbody><tr><td>数据切片</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>读写分离</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>宕机自动切换</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>半支持，影响写</td><td>不支持</td></tr><tr><td>mysql协议</td><td>前后端支持</td><td>JDBC</td><td>前端支持</td><td>前后端支持</td><td>前后端支持</td><td>JDBC</td></tr><tr><td>支持的数据库</td><td>mysql，oracle，mongodb，postgresql</td><td>mysql</td><td>mysql</td><td>mysql</td><td>mysql</td><td>mysql，mongodb</td></tr><tr><td>社区活跃度</td><td>高</td><td>活跃</td><td>停滞</td><td>低</td><td>中等</td><td>停滞</td></tr><tr><td>文档资料</td><td>极丰富</td><td>较齐全</td><td>较齐全</td><td>较少</td><td>中等</td><td>缺少</td></tr><tr><td>是否开源</td><td>开源</td><td>开源</td><td>开源</td><td>开源</td><td>开源</td><td>开源</td></tr><tr><td>是否支持事务</td><td>弱XA</td><td>支持</td><td>单库强一致，分布式弱事务</td><td>单库强一致，多库弱事务</td><td>单库强一致，分布弱事务</td><td>不支持</td></tr></tbody></table><h3 id="3、MyCat核心概念"><a href="#3、MyCat核心概念" class="headerlink" title="3、MyCat核心概念"></a>3、MyCat核心概念</h3><p>​mycat是数据库中间件，就是介于数据库与应用之间，进行数据处理和交互的中间服务。从原有的一个库，被切分为多个分片数据库，所有的分片数据库集群构成了整个完整的数据库存储。</p><img src="/2022/10/08/study/framework/mycat/mycat%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/cat2.png" class="" title="cat2 image"><p>​如上图所示，数据被分到多个分片数据库之后，应用如果需要读取数据，就要处理多个数据源的数据。如果没有数据库中间件，那么应用将直接面对分片集群，数据源切换、事务处理、数据聚合都需要应用直接处理，原本该是专注于业务的应用，将会话大量的工作来处理分片后的问题，最重要的是每个应用处理将是完全的重复造轮子。</p><h4 id="3-1-逻辑库"><a href="#3-1-逻辑库" class="headerlink" title="3.1 逻辑库"></a>3.1 逻辑库</h4><p>​对于实际应用而言，其实并不需要知道中间件的存在，开发人员只需要知道数据库的概念即可，所以数据库中间件可以被看作是一个或多个数据库集群构成的逻辑库。</p><p>​在云计算时代，数据库中间件可以以多租户的形式给一个或多个应用提供服务，每个应用访问的可能是一个独立或者共享的物理库，常见的如阿里云数据库服务器RDS</p><p>​<img src="/2022/10/08/study/framework/mycat/mycat%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/cat3.png" class="" title="cat3 image"></p><h4 id="3-2-逻辑表"><a href="#3-2-逻辑表" class="headerlink" title="3.2 逻辑表"></a>3.2 逻辑表</h4><p>​既然有逻辑库，那么就应该有逻辑表，在分布式数据库中，对应用来说，读写数据的表就是逻辑表。逻辑表可以使数据切分后，分步在一个或多个分片库中，也可以不做数据切分，不分片，只有一个表构成</p><h4 id="3-3-分片表"><a href="#3-3-分片表" class="headerlink" title="3.3 分片表"></a>3.3 分片表</h4><p>​分片表，是指那些原有的很大数据的表，需要切分到多个数据库的表，这样每一个分片都会有一部分数据，所有分片构成了完整的数据。</p><h4 id="3-4-非分片表"><a href="#3-4-非分片表" class="headerlink" title="3.4 非分片表"></a>3.4 非分片表</h4><p>​一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。</p><h4 id="3-5-ER表"><a href="#3-5-ER表" class="headerlink" title="3.5 ER表"></a>3.5 ER表</h4><p>​关系型数据库是基于实体关系模型之上，通过其描述了真实世界中事物与关系，mycat中的ER表就是来源于此。根据这一思路，提出了基于ER关系的数据分片策略，子表的记录与所关联的父表记录存放在同一个数据分片上，即子类依赖于父类，通过表分组保证数据join不会跨库操作。</p><p>​表分组是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则。</p><h4 id="3-6-全局表"><a href="#3-6-全局表" class="headerlink" title="3.6 全局表"></a>3.6 全局表</h4><p>​一个真实的业务系统中，往往存在大量的类似字典表的表，这些表基本上很少变动，字典表具有以下几个特点：</p><ol><li>变动不频繁</li><li>数据量总体变化不大</li><li>数据规模不大，很少有超过数十万条记录</li></ol><p>​对于这类的表，在分片的情况下，当业务表因为规模而进行分片以后，业务表与这些附属的字典表之间的关联，就成了比较棘手的问题，所以mycat中通过数据冗余来解决这类表的join，即所有的分片都有一份数据的拷贝，所有将字典表或者符合字典表特性的一些表定义为全局表。</p><p>​数据冗余是解决跨分片数据join的一种很好思路，也是数据切分规划的另外一条重要原则</p><h4 id="3-7-分片节点（dataNode）"><a href="#3-7-分片节点（dataNode）" class="headerlink" title="3.7 分片节点（dataNode）"></a>3.7 分片节点（dataNode）</h4><p>​数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点（dataNode）</p><h4 id="3-8-节点主机（dataHost）"><a href="#3-8-节点主机（dataHost）" class="headerlink" title="3.8 节点主机（dataHost）"></a>3.8 节点主机（dataHost）</h4><p>​数据切分后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（dataNode）所在的机器就是节点主机（dataHost），为了规避单节点主机并发数限制，尽量将读写压力高的分片节点（dataNode）均衡的放在不同的节点主机（dataHost）。</p><h4 id="3-9-分片规则"><a href="#3-9-分片规则" class="headerlink" title="3.9 分片规则"></a>3.9 分片规则</h4><p>​数据切分是指一个大表被分成若干个分片表，就需要一定的规则，这样按照某种规则把数据分到某个分片的规则就是分片规则，数据切分选择合适的分片规则非常重要，将极大的避免后续数据处理的难度。</p><h4 id="3-10-全局序列号"><a href="#3-10-全局序列号" class="headerlink" title="3.10 全局序列号"></a>3.10 全局序列号</h4><p>​数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号。</p><h4 id="3-11-多租户"><a href="#3-11-多租户" class="headerlink" title="3.11 多租户"></a>3.11 多租户</h4><p>​多租户技术或称多重租赁技术，是一种软件架构技术，它是在探讨与实现如何于多用户的环境下共用相同的系统或程序组件，并且扔可确保各用户间数据的隔离性。在云计算时代，多租户技术在共用的数据中心以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。目前各种各样的云计算服务就是这类技术范畴，例如阿里云数据库服务（RDS），阿里云服务器等等。</p><p>​多租户在数据存储上存在三种主要的方案，分别是：</p><ul><li><strong>独立数据库</strong>：一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本也高。<ul><li>优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求，如果出现故障，恢复数据比较简单。</li><li>缺点：增大了数据库的安装数量，随之带来维护成本和购置成本的增加</li></ul></li><li><strong>共享数据库，隔离数据架构</strong>：多个或者所有租户共享database，但是每一个租户一个schema<ul><li>优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可以支持更多的租户数量</li><li>缺点：如果出现故障，数据恢复比较困难，因此恢复数据库将牵扯到其他租户的数据，如果需要跨租户统计数据，存在一定困难</li></ul></li><li><strong>共享数据库，共享数据结构</strong>：租户共享同一个database，同一个schema，但在表中通过tenantID区分租户的数据。这是共享程度最高、隔离级别最低的模式<ul><li>优点：维护和购置成本最低，运行每个数据库支持的租户数量最多</li><li>缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量，数据备份和恢复最困难，需要逐表逐条备份和还原。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyCat的前置知识及基本介绍&lt;/p&gt;</summary>
    
    
    
    <category term="framework" scheme="https://lyblog2022.github.io/categories/framework/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/categories/framework/MyCat/"/>
    
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/tags/MyCat/"/>
    
    <category term="framework" scheme="https://lyblog2022.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8安装MySQL环境</title>
    <link href="https://lyblog2022.github.io/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/"/>
    <id>https://lyblog2022.github.io/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/</id>
    <published>2022-10-05T04:42:47.000Z</published>
    <updated>2022-10-24T07:49:03.617Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装MySQL环境，使用数据库软件远程链接，并配置主从连接</p><span id="more"></span><h3 id="1、删除环境自带MySQL"><a href="#1、删除环境自带MySQL" class="headerlink" title="1、删除环境自带MySQL"></a>1、删除环境自带MySQL</h3><p>使用yml命令删除已经安装的MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y mysql</span><br></pre></td></tr></table></figure><p>使用find命令找到残留文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p>使用rm -rf命令删除残留文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/selinux/targeted/active/modules/100/mysql</span><br><span class="line">rm -rf /usr/share/bash-completion/completions/mysql</span><br><span class="line">rm -rf /usr/share/selinux/targeted/default/active/modules/100/mysql</span><br></pre></td></tr></table></figure><img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/qw1.png" class="" title="qw1 image"><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</span><br><span class="line">yum install mysql80-community-release-el8-1.noarch.rpm</span><br></pre></td></tr></table></figure><p>查看mysql数据源是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/2.png" class="" title="qw2 image"></p><p>执行以下命令安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure><p>如果出现No match for argument: mysql-community-server<br>可执行 yum module disable mysql命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum module disable mysql // 禁用命令</span><br></pre></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>报错：</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/3.png" class="" title="qw3 image"></p><p>正确启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/systemctl start mysqld.service</span><br><span class="line">service mysqld status</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/4.png" class="" title="qw4 image"></p><h3 id="4、登录并修改密码"><a href="#4、登录并修改密码" class="headerlink" title="4、登录并修改密码"></a>4、登录并修改密码</h3><h4 id="4-1-显示随机密码"><a href="#4-1-显示随机密码" class="headerlink" title="4.1 显示随机密码"></a>4.1 显示随机密码</h4><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/5.png" class="" title="qw5 image"></p><p>方框中的密码即为生成的随机密码</p><h4 id="4-2-登录"><a href="#4-2-登录" class="headerlink" title="4.2 登录"></a>4.2 登录</h4><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/6.png" class="" title="qw6 image"></p><h4 id="4-3-修改密码"><a href="#4-3-修改密码" class="headerlink" title="4.3 修改密码"></a>4.3 修改密码</h4><p>【注意】密码先修改成”Root_2022”，因为我们随便修改密码时,一般都不满足它的策略，会报错误: <code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code></p><p>【解决方案】一定要先修改默认密码为: Root_2022 满足它的策略,再进行下面的操作:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Root_2022&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                        <span class="operator">|</span> <span class="keyword">Value</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> validate_password.check_user_name    <span class="operator">|</span> <span class="keyword">ON</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.dictionary_file    <span class="operator">|</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.length             <span class="operator">|</span> <span class="number">8</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.mixed_case_count   <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.number_count       <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.policy             <span class="operator">|</span> MEDIUM <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.special_char_count <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+--------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your password&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="5、开放远程访问"><a href="#5、开放远程访问" class="headerlink" title="5、开放远程访问"></a>5、开放远程访问</h3><p>创建权限记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure><p>关闭系统防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewall;//查看防火墙状态</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/7.png" class="" title="qw7 image"></p><ul><li>systemctl stop firewalld.service （关闭防火墙）</li><li>systemctl start firewalld.service （开启防火墙）</li><li>systemctl disable firewalld.service （禁止防火墙自启动）</li><li>systemctl enable firewalld.service （防火墙随系统开启启动）</li></ul><p>使用navicat远程连接mysql</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/8.png" class="" title="qw8 image"></p><h3 id="6、配置主从"><a href="#6、配置主从" class="headerlink" title="6、配置主从"></a>6、配置主从</h3><p>现有两台服务器 <strong>192.168.213.164 和 192.168.213.165</strong>，在这两台服务器之间搭建一主一从MySQL，配置164位主，165为从</p><h4 id="6-1-主数据库修改"><a href="#6-1-主数据库修改" class="headerlink" title="6.1 主数据库修改"></a>6.1 主数据库修改</h4><p>修改&#x2F;etc&#x2F;my.cnf</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/9.png" class="" title="qw9 image"></p><ul><li>server-id值要唯一不能与从数据库重复；</li><li>log-bin 设置为 mysql-bin；</li></ul><p>关闭164的MySQL服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpt | grep mysql</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/10.png" class="" title="qw10 image"></p><p>使用kill命令关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 33830</span><br></pre></td></tr></table></figure><p>再次启动mysql</p><h4 id="6-2-从数据库修改"><a href="#6-2-从数据库修改" class="headerlink" title="6.2 从数据库修改"></a>6.2 从数据库修改</h4><p>修改&#x2F;etc&#x2F;my.cnf</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/11.png" class="" title="qw11 image"></p><ul><li>server-id值要唯一不能与主数据库重复；</li><li>log-bin 设置为 mysql-bin；</li></ul><p>关闭165的MySQL服务</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/12.png" class="" title="qw12 image"></p><p>再次启动mysql</p><h4 id="6-3-查看主服务器的状态"><a href="#6-3-查看主服务器的状态" class="headerlink" title="6.3 查看主服务器的状态"></a>6.3 查看主服务器的状态</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>      <span class="number">157</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="6-4-从服务器执行"><a href="#6-4-从服务器执行" class="headerlink" title="6.4 从服务器执行"></a>6.4 从服务器执行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.213.164&#x27;</span>, master_port<span class="operator">=</span><span class="number">3306</span>, master_user<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;password&#x27;</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">157</span>;</span><br></pre></td></tr></table></figure><ul><li>master_host 为主服务器的地址</li><li>master_port 为MySQL端口号。</li><li>master_user 为主服务器的用户名。</li><li>master_password 为用户密码。</li><li>master_log_file 为主数据库中File处的值。</li><li>master_log_pos 为主数据库中Position处的值。</li></ul><h4 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5 测试"></a>6.5 测试</h4><p>主：创建test的数据库</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/13.png" class="" title="qw13 image"></p><p>刷新从数据库：</p><p>​<img src="/2022/10/05/study/database/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/14.png" class="" title="qw14 image"></p><h4 id="6-6-解除主从"><a href="#6-6-解除主从" class="headerlink" title="6.6 解除主从"></a>6.6 解除主从</h4><p>关闭主从：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>重置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  reset slave all;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>显示主从状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status;</span><br><span class="line">Empty set</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装MySQL环境，使用数据库软件远程链接，并配置主从连接&lt;/p&gt;</summary>
    
    
    
    <category term="软件安装" scheme="https://lyblog2022.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    <category term="MySQL" scheme="https://lyblog2022.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/MySQL/"/>
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="软件安装" scheme="https://lyblog2022.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    <category term="MySQL" scheme="https://lyblog2022.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8配置JDK环境</title>
    <link href="https://lyblog2022.github.io/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/"/>
    <id>https://lyblog2022.github.io/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/</id>
    <published>2022-06-06T13:41:00.000Z</published>
    <updated>2022-10-24T08:44:18.991Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8配置JDK环境</p><span id="more"></span><h3 id="1、使用Yum安装"><a href="#1、使用Yum安装" class="headerlink" title="1、使用Yum安装"></a>1、使用Yum安装</h3><p>安装OpenJDK的可以选择此方法，方便快捷</p><h4 id="1-1-查看是否有JDK环境"><a href="#1-1-查看是否有JDK环境" class="headerlink" title="1.1 查看是否有JDK环境"></a>1.1 查看是否有JDK环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><img src="/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/jdk1.png" class="" title="jdk1 image"><p>可以看到系统自带的 OpenJDK 版本信息，如果不满足，则卸载现有JDK</p><h4 id="1-2-卸载现有JDK"><a href="#1-2-卸载现有JDK" class="headerlink" title="1.2 卸载现有JDK"></a>1.2 卸载现有JDK</h4><p>使用 rpm 命令查询 java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure><img src="/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/jdk2.png" class="" title="jdk2 image"><p>.noarch文件可以不用管，卸载其余条目</p><p>执行一下命令卸载信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.201.b09-2.el8.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.201.b09-2.el8.x86_64</span><br></pre></td></tr></table></figure><p>卸载完后查询版本信息</p><img src="/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/jdk3.png" class="" title="jdk3 image"><h4 id="1-3-使用Yum安装OpenJDK"><a href="#1-3-使用Yum安装OpenJDK" class="headerlink" title="1.3 使用Yum安装OpenJDK"></a>1.3 使用Yum安装OpenJDK</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h5 id="1-3-1-报错"><a href="#1-3-1-报错" class="headerlink" title="1.3.1 报错"></a>1.3.1 报错</h5><img src="/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/jdk4.png" class="" title="jdk4 image"><p>报错信息为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed to synchronize cache for repo &#x27;AppStream&#x27;, ignoring this repo.</span><br><span class="line">Failed to synchronize cache for repo &#x27;BaseOS&#x27;, ignoring this repo.</span><br></pre></td></tr></table></figure><h5 id="1-3-2-解决方案"><a href="#1-3-2-解决方案" class="headerlink" title="1.3.2 解决方案"></a>1.3.2 <strong>解决方案</strong></h5><p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11CuEoi9">切换阿里源</a></p><p>1、备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><p>2、下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span><br></pre></td></tr></table></figure><p>3、生成缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><img src="/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/jdk5.png" class="" title="jdk5 image"><h4 id="1-4-校验"><a href="#1-4-校验" class="headerlink" title="1.4 校验"></a>1.4 校验</h4><img src="/2022/06/06/study/other/CentOS8%E9%85%8D%E7%BD%AEjdk%E7%8E%AF%E5%A2%83/jdk6.png" class="" title="jdk6 image"><h3 id="2、使用rpm包安装"><a href="#2、使用rpm包安装" class="headerlink" title="2、使用rpm包安装"></a>2、使用rpm包安装</h3><p>适用于有提供RPM Package的情况，例如Oracle JDK有提供。</p><p><a href="https://www.oracle.com/java/technologies/downloads/archive/">Oracle JDK所有版本下载</a></p><p><a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">OracleJDK8下载</a></p><p>待定</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8配置JDK环境&lt;/p&gt;</summary>
    
    
    
    <category term="软件安装" scheme="https://lyblog2022.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    <category term="JDK" scheme="https://lyblog2022.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/JDK/"/>
    
    
    <category term="软件安装" scheme="https://lyblog2022.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    <category term="JDK" scheme="https://lyblog2022.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>使用post方式调用接口并传递参数</title>
    <link href="https://lyblog2022.github.io/2022/05/18/summary/20220518/%E4%BD%BF%E7%94%A8post%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%B9%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <id>https://lyblog2022.github.io/2022/05/18/summary/20220518/%E4%BD%BF%E7%94%A8post%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E5%B9%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</id>
    <published>2022-05-18T13:06:35.000Z</published>
    <updated>2022-10-30T04:34:14.700Z</updated>
    
    <content type="html"><![CDATA[<p>使用post方式调用接口并传递参数</p> <span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.summary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url：请求URL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headerParamsJson：请求header参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paramJson：请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">sendData</span><span class="params">(String url, JSONObject headerParamsJson, JSONObject paramJson)</span> &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">resultJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送post请求</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">HttpPost</span> <span class="variable">httppost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"><span class="type">RequestConfig</span> <span class="variable">defaultRequestConfig</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">.setConnectionRequestTimeout(<span class="number">5000</span>).setSocketTimeout(<span class="number">15000</span>).build();</span><br><span class="line">httppost.setConfig(defaultRequestConfig);</span><br><span class="line"><span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(paramJson.toJSONString(), <span class="string">&quot;utf-8&quot;</span>);<span class="comment">// 解决中文乱码问题</span></span><br><span class="line">entity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">entity.setContentType(<span class="string">&quot;text/json&quot;</span>);</span><br><span class="line">httppost.setEntity(entity);</span><br><span class="line">httppost.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加header参数</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">headerParamsIterator</span> <span class="operator">=</span> headerParamsJson.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (headerParamsIterator.hasNext()) &#123;</span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) headerParamsIterator.next();</span><br><span class="line">httppost.setHeader(entry.getKey().toString(), entry.getValue().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装填参数</span></span><br><span class="line">List&lt;NameValuePair&gt; nvps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;NameValuePair&gt;();</span><br><span class="line"><span class="keyword">if</span> (paramJson != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> paramJson.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iterator.next();</span><br><span class="line">nvps.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>((String) entry.getKey(), (String) entry.getValue()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UrlEncodedFormEntity</span> <span class="variable">reqEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(nvps, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">httppost.setEntity(reqEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行post请求.</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response1</span> <span class="operator">=</span> httpclient.execute(httppost);</span><br><span class="line"><span class="type">String</span> <span class="variable">resultText</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response1.getStatusLine().getStatusCode();</span><br><span class="line"><span class="keyword">if</span> (statusCode != <span class="number">200</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 响应实体</span></span><br><span class="line"><span class="type">HttpEntity</span> <span class="variable">entity2</span> <span class="operator">=</span> response1.getEntity();</span><br><span class="line"><span class="keyword">if</span> (entity2 != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 响应内容</span></span><br><span class="line">resultText = EntityUtils.toString(entity2, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">resultJson = JSONObject.parseObject(resultText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resultJson.put(<span class="string">&quot;code&quot;</span>, statusCode);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response1.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">resultJson.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;410&quot;</span>);</span><br><span class="line">resultJson.put(<span class="string">&quot;err&quot;</span>, e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resultJson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用post方式调用接口并传递参数&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://lyblog2022.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    <category term="接口调用" scheme="https://lyblog2022.github.io/categories/%E6%80%BB%E7%BB%93/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    
    
    <category term="httpClient" scheme="https://lyblog2022.github.io/tags/httpClient/"/>
    
    <category term="接口调用" scheme="https://lyblog2022.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
</feed>
