<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Note</title>
  
  <subtitle>Welcome To My World</subtitle>
  <link href="https://lyblog2022.github.io/atom.xml" rel="self"/>
  
  <link href="https://lyblog2022.github.io/"/>
  <updated>2022-07-18T08:44:24.058Z</updated>
  <id>https://lyblog2022.github.io/</id>
  
  <author>
    <name>ly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>14. 最长公共前缀</title>
    <link href="https://lyblog2022.github.io/2022/07/18/leetcode/easy/question14/"/>
    <id>https://lyblog2022.github.io/2022/07/18/leetcode/easy/question14/</id>
    <published>2022-07-18T08:40:03.000Z</published>
    <updated>2022-07-18T08:44:24.058Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串“”。</p><span id="more"></span><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; strs.length &lt;&#x3D; 200</li><li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 200</li><li>strs[i] 仅由小写英文字母组成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question14;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/18 16:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] str1 = &#123;<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;racecar&quot;</span>, <span class="string">&quot;car&quot;</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().longestCommonPrefix(str1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (strs != <span class="literal">null</span> &amp;&amp; strs.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先读取前两个字符串的公共前缀</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> strs[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; str1.length() &amp;&amp; index &lt; str2.length()) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">s1</span> <span class="operator">=</span> str1.charAt(index);</span><br><span class="line">                    <span class="type">char</span> <span class="variable">s2</span> <span class="operator">=</span> str2.charAt(index);</span><br><span class="line">                    <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                        text += s1;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (text == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(text)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> text;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    index = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">while</span> (index &lt; strs.length) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (strs[index].startsWith(text)) &#123;</span><br><span class="line">                            index++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">while</span> (text.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                text = text.substring(<span class="number">0</span>, text.length() - <span class="number">1</span>);</span><br><span class="line">                                <span class="keyword">if</span> (strs[index].startsWith(text)) &#123;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(text)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> text;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> text;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-common-prefix/&quot;&gt;最长公共前缀&lt;/a&gt;编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串“”。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>13.罗马数字转整数</title>
    <link href="https://lyblog2022.github.io/2022/07/16/leetcode/easy/question13/"/>
    <id>https://lyblog2022.github.io/2022/07/16/leetcode/easy/question13/</id>
    <published>2022-07-16T05:36:08.000Z</published>
    <updated>2022-07-16T06:27:37.371Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a>难度简单1965收藏分享切换为英文接收动态反馈</p><span id="more"></span><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/16 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().romanToInt(<span class="string">&quot;DCXXI&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//数据初始化</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;V&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;X&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">&quot;C&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;D&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;M&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        map.put(<span class="string">&quot;IV&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;IX&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">&quot;XL&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        map.put(<span class="string">&quot;XC&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CD&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CM&quot;</span>, <span class="number">900</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; s.length()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Character</span> <span class="variable">s1</span> <span class="operator">=</span> s.charAt(index);</span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> s1.toString();</span><br><span class="line">                <span class="comment">//组合字符处理</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="string">&quot;I&quot;</span>.equals(text) || <span class="string">&quot;X&quot;</span>.equals(text) || <span class="string">&quot;C&quot;</span>.equals(text)) &amp;&amp; index &lt; (s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                    text += s.charAt(++index);</span><br><span class="line">                    <span class="comment">//组合字符取值</span></span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(text)) &#123;</span><br><span class="line">                        num += map.get(text);</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//单个字符取值</span></span><br><span class="line">                        text = text.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                        num += map.get(text);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    num += map.get(text);</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                result += num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/roman-to-integer/&quot;&gt;罗马数字转整数&lt;/a&gt;难度简单1965收藏分享切换为英文接收动态反馈&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>平衡树及红黑树</title>
    <link href="https://lyblog2022.github.io/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>https://lyblog2022.github.io/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2022-07-11T09:38:25.000Z</published>
    <updated>2022-07-11T09:39:55.476Z</updated>
    
    <content type="html"><![CDATA[<p>平衡树及红黑树</p> <span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;平衡树及红黑树&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="红黑树" scheme="https://lyblog2022.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="平衡树" scheme="https://lyblog2022.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ初步学习</title>
    <link href="https://lyblog2022.github.io/2022/06/26/study/rabbitMq/rabbitMQ1/"/>
    <id>https://lyblog2022.github.io/2022/06/26/study/rabbitMq/rabbitMQ1/</id>
    <published>2022-06-26T02:17:45.000Z</published>
    <updated>2022-06-26T04:55:21.021Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ学习及简单原理简介</p><span id="more"></span><h3 id="1、AMQP"><a href="#1、AMQP" class="headerlink" title="1、AMQP"></a>1、AMQP</h3><h4 id="1-1-AMQP"><a href="#1-1-AMQP" class="headerlink" title="1.1 AMQP"></a>1.1 AMQP</h4><p>​<code>AMQP</code>(<code>Advanced Message Queuing Protocol</code>，高级消息队列协议)是进程之间传递异步消息的网络协议。</p><h4 id="1-2-AMQP工作过程"><a href="#1-2-AMQP工作过程" class="headerlink" title="1.2 AMQP工作过程"></a>1.2 AMQP工作过程</h4><p>​发布者(Publisher)发布消息(Message)，经过交换机(Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列(Queue)，最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。</p><img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq1.png" class="" title="mq1 image"><h4 id="1-3-队列"><a href="#1-3-队列" class="headerlink" title="1.3 队列"></a>1.3 队列</h4><p>​队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。</p><p>​MQ（消息队列）很多功能都是基于此队列结构实现的</p><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq2.png" class="" title="mq2 image"></p><h3 id="2、RabbitMQ"><a href="#2、RabbitMQ" class="headerlink" title="2、RabbitMQ"></a>2、RabbitMQ</h3><h4 id="2-1-RabbitMQ介绍"><a href="#2-1-RabbitMQ介绍" class="headerlink" title="2.1 RabbitMQ介绍"></a>2.1 RabbitMQ介绍</h4><p>​RabbitMQ是由Erlang语言编写的基于AMQP的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。</p><h5 id="2-1-1-解决应用耦合"><a href="#2-1-1-解决应用耦合" class="headerlink" title="2.1.1 解决应用耦合"></a>2.1.1 解决应用耦合</h5><p>​不使用MQ时</p><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq3.png" class="" title="mq3 image"></p><p>​使用MQ解决耦合</p><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq4.png" class="" title="mq4 image"></p><h4 id="2-2-RabbitMQ适用场景"><a href="#2-2-RabbitMQ适用场景" class="headerlink" title="2.2 RabbitMQ适用场景"></a>2.2 RabbitMQ适用场景</h4><ul><li>排队算法 : 使用消息队列特性</li><li>秒杀活动 : 使用消息队列特性</li><li>消息分发 : 使用消息异步特性</li><li>异步处理 : 使用消息异步特性</li><li>数据同步 : 使用消息异步特性</li><li>处理耗时任务 : 使用消息异步特性</li><li>流量销峰</li></ul><h3 id="3、RabbitMQ原理"><a href="#3、RabbitMQ原理" class="headerlink" title="3、RabbitMQ原理"></a>3、RabbitMQ原理</h3><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq5.png" class="" title="mq5 image"></p><ol><li><strong>Message</strong>：消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出消息可能持久性存储)等。</li><li><strong>Publisher</strong>：消息的生产者。也是一个向交换器发布消息的客户端应用程序。</li><li><strong>Consumer</strong>：消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。</li><li><strong>Exchange</strong>：交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型1. direct(发布与订阅 完全匹配)2. fanout(广播)3. topic(主题，规则匹配)</li><li><strong>Binding</strong>：绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li><li><strong>Queue</strong>：消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。</li><li><strong>Routing-key</strong>：路由键。RabbitMQ决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是key，队列是value）队列通过路由键绑定到交换器。消息发送到MQ服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞</li><li><strong>Connection</strong>：链接。指rabbit服务器和服务建立的TCP链接。</li><li><strong>Channel</strong>：信道。<ol><li>Channel中文叫做信道，是TCP里面的虚拟链接。例如：电缆相当于TCP，信道是一个独立光纤束，一条TCP连接上创建多条信道是没有问题的。</li><li>TCP一旦打开，就会创建AMQP信道</li><li>无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。</li></ol></li><li><strong>Virtual Host</strong>：虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是**&#x2F;**</li><li><strong>Borker</strong>：表示消息队列服务器实体。</li><li><strong>交换器和队列的关系</strong>：交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。</li><li><strong>RabbitMQ为什么需要信道？为什么不是TCP直接通信？</strong><ol><li>TCP的创建和销毁开销特别大。创建需要3次握手，销毁需要4次分手</li><li>如果不用信道，那应用程序就会以TCP链接Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理TCP链接数也是有限制的，必定造成性能瓶颈</li><li>信道的原理是一条线程一条通道，多条线程多条通道同用一条TCP链接。一条TCP链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。</li></ol></li></ol><h3 id="4、交换器（交换机）"><a href="#4、交换器（交换机）" class="headerlink" title="4、交换器（交换机）"></a>4、交换器（交换机）</h3><p>​交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在RabbitMQ中支持四种交换器</p><ol><li>Direct Exchange：直连交换器（默认）</li><li>Fanout Exchange：扇形交换器</li><li>Topic Exchange：主题交换器</li><li>Header Exchange：首部交换器。</li></ol><p>​在RabbitMq的Web管理界面中Exchanges选项卡就可以看见这四个交换器。</p><img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq6.png" class="" title="mq6 image"><h4 id="4-1-direct交换器"><a href="#4-1-direct交换器" class="headerlink" title="4.1 direct交换器"></a>4.1 direct交换器</h4><p>​direct交换器是RabbitMQ默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。</p><p>​代码实现</p><h5 id="4-1-1-添加依赖"><a href="#4-1-1-添加依赖" class="headerlink" title="4.1.1 添加依赖"></a>4.1.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-编写配置文件"><a href="#4-1-2-编写配置文件" class="headerlink" title="4.1.2 编写配置文件"></a>4.1.2 编写配置文件</h5><p>​新建application.yml.</p><p>​host:默认值localhost</p><p>​username默认值：guest</p><p>​password默认值：guest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.133</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ly</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">qwq</span></span><br></pre></td></tr></table></figure><h5 id="4-1-3-配置类"><a href="#4-1-3-配置类" class="headerlink" title="4.1.3 配置类"></a>4.1.3 配置类</h5><p>​队列的创建只有没有这个队列的时候需要编写。以后没有这个queue()方法也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitwqConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.rabbitmq.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/26 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitwqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">protected</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myQueue&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-4-编写测试类"><a href="#4-1-4-编写测试类" class="headerlink" title="4.1.4 编写测试类"></a>4.1.4 编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RabbitmqApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * provider</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;myQueue&quot;</span>,<span class="string">&quot;send text312312&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-5-创建consumer"><a href="#4-1-5-创建consumer" class="headerlink" title="4.1.5 创建consumer"></a>4.1.5 创建consumer</h5><p>pom文件，yml文件，config文件与provider相同</p><h5 id="4-1-6-编写监听器"><a href="#4-1-6-编写监听器" class="headerlink" title="4.1.6 编写监听器"></a>4.1.6 编写监听器</h5><p>​注意：</p><p>​类上要有@Componet，项目启动时此类生效。</p><p>​@RabbitListener 监听指定队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq.receive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReceiveDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.rabbitmq.receive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/26 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的消息：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的消息22222222：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-fanout交换器"><a href="#4-2-fanout交换器" class="headerlink" title="4.2 fanout交换器"></a>4.2 fanout交换器</h4><p>​扇形交换器，实际上做的事情就是广播，fanout会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个Consumer能收到消息。</p><p>​代码示例</p><p>pom文件、yml文件与direct示例相同</p><h5 id="4-2-1-修改配置类"><a href="#4-2-1-修改配置类" class="headerlink" title="4.2.1 修改配置类"></a>4.2.1 修改配置类</h5><p>在config配置文件内添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">createQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myfanout1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">createQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myfanout2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">getFanout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;amq.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(Queue createQueue1,FanoutExchange getFanout)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(createQueue1).to(getFanout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding2</span><span class="params">(Queue createQueue2,FanoutExchange getFanout)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(createQueue2).to(getFanout);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-编写发送方法"><a href="#4-2-2-编写发送方法" class="headerlink" title="4.2.2 编写发送方法"></a>4.2.2 编写发送方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">contextLoads2</span><span class="params">()</span> &#123;</span><br><span class="line">       amqpTemplate.convertAndSend(<span class="string">&quot;amq.fanout&quot;</span>,<span class="string">&quot;core&quot;</span>,<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-consumer"><a href="#4-2-3-consumer" class="headerlink" title="4.2.3 consumer"></a>4.2.3 consumer</h4><p>在receiveDemo下添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;myfanout1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;myfanout1:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myfanout2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo4</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;myfanout2:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-topic交换器"><a href="#4-3-topic交换器" class="headerlink" title="4.3 topic交换器"></a>4.3 topic交换器</h4><p>​允许在路由键（RoutingKey）中出现匹配规则。</p><p>​路由键的写法和包写法相同。com.xxxx.xxx格式。</p><p>​在绑定时可以带有下面特殊符号，中间可以出现:</p><p>​* : 代表一个单词（两个.之间内容）</p><p>​# : 0个或多个字符</p><p>​接收方依然是公平调度，同一个队列中内容轮换获取值。</p><p>​示例代码</p><p>pom，yml文件与以上相同</p><h5 id="4-3-1-修改配置类"><a href="#4-3-1-修改配置类" class="headerlink" title="4.3.1 修改配置类"></a>4.3.1 修改配置类</h5><p>在config文件中添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">getTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;amq.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding1</span><span class="params">(Queue topicQueue1,TopicExchange getTopic)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(getTopic).with(<span class="string">&quot;com.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding2</span><span class="params">(Queue topicQueue2,TopicExchange getTopic)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2).to(getTopic).with(<span class="string">&quot;com.#&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-发送消息"><a href="#4-3-2-发送消息" class="headerlink" title="4.3.2 发送消息"></a>4.3.2 发送消息</h5><p>​第二个参数为路由键，匹配配置类中绑定时的路由规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads3</span><span class="params">()</span> &#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;amq.topic&quot;</span>,<span class="string">&quot;com.q.w&quot;</span>,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-3-Consumer"><a href="#4-3-3-Consumer" class="headerlink" title="4.3.3 Consumer"></a>4.3.3 Consumer</h5><p>​在receiveDemo下添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo5</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;topic1:&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@RabbitListener(queues = &quot;topic2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo6</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;topic2:&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ学习及简单原理简介&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/tags/RabbitMQ/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ安装</title>
    <link href="https://lyblog2022.github.io/2022/06/25/software/rabbitMq/"/>
    <id>https://lyblog2022.github.io/2022/06/25/software/rabbitMq/</id>
    <published>2022-06-25T05:16:19.000Z</published>
    <updated>2022-06-25T06:13:32.255Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装RabbitMQ</p><span id="more"></span><h4 id="1、Erlang安装"><a href="#1、Erlang安装" class="headerlink" title="1、Erlang安装"></a>1、Erlang安装</h4><p>​RabbitMQ是使用Erlang语言编写的，所以需要先配置Erlang</p><h5 id="1-1-修改主机名"><a href="#1-1-修改主机名" class="headerlink" title="1.1 修改主机名"></a>1.1 修改主机名</h5><p>​RabbitMQ是通过主机名进行访问的，必须指定能访问的主机名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NETWORKING</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">HOSTNAME</span>=<span class="string">ly</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>​新添加了一行，前面为服务器ip，空格后面添加计算机主机名</p><img src="/2022/06/25/software/rabbitMq/mq1.png" class="" title="mq1 image"><h4 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2 安装依赖"></a>1.2 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel</span><br></pre></td></tr></table></figure><h4 id="1-3-上传并解压"><a href="#1-3-上传并解压" class="headerlink" title="1.3 上传并解压"></a>1.3 上传并解压</h4><p>​上传otp_src_22.0.tar.gz到&#x2F;usr&#x2F;local&#x2F;tmp目录中，进入目录并解压</p><p>​解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar xf otp_src_22.0.tar.gz</span><br></pre></td></tr></table></figure><h4 id="1-4-配置参数"><a href="#1-4-配置参数" class="headerlink" title="1.4 配置参数"></a>1.4 配置参数</h4><p>​先新建&#x2F;usr&#x2F;local&#x2F;erlang文件夹，作为安装文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/erlang</span><br></pre></td></tr></table></figure><p>​进入文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd otp_src_22.0</span><br></pre></td></tr></table></figure><p>​配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac</span><br></pre></td></tr></table></figure><h4 id="1-5-编译并安装"><a href="#1-5-编译并安装" class="headerlink" title="1.5 编译并安装"></a>1.5 编译并安装</h4><p>​编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>​安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="1-6-修改环境变量"><a href="#1-6-修改环境变量" class="headerlink" title="1.6 修改环境变量"></a>1.6 修改环境变量</h4><p>​修改&#x2F;etc&#x2F;profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>​在文件中添加下面代码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:/usr/local/erlang/bin</span></span><br></pre></td></tr></table></figure><p>​运行文件，让修改内容生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="1-7-查看配置是否成功"><a href="#1-7-查看配置是否成功" class="headerlink" title="1.7 查看配置是否成功"></a>1.7 查看配置是否成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -version</span><br></pre></td></tr></table></figure><img src="/2022/06/25/software/rabbitMq/mq2.png" class="" title="mq2 image"><h3 id="2、安装RabbitMQ"><a href="#2、安装RabbitMQ" class="headerlink" title="2、安装RabbitMQ"></a>2、安装RabbitMQ</h3><h4 id="2-1-上传并解压"><a href="#2-1-上传并解压" class="headerlink" title="2.1 上传并解压"></a>2.1 上传并解压</h4><p>​上传rabbitmq-server-generic-unix-3.7.18.tar.xz到&#x2F;usr&#x2F;loca&#x2F;tmp中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz</span><br></pre></td></tr></table></figure><h4 id="2-2-复制到local下"><a href="#2-2-复制到local下" class="headerlink" title="2.2 复制到local下"></a>2.2 复制到local下</h4><p>​复制解压文件到&#x2F;usr&#x2F;local下，命名为rabbitmq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq</span><br></pre></td></tr></table></figure><h4 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3 配置环境变量"></a>2.3 配置环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>​在文件中添加 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:/usr/local/rabbitmq/sbin</span></span><br></pre></td></tr></table></figure><p>​解析文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="2-4-开启web管理插件"><a href="#2-4-开启web管理插件" class="headerlink" title="2.4 开启web管理插件"></a>2.4 开启web管理插件</h4><p>​进入rabbitmq&#x2F;sbin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/rabbitmq/sbin</span><br></pre></td></tr></table></figure><p>​查看插件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p>​生效管理插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><h4 id="2-5-后台运行"><a href="#2-5-后台运行" class="headerlink" title="2.5 后台运行"></a>2.5 后台运行</h4><p>​启动rabbitmq。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>​停止命令，如果无法停止，使用kill -9 进程号进行关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><h4 id="2-6-查看web管理界面"><a href="#2-6-查看web管理界面" class="headerlink" title="2.6 查看web管理界面"></a>2.6 查看web管理界面</h4><p>​默认可以在安装rabbitmq的电脑上通过用户名：guest密码guest进行访问web管理界面</p><p>​端口号：15672（放行端口，或关闭防火墙）</p><p>​在虚拟机浏览器中输入：<a href="http://localhost:15672/#/">http://localhost:15672/#/</a></p><img src="/2022/06/25/software/rabbitMq/mq3.png" class="" title="mq3 image"><h3 id="3、RabbitMq账户管理"><a href="#3、RabbitMq账户管理" class="headerlink" title="3、RabbitMq账户管理"></a>3、RabbitMq账户管理</h3><h4 id="3-1-创建账户"><a href="#3-1-创建账户" class="headerlink" title="3.1 创建账户"></a>3.1 创建账户</h4><p>​语法：.&#x2F;rabbitmqctl add_user username password</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/rabbitmq/sbin</span><br><span class="line">./rabbitmqctl add_user ly qwq</span><br></pre></td></tr></table></figure><h4 id="3-2-给用户授予管理员角色"><a href="#3-2-给用户授予管理员角色" class="headerlink" title="3.2 给用户授予管理员角色"></a>3.2 给用户授予管理员角色</h4><p>​其中ly为新建用户的用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmqctl set_user_tags ly administrator</span><br></pre></td></tr></table></figure><h4 id="3-3-给用户授权"><a href="#3-3-给用户授权" class="headerlink" title="3.3 给用户授权"></a>3.3 给用户授权</h4><p>​“&#x2F;” 表示虚拟机</p><p>​ly 表示用户名</p><p>​“.<em>“ “.</em>“ “.*” 表示完整权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmqctl set_permissions -p &quot;/&quot; ly &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h4 id="3-4-登录"><a href="#3-4-登录" class="headerlink" title="3.4 登录"></a>3.4 登录</h4><p>​使用新建账户和密码在windows中访问rabbitmq并登录</p><p>​在浏览器地址栏输入：<a href="http://192.168.213.133:15672/#/">http://192.168.213.133:15672/#/</a></p><p>​用户名：ly</p><p>​密码：qwq</p><img src="/2022/06/25/software/rabbitMq/mq4.png" class="" title="mq4 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装RabbitMQ&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/categories/CentOs-8/RabbitMQ/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/CentOs-8/RabbitMQ/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合redis</title>
    <link href="https://lyblog2022.github.io/2022/06/25/study/redis/redis4/"/>
    <id>https://lyblog2022.github.io/2022/06/25/study/redis/redis4/</id>
    <published>2022-06-25T04:54:39.000Z</published>
    <updated>2022-06-25T08:43:02.144Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot整合SpringDataRedis操作redis</p><span id="more"></span><p>​Spring Data是Spring公司的顶级项目，里面包含了N多个二级子项目，这些子项目都是相对独立的项目。每个子项目是对不同API的封装。</p><p>​所有Spring Boot整合Spring Data xxxx的启动器都叫做spring-boot-starter-data-xxxx</p><p>​Spring Data 好处很方便操作对象类型。</p><p>​把Redis不同值得类型放到一个opsForXXX方法中。</p><ul><li>opsForValue : String值</li><li>opsForList : 列表List</li><li>opsForHash: 哈希表Hash</li><li>opsForZSet: 有序集合Sorted Set</li><li>opsForSet : 集合</li></ul><h4 id="1、SpringBoot整合Redis"><a href="#1、SpringBoot整合Redis" class="headerlink" title="1、SpringBoot整合Redis"></a>1、SpringBoot整合Redis</h4><h5 id="1-1-创建mysql数据库"><a href="#1-1-创建mysql数据库" class="headerlink" title="1.1 创建mysql数据库"></a>1.1 创建mysql数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80029</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : study</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80029</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 25/06/2022 16:23:52</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for product</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `product`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `product`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="1-2-创建-redis配置文件"><a href="#1-2-创建-redis配置文件" class="headerlink" title="1.2 创建 redis配置文件"></a>1.2 创建 redis配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RedisConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 16:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String ,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;String , Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String , Object&gt;();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(Object.class));</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-创建pojo"><a href="#1-3-创建pojo" class="headerlink" title="1.3 创建pojo"></a>1.3 创建pojo</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.pojo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-创建mapper及配置文件"><a href="#1-4-创建mapper及配置文件" class="headerlink" title="1.4 创建mapper及配置文件"></a>1.4 创建mapper及配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pojo.Product&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select id, name, price</span><br><span class="line">        from product</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-创建service接口及实现类"><a href="#1-5-创建service接口及实现类" class="headerlink" title="1.5 创建service接口及实现类"></a>1.5 创建service接口及实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductById</span><span class="params">(Integer id)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductServiceImpl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;product:&quot;</span> +id;</span><br><span class="line">        <span class="comment">//先从redis中获取数据</span></span><br><span class="line">        <span class="keyword">if</span>(redisTemplate.hasKey(key))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行缓存&quot;</span>);</span><br><span class="line">            redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Product&gt;(Product.class));</span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> (Product) redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行mysql&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findProductById(id);</span><br><span class="line">        redisTemplate.opsForValue().set(key, product);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-6-创建控制类"><a href="#1-6-创建控制类" class="headerlink" title="1.6 创建控制类"></a>1.6 创建控制类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">select</span><span class="params">(Integer id , Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findProductById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;product&quot;</span> , product);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-7-创建启动器"><a href="#1-7-创建启动器" class="headerlink" title="1.7 创建启动器"></a>1.7 创建启动器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductApplication</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProductApplication.class , args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-创建配置文件"><a href="#1-8-创建配置文件" class="headerlink" title="1.8 创建配置文件"></a>1.8 创建配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">liuyong</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.133</span><span class="string">:7001,192.168.213.133:7002,192.168.213.133:7003,192.168.213.133:7004,192.168.213.133:7005,192.168.213.133:7006</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/mapper/*.xml</span></span><br></pre></td></tr></table></figure><h5 id="1-9-创建视图"><a href="#1-9-创建视图" class="headerlink" title="1.9 创建视图"></a>1.9 创建视图</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.price&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-10-运行"><a href="#1-10-运行" class="headerlink" title="1.10 运行"></a>1.10 运行</h5><p>​第一次运行</p><img src="/2022/06/25/study/redis/redis4/redis1.png" class="" title="redis1 image"><p>​第二次运行</p><img src="/2022/06/25/study/redis/redis4/redis2.png" class="" title="redis2 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringBoot整合SpringDataRedis操作redis&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="springboot" scheme="https://lyblog2022.github.io/tags/springboot/"/>
    
    <category term="centos8" scheme="https://lyblog2022.github.io/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>redis哨兵及集群</title>
    <link href="https://lyblog2022.github.io/2022/06/23/study/redis/redis3/"/>
    <id>https://lyblog2022.github.io/2022/06/23/study/redis/redis3/</id>
    <published>2022-06-23T12:15:01.000Z</published>
    <updated>2022-06-25T08:42:51.496Z</updated>
    
    <content type="html"><![CDATA[<p>redis哨兵及集群配置及学习</p><span id="more"></span><h3 id="1、哨兵（Sentinel）"><a href="#1、哨兵（Sentinel）" class="headerlink" title="1、哨兵（Sentinel）"></a>1、哨兵（Sentinel）</h3><p>​在redis主从默认是只有主具备写的能力，而从只能读。如果主宕机，整个节点不具备写能力。但是如果这是让一个从变成主，整个节点就可以继续工作。即使之前的主恢复过来也当做这个节点的从即可。</p><p>​Redis的哨兵就是帮助监控整个节点的，当节点主宕机等情况下，帮助重新选取主。</p><p>​Redis中哨兵支持单哨兵和多哨兵。单哨兵是只要这个哨兵发现master宕机了，就直接选取另一个master。而多哨兵是根据我们设定，达到一定数量哨兵认为master宕机后才会进行重新选取主。</p><h4 id="1-1-没有哨兵下主从效果"><a href="#1-1-没有哨兵下主从效果" class="headerlink" title="1.1 没有哨兵下主从效果"></a>1.1 没有哨兵下主从效果</h4><p>​只要杀掉主，整个节点无法在写数据，从身份不会变化，主的信息还是以前的信息。</p><h4 id="1-2-搭建多哨兵"><a href="#1-2-搭建多哨兵" class="headerlink" title="1.2 搭建多哨兵"></a>1.2 搭建多哨兵</h4><p>​前提：安装了单机的redis</p><h5 id="1-2-1-新建目录"><a href="#1-2-1-新建目录" class="headerlink" title="1.2.1 新建目录"></a>1.2.1 新建目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/sentinel</span><br></pre></td></tr></table></figure><h5 id="1-2-2-复制redis"><a href="#1-2-2-复制redis" class="headerlink" title="1.2.2 复制redis"></a>1.2.2 复制redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/local/redis/bin/* /usr/local/sentinel</span><br></pre></td></tr></table></figure><h5 id="1-2-3-复制配置文件"><a href="#1-2-3-复制配置文件" class="headerlink" title="1.2.3 复制配置文件"></a>1.2.3 复制配置文件</h5><p>​从redis解压目录中复制sentinel配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp/redis-5.0.5/</span><br><span class="line">cp sentinel.conf /usr/local/sentinel/</span><br></pre></td></tr></table></figure><h5 id="1-2-4-修改配置文件"><a href="#1-2-4-修改配置文件" class="headerlink" title="1.2.4 修改配置文件"></a>1.2.4 修改配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/sentinel</span><br><span class="line">vim sentinel.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">“/usr/local/sentinel/26379.log”</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.93.10 6379 2</span></span><br></pre></td></tr></table></figure><p>​复制sentinel.conf，命名为sentinel-26380.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp sentinel.conf sentinel-26380.conf</span><br><span class="line">vim sentinel-26380.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26380</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">“/usr/local/sentinel/26380.log”</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.93.10 6379 2</span></span><br></pre></td></tr></table></figure><p>​复制sentinel.conf，命名为sentinel-26381.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp sentinel.conf sentinel-26381.conf</span><br><span class="line">vim sentinel-26381.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26381</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">“/usr/local/sentinel/26381.log”</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.93.10 6379 2</span></span><br></pre></td></tr></table></figure><h5 id="1-2-5-启动主从"><a href="#1-2-5-启动主从" class="headerlink" title="1.2.5 启动主从"></a>1.2.5 启动主从</h5><p>​如果已经启动状态，忽略下面命令。如果启动部分，全部kill后重新启动。</p><p>​使用kill杀死全部redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><p>​启动redis主从</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis1.png" class="" title="redis1 image"><h5 id="1-2-6-启动三个哨兵"><a href="#1-2-6-启动三个哨兵" class="headerlink" title="1.2.6 启动三个哨兵"></a>1.2.6 启动三个哨兵</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/sentinel</span><br><span class="line">./redis-sentinel sentinel.conf</span><br><span class="line">./redis-sentinel sentinel-26380.conf</span><br><span class="line">./redis-sentinel sentinel-26381.conf</span><br></pre></td></tr></table></figure><h5 id="1-2-7-查看日志"><a href="#1-2-7-查看日志" class="headerlink" title="1.2.7 查看日志"></a>1.2.7 查看日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 26379.log</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis2.png" class="" title="redis2 image"><h6 id="1-2-8-测试宕机"><a href="#1-2-8-测试宕机" class="headerlink" title="1.2.8 测试宕机"></a>1.2.8 测试宕机</h6><p>​查看redis进程号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure><p>​杀死主进程号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><p>​查看日志，短暂延迟后会发现，出现新的主。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 26379.log</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis3.png" class="" title="redis3 image"><h3 id="2、集群（Cluster）"><a href="#2、集群（Cluster）" class="headerlink" title="2、集群（Cluster）"></a>2、集群（Cluster）</h3><p>​前提：已经安装好redis单机版。</p><p>​当集群中超过或等于1&#x2F;2节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。</p><h4 id="2-1-复制redis配置文件"><a href="#2-1-复制redis配置文件" class="headerlink" title="2.1 复制redis配置文件"></a>2.1 复制redis配置文件</h4><p>​从&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin下把redis.conf复制到当前目录中，命名为redis-7001.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf</span><br></pre></td></tr></table></figure><h4 id="2-2-修改redis-7001-conf"><a href="#2-2-修改redis-7001-conf" class="headerlink" title="2.2 修改redis-7001.conf"></a>2.2 修改redis-7001.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis/bin</span><br><span class="line">vim redis-7001.conf</span><br></pre></td></tr></table></figure><p>​需要修改如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">7001</span></span><br><span class="line"><span class="attr">cluster-enabled</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">cluster-config-file</span> <span class="string">nodes-7001.conf</span></span><br><span class="line"><span class="attr">cluster-node-timeout</span> <span class="string">15000</span></span><br><span class="line"><span class="comment"># appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_7001.pid</span></span><br></pre></td></tr></table></figure><h4 id="2-3-复制配置文件，并修改内容"><a href="#2-3-复制配置文件，并修改内容" class="headerlink" title="2.3 复制配置文件，并修改内容"></a>2.3 复制配置文件，并修改内容</h4><p>​把redis-7001.conf 复制5份，分别叫做redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp redis-7001.conf redis-7002.conf</span><br><span class="line">cp redis-7001.conf redis-7003.conf</span><br><span class="line">cp redis-7001.conf redis-7004.conf</span><br><span class="line">cp redis-7001.conf redis-7005.conf</span><br><span class="line">cp redis-7001.conf redis-7006.conf</span><br></pre></td></tr></table></figure><p>​新复制的5个配置文件都需要需改三处。</p><p>​例如nodes-7002.conf中需要把所有7001都换成7002。</p><p>​可以使用 :%s&#x2F;7001&#x2F;7002&#x2F;g 进行全局修改。 </p><h4 id="2-4-启动6个redis"><a href="#2-4-启动6个redis" class="headerlink" title="2.4 启动6个redis"></a>2.4 启动6个redis</h4><p>​可以使用redis-server结合6个配置文件进行启动6个实例。</p><p>​执行之前一定要先删除dump.rdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f dump.rdb</span><br><span class="line">vim startup.sh</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7001.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7002.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7003.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7004.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7005.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7006.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x startup.sh</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis4.png" class="" title="redis4 image"><h4 id="2-5-查看启动状态"><a href="#2-5-查看启动状态" class="headerlink" title="2.5 查看启动状态"></a>2.5 查看启动状态</h4><h4 id="2-6-建立集群"><a href="#2-6-建立集群" class="headerlink" title="2.6 建立集群"></a>2.6 建立集群</h4><p>​在redis3的时候需要借助ruby脚本实现集群。在redis5中可以使用自带的redis-cli实现集群功能，比redis3的时候更加方便了。</p><p>​建议配置静态ip，ip改变集群失效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli --cluster create 192.168.213.133:7001 192.168.213.133:7002 192.168.213.133:7003 192.168.213.133:7004 192.168.213.133:7005 192.168.213.133:7006 --cluster-replicas 1</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis5.png" class="" title="redis5 image"><h4 id="2-7-测试"><a href="#2-7-测试" class="headerlink" title="2.7 测试"></a>2.7 测试</h4><p>​集群测试时，千万不要忘记最后一个-c参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -p 7001 -c</span><br><span class="line">127.0.0.1:7001&gt; set age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; </span><br></pre></td></tr></table></figure><h4 id="2-8-编写关闭脚本"><a href="#2-8-编写关闭脚本" class="headerlink" title="2.8 编写关闭脚本"></a>2.8 编写关闭脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim stop.sh</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7001 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7002 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7003 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7004 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7005 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7006 shutdown</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x stop.sh</span><br><span class="line">./stop.sh</span><br></pre></td></tr></table></figure><h3 id="3、Jedis"><a href="#3、Jedis" class="headerlink" title="3、Jedis"></a>3、Jedis</h3><p>​Redis给Java语言提供了客户端API，称之为Jedis。</p><p>​Jedis API和Redis 命令几乎是一样的。</p><p>​例如：Redis对String值新增时set命令，Jedis中也是set方法。</p><p>​Jedis API特别简单，基本上都是创建对象调用方法即可。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!--版本号可根据实际情况填写2.9.0--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-单机版"><a href="#3-1-单机版" class="headerlink" title="3.1 单机版"></a>3.1 单机版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.jedis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7001</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;text&quot;</span>,<span class="string">&quot;hello jedis&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis6.png" class="" title="redis6 image"><h4 id="3-2-带有连接池"><a href="#3-2-带有连接池" class="headerlink" title="3.2 带有连接池"></a>3.2 带有连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PoolDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.jedis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">20</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">3</span>);</span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig,<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7001</span>);</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        jedis.set(<span class="string">&quot;jedisdemo&quot;</span>,<span class="string">&quot;pool1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;jedisdemo&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-集群"><a href="#3-3-集群" class="headerlink" title="3.3 集群"></a>3.3 集群</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClusterDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.jedis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClusterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;HostAndPort&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7002</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7003</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.93.10&quot;</span>,<span class="number">7004</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.93.10&quot;</span>,<span class="number">7005</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.93.10&quot;</span>,<span class="number">7006</span>));</span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">jedisCluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(set);</span><br><span class="line">        jedisCluster.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bjmsb&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedisCluster.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: <span class="string">&quot;7002@17002&quot;</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Integer.parseInt(Integer.java:<span class="number">580</span>)</span><br><span class="line">at java.lang.Integer.valueOf(Integer.java:<span class="number">766</span>)</span><br><span class="line">at redis.clients.util.ClusterNodeInformationParser.getHostAndPortFromNodeLine(ClusterNodeInformationParser.java:<span class="number">38</span>)</span><br><span class="line">at redis.clients.util.ClusterNodeInformationParser.parse(ClusterNodeInformationParser.java:<span class="number">14</span>)</span><br><span class="line">at redis.clients.jedis.JedisClusterInfoCache.discoverClusterNodesAndSlots(JedisClusterInfoCache.java:<span class="number">43</span>)</span><br><span class="line">at redis.clients.jedis.JedisClusterConnectionHandler.initializeSlotsCache(JedisClusterConnectionHandler.java:<span class="number">52</span>)</span><br><span class="line">at redis.clients.jedis.JedisClusterConnectionHandler.&lt;init&gt;(JedisClusterConnectionHandler.java:<span class="number">37</span>)</span><br><span class="line">at redis.clients.jedis.JedisSlotBasedConnectionHandler.&lt;init&gt;(JedisSlotBasedConnectionHandler.java:<span class="number">16</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">48</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">35</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">27</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">31</span>)</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>将redis依赖调高</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;redis哨兵及集群配置及学习&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="centos8" scheme="https://lyblog2022.github.io/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>redis持久化及主从复制</title>
    <link href="https://lyblog2022.github.io/2022/06/23/study/redis/redis2/"/>
    <id>https://lyblog2022.github.io/2022/06/23/study/redis/redis2/</id>
    <published>2022-06-23T04:46:55.000Z</published>
    <updated>2022-06-25T08:51:00.174Z</updated>
    
    <content type="html"><![CDATA[<p>Redis持久化策略及主从复制</p><span id="more"></span><h4 id="1、Redis持久化策略"><a href="#1、Redis持久化策略" class="headerlink" title="1、Redis持久化策略"></a>1、Redis持久化策略</h4><p>​Redis不仅仅是一个内存型数据库，还具备持久化能力。</p><h4 id="1-1-RDB"><a href="#1-1-RDB" class="headerlink" title="1.1 RDB"></a>1.1 RDB</h4><p>​rdb模式是默认模式，可以在指定的时间间隔内生成数据快照（snapshot），默认保存到dump.rdb文件中。当redis重启后会自动加载dump.rdb文件中内容到内存中。</p><p>​用户可以使用SAVE（同步）或BGSAVE（异步）手动保存数据。</p><p>​可以设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令，可以通过save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行BGSAVE命令。</p><p>​例如：</p><p>​save 900 1<br>　　save 300 10<br>　　save 60 10000</p><p>​那么只要满足以下三个条件中的任意一个，BGSAVE命令就会被执行</p><p>　　服务器在900秒之内，对数据库进行了至少1次修改<br>　　服务器在300秒之内，对数据库进行了至少10次修改<br>　　服务器在60秒之内，对数据库进行了至少10000次修改</p><h5 id="1-1-1-优点"><a href="#1-1-1-优点" class="headerlink" title="1.1.1 优点"></a>1.1.1 优点</h5><ul><li>rdb文件是一个紧凑文件，直接使用rdb文件就可以还原数据。</li><li>数据保存会由一个子进程进行保存，不影响父进程。</li><li>恢复数据的效率要高于aof</li></ul><h5 id="1-1-2-缺点"><a href="#1-1-2-缺点" class="headerlink" title="1.1.2 缺点"></a>1.1.2 缺点</h5><ul><li>每次保存点之间导致redis不可意料的关闭，可能会丢失数据。</li><li>由于每次保存数据都需要fork()子进程，在数据量比较大时可能会比较耗费性能。</li></ul><h4 id="1-2-AOF"><a href="#1-2-AOF" class="headerlink" title="1.2 AOF"></a>1.2 AOF</h4><p>​AOF默认是关闭的，需要在配置文件中开启AOF。Redis支持AOF和RDB同时生效，如果同时存在，AOF优先级高于RDB（Redis重新启动时会使用AOF进行数据恢复）</p><p>​监听执行的命令，如果发现执行了修改数据的操作，同时直接同步到数据库文件中。</p><h5 id="1-2-1-优点"><a href="#1-2-1-优点" class="headerlink" title="1.2.1 优点"></a>1.2.1 优点</h5><p>​相对RDB数据更加安全。</p><h5 id="1-2-2-缺点"><a href="#1-2-2-缺点" class="headerlink" title="1.2.2 缺点"></a>1.2.2 缺点</h5><ul><li>相同数据集AOF要大于RDB。</li><li>相对RDB可能会慢一些。</li></ul><h5 id="1-2-3-开启办法"><a href="#1-2-3-开启办法" class="headerlink" title="1.2.3 开启办法"></a>1.2.3 开启办法</h5><p>​修改redis.conf文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># aof文件名</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、主从复制"><a href="#2、主从复制" class="headerlink" title="2、主从复制"></a>2、主从复制</h3><p>​Redis支持集群功能。为了保证单一节点可用性，redis支持主从复制功能。每个节点有N个复制品（replica），其中一个复制品是主（master），另外N-1个复制品是从（Slave），也就是说Redis支持一主多从。</p><p>​一个主可有多个从，而一个从又可以看成主，它还可以有多个从。</p><img src="/2022/06/23/study/redis/redis2/redis1.png" class="" title="redis1 image"><h4 id="2-1-主从优点"><a href="#2-1-主从优点" class="headerlink" title="2.1 主从优点"></a>2.1 主从优点</h4><ul><li>增加单一节点的健壮性，从而提升整个集群的稳定性。（Redis中当超过1&#x2F;2节点不可用时，整个集群不可用）</li><li>从节点可以对主节点数据备份，提升容灾能力。</li><li>读写分离。在redis主从中，主节点一般用作写（具备读的能力），从节点只能读，利用这个特性实现读写分离，写用主，读用从。</li></ul><h4 id="2-2-一主多从搭建"><a href="#2-2-一主多从搭建" class="headerlink" title="2.2 一主多从搭建"></a>2.2 一主多从搭建</h4><p>​在已经搭建的单机版redis基础上进行操作。</p><p>​并且关闭redis单机版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure><h5 id="2-2-1-新建目录"><a href="#2-2-1-新建目录" class="headerlink" title="2.2.1 新建目录"></a>2.2.1 新建目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/replica</span><br></pre></td></tr></table></figure><h5 id="2-2-2-复制目录"><a href="#2-2-2-复制目录" class="headerlink" title="2.2.2 复制目录"></a>2.2.2 复制目录</h5><p>把之前安装的redis单机版中bin目录复制三份，分别叫做：master、slave1、slave2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/local/redis/bin /usr/local/replica/master</span><br><span class="line">cp -r /usr/local/redis/bin /usr/local/replica/slave1</span><br><span class="line">cp -r /usr/local/redis/bin /usr/local/replica/slave2</span><br></pre></td></tr></table></figure><h5 id="2-2-3-修改从的配置文件"><a href="#2-2-3-修改从的配置文件" class="headerlink" title="2.2.3 修改从的配置文件"></a>2.2.3 修改从的配置文件</h5><p>​修改2个从的redis.conf，指定主节点ip和端口。并修改自身端口号防止和其他redis冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/replica/slave1/redis.conf</span><br></pre></td></tr></table></figure><p>​指定主节点ip和端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicaof</span> <span class="string">192.168.93.10 6379</span></span><br></pre></td></tr></table></figure><p>​修改自己端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6380</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/replica/slave2/redis.conf</span><br></pre></td></tr></table></figure><p>​指定主节点ip和端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicaof</span> <span class="string">192.168.93.10 6379</span></span><br></pre></td></tr></table></figure><p>​修改自己端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6381</span></span><br></pre></td></tr></table></figure><h5 id="2-2-4-启动三个redis实例"><a href="#2-2-4-启动三个redis实例" class="headerlink" title="2.2.4 启动三个redis实例"></a>2.2.4 启动三个redis实例</h5><p>​注意：一定要关闭单机的redis，否则端口冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica</span><br><span class="line">vim startup.sh</span><br></pre></td></tr></table></figure><p>​在文件中添加下面内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/usr/local/replica/master/</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis.conf</span></span><br><span class="line">  <span class="attr">cd</span> <span class="string">/usr/local/replica/slave1</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis.conf</span></span><br><span class="line">  <span class="attr">cd</span> <span class="string">/usr/local/replica/slave2</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis.conf</span></span><br></pre></td></tr></table></figure><p>​赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x startup.sh</span><br></pre></td></tr></table></figure><p>​开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis2.png" class="" title="redis2 image"><h5 id="2-2-5-查看启动状态"><a href="#2-2-5-查看启动状态" class="headerlink" title="2.2.5 查看启动状态"></a>2.2.5 查看启动状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis3.png" class="" title="redis3 image"><h5 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6 测试"></a>2.2.6 测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica/master/</span><br><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis4.png" class="" title="redis4 image"><p>在客户端命令行模式下，添加一条数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set demo1 &quot;ly&quot;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis5.png" class="" title="redis5 image"><p>进去slave查看数据是否同步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica/slave1</span><br><span class="line">./redis-cli -p 6380</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis6.png" class="" title="redis6 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis持久化策略及主从复制&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="centos8" scheme="https://lyblog2022.github.io/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>redis初步使用</title>
    <link href="https://lyblog2022.github.io/2022/06/22/study/redis/redis1/"/>
    <id>https://lyblog2022.github.io/2022/06/22/study/redis/redis1/</id>
    <published>2022-06-22T05:13:45.000Z</published>
    <updated>2022-06-25T08:40:46.054Z</updated>
    
    <content type="html"><![CDATA[<p>Redis初步学习及使用</p><span id="more"></span><h3 id="1、Redis简介"><a href="#1、Redis简介" class="headerlink" title="1、Redis简介"></a>1、Redis简介</h3><h4 id="1-1-NoSQL简介"><a href="#1-1-NoSQL简介" class="headerlink" title="1.1 NoSQL简介"></a>1.1 NoSQL简介</h4><p>​目前市场主流数据存储都是使用关系型数据库。每次操作关系型数据库时都是I&#x2F;O操作，I&#x2F;O操作是主要影响程序执行性能原因之一，连接数据库关闭数据库都是消耗性能的过程。尽量减少对数据库的操作，能够明显的提升程序运行效率。</p><p>​针对上面的问题，市场上就出现了各种NoSQL(Not Only SQL,不仅仅可以使用关系型数据库)数据库，它们的宣传口号：不是什么样的场景都必须使用关系型数据库，一些特定的场景使用NoSQL数据库更好。</p><p>​常见NoSQL数据库：</p><ul><li>memcached ：键值对，内存型数据库，所有数据都在内存中。</li><li>Redis：和Memcached类似，还具备持久化能力。</li><li>HBase：以列作为存储。</li><li>MongoDB：以Document做存储。</li></ul><h4 id="1-2-Redis简介"><a href="#1-2-Redis简介" class="headerlink" title="1.2 Redis简介"></a>1.2 Redis简介</h4><ul><li>Redis是以Key-Value形式进行存储的NoSQL数据库。</li><li>Redis是使用C语言进行编写的。</li><li>平时操作的数据都在内存中，效率特高，读的效率110000&#x2F;s，写81000&#x2F;s，所以多把Redis当做缓存工具使用。</li><li>Redis以solt（槽）作为数据存储单元，每个槽中可以存储N多个键值对。Redis中固定具有16384。理论上可以实现一个槽是一个Redis。每个向Redis存储数据的key都会进行crc16算法得出一个值后对16384取余就是这个key存放的solt位置。</li><li>同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</li></ul><h3 id="2、常用的五大类型"><a href="#2、常用的五大类型" class="headerlink" title="2、常用的五大类型"></a>2、常用的五大类型</h3><p>​Redis不仅仅支持简单的k&#x2F;v类型的数据，同时还提供list，set，zset，hash等数据结构的存储，它还支持数据的备份，即master-slave模式的数据备份，同样Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p><p>​Redis支持的五大数据类型包括String（字符串  用法： 键  值），Hash（哈希 类似Java中的 map  用法： 键  键值对），List（列表  用法：键 集合 不可以重复），Set（集合 用法：键 集合 可以重复），Zset（sorted set 有序集合    用法： 键  值 值）</p><h4 id="2-1-String（字符串）"><a href="#2-1-String（字符串）" class="headerlink" title="2.1 String（字符串）"></a>2.1 String（字符串）</h4><ul><li>string 是 redis 最基本的类型</li><li>可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value</li><li>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据</li><li>是 Redis 最基本的数据类型</li><li>最大能存储 512MB。</li><li>应用场景<ul><li>String是最常用的一种数据类型，普通的key&#x2F;value存储都可以归为此类，value其实不仅是String， 也可以是数字：比如想知道什么时候封锁一个IP地址(访问超过几次)。</li></ul></li></ul><h4 id="2-2-Hash（哈希）"><a href="#2-2-Hash（哈希）" class="headerlink" title="2.2 Hash（哈希）"></a>2.2 Hash（哈希）</h4><ul><li><p>Redis hash 是一个键值(key&#x3D;&gt;value)对集合。</p></li><li><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p></li><li><p>使用场景：</p><ul><li>存储、读取、修改用户属性</li><li>如我们要存储一个用户信息对象数据，包含以下信息：    用户ID，为查找的key，存储的value用户对象包含姓名name，年龄age，生日birthday 等信息，  如果用普通的key&#x2F;value结构来存储，主要有以下2种存储方式：  <ul><li>第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，<ul><li>如：set u001 “李三,18,20010101”  </li><li>这种方式的缺点是，增加了序列化&#x2F;反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。</li></ul></li><li>第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，  <ul><li>​如：mset user:001:name “李三 “user:001:age18 user:001:birthday “20010101” </li><li>虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。</li></ul></li></ul></li><li>Redis提供的Hash很好的解决了这个问题。</li></ul></li></ul><h4 id="2-3-List（列表）"><a href="#2-3-List（列表）" class="headerlink" title="2.3 List（列表）"></a>2.3 List（列表）</h4><ul><li><p>Redis 列表是简单的字符串列表，按照插入顺序排序</p></li><li><p>可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p></li><li><p>应用场景：</p><ul><li>Redis list的应用场景非常多，也是Redis最重要的数据结构之一。</li><li>Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。</li></ul></li></ul><h4 id="2-4-Set（集合）"><a href="#2-4-Set（集合）" class="headerlink" title="2.4 Set（集合）"></a>2.4 Set（集合）</h4><ul><li>Redis的Set是string类型的无序集合</li><li>使用场景<ul><li>共同好友、二度好友 </li><li>利用唯一性，可以统计访问网站的所有独立 IP</li></ul></li><li>与list区别：Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。 比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。  </li><li>Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实  </li><li>set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</li></ul><h4 id="2-5-zset-sorted-set：有序集合"><a href="#2-5-zset-sorted-set：有序集合" class="headerlink" title="2.5 zset(sorted set：有序集合)"></a>2.5 zset(sorted set：有序集合)</h4><ul><li><p>与set区别及联系：Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p></li><li><p>使用场景</p><ul><li>带有权重的元素，比如一个游戏的用户得分排行榜 </li><li>比较复杂的数据结构，一般用到的场景不算太多</li></ul></li></ul><h3 id="3、常用命令"><a href="#3、常用命令" class="headerlink" title="3、常用命令"></a>3、常用命令</h3><p><a href="https://www.redis.net.cn/order/">Redis命令手册</a></p><p><a href="http://doc.redisfans.com/">Redis命令参考</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis初步学习及使用&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>redis单机版安装</title>
    <link href="https://lyblog2022.github.io/2022/06/22/software/redis/"/>
    <id>https://lyblog2022.github.io/2022/06/22/software/redis/</id>
    <published>2022-06-22T03:16:38.000Z</published>
    <updated>2022-06-22T03:32:31.869Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装Redis单机版</p><span id="more"></span><h4 id="1、安装C语言依赖环境"><a href="#1、安装C语言依赖环境" class="headerlink" title="1、安装C语言依赖环境"></a>1、安装C语言依赖环境</h4><p>​redis使用C语言编写，所以需要安装C语言库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++ automake autoconf libtool make tcl </span><br></pre></td></tr></table></figure><h4 id="2、上传并解压"><a href="#2、上传并解压" class="headerlink" title="2、上传并解压"></a>2、上传并解压</h4><p>​把<code>redis-5.0.5.tar.gz</code>上传到<code>/usr/local/tmp</code>中</p><p>​解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar zxf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure><h4 id="3、编译并安装"><a href="#3、编译并安装" class="headerlink" title="3、编译并安装"></a>3、编译并安装</h4><p>​进入解压文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp/redis-5.0.5/</span><br></pre></td></tr></table></figure><p>​编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>​安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><h4 id="4、开启守护进程"><a href="#4、开启守护进程" class="headerlink" title="4、开启守护进程"></a>4、开启守护进程</h4><p>复制<code>/usr/local/tmp/redis-5.0.5/</code>中<code>redis.conf</code>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /usr/local/redis/bin/</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis/bin/</span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>把<code>daemonize</code>的值由<code>no</code>修改为<code>yes</code></p><img src="/2022/06/22/software/redis/redis1.png" class="" title="redis1 image"><h4 id="5、修改外部访问"><a href="#5、修改外部访问" class="headerlink" title="5、修改外部访问"></a>5、修改外部访问</h4><p>在redis5中需要修改配置文件redis.conf允许外部访问。需要修改两处。</p><p>注释掉<code>bind 127.0.0.1</code></p><img src="/2022/06/22/software/redis/redis2.png" class="" title="redis2 image"><p><code>protected-mode</code> <code>yes</code> 改成 <code>no</code></p><img src="/2022/06/22/software/redis/redis3.png" class="" title="redis3 image"><h4 id="6、启动并测试"><a href="#6、启动并测试" class="headerlink" title="6、启动并测试"></a>6、启动并测试</h4><h5 id="6-1-启动redis"><a href="#6-1-启动redis" class="headerlink" title="6.1 启动redis"></a>6.1 启动redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure><img src="/2022/06/22/software/redis/redis4.png" class="" title="redis4 image"><h5 id="6-2-启动客户端工具"><a href="#6-2-启动客户端工具" class="headerlink" title="6.2 启动客户端工具"></a>6.2 启动客户端工具</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><img src="/2022/06/22/software/redis/redis5.png" class="" title="redis5 image"><h5 id="6-3-关闭redis"><a href="#6-3-关闭redis" class="headerlink" title="6.3 关闭redis"></a>6.3 关闭redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure><img src="/2022/06/22/software/redis/redis6.png" class="" title="redis6 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装Redis单机版&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="software" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>nginx初步学习</title>
    <link href="https://lyblog2022.github.io/2022/06/21/study/nginx/nginx1/"/>
    <id>https://lyblog2022.github.io/2022/06/21/study/nginx/nginx1/</id>
    <published>2022-06-21T13:44:31.000Z</published>
    <updated>2022-06-25T08:49:37.745Z</updated>
    
    <content type="html"><![CDATA[<p>nginx简介及常用命令</p><span id="more"></span><h3 id="1、nginx简介"><a href="#1、nginx简介" class="headerlink" title="1、nginx简介"></a>1、nginx简介</h3><p>​Nginx是一个高性能的Web服务器和反向代理的软件</p><p>​Web服务器：就是运行我们web服务的容器，提供web功能，还有tomcat也提供类似的功能。</p><p>​代理是软件架构和网络设计中，非常重要的一个概念。有两种代理：正向代理和反向代理。</p><h4 id="1-1-正向代理"><a href="#1-1-正向代理" class="headerlink" title="1.1 正向代理"></a>1.1 正向代理</h4><p>​用户端设置代理服务器。</p><p>​所有的请求都由代理服务器发出，无法判断代理了多少用户端，叫正向代理</p><h4 id="1-2-反向代理"><a href="#1-2-反向代理" class="headerlink" title="1.2 反向代理"></a>1.2 反向代理</h4><p>​和正向代理相反：在服务端设置代理，所有请求，由服务端接受，然后再由代理服务器发到后方的服务器。</p><p>​这么一来，所有请求，都由一个服务器接收，无法判断代理了多少服务端。这就是反向代 理。 </p><p>​利用反向代理，就可以将请求分发到系统内部的多个节点上，从而减少每个节点的并发数。</p><p>​而这些节点在外界看来，就是一个系统，表现出唯一的ip，也就是代理服务器的IP。 </p><h4 id="1-3-发展历程"><a href="#1-3-发展历程" class="headerlink" title="1.3 发展历程"></a>1.3 发展历程</h4><p>​最初是由一个俄罗斯人（Igor Sysoev：伊戈尔 塞索耶夫）开发的。</p><p>​Nginx的第一个版本发布于 2004年，因其系统资源消耗低、运行稳定，且具有高性能的并发处理能力等特性，Nginx在互联网 企业中得到广泛应用。</p><p>​Nginx是互联网上最受欢迎的开源Web服务器之一，Netcraft公司2019年7月 的统计数据表明，Nginx为全球最繁忙网站中的25.42%提供了服务或代理。得益于近几年云计算和 微服务的快速发展，Nginx因在其中发挥了自身优势而得到广泛应用，且有望在未来占有更多的市场 份额。 </p><p>​2019年3月，著名硬件负载均衡厂商F5宣布收购Nginx，Nginx成为F5的一部分。</p><h3 id="2、nginx启动及验证"><a href="#2、nginx启动及验证" class="headerlink" title="2、nginx启动及验证"></a>2、nginx启动及验证</h3><h4 id="2-1-找到命令目录"><a href="#2-1-找到命令目录" class="headerlink" title="2.1 找到命令目录"></a>2.1 找到命令目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# pwd</span><br><span class="line">/usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><h4 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx</span><br><span class="line">ngx_http_fastdfs_set pid=13620</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13621       1  0 10:01 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root       13622   13621  0 10:01 ?        00:00:00 nginx: worker process</span><br><span class="line">root       13628    3146  0 10:01 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="2-3-启动验证"><a href="#2-3-启动验证" class="headerlink" title="2.3 启动验证"></a>2.3 启动验证</h4><img src="/2022/06/21/study/nginx/nginx1/nginx2.png" class="" title="nginx2 image"><p>本机访问：<a href="http://192.168.213.133:8888/">Welcome to nginx!</a></p><img src="/2022/06/21/study/nginx/nginx1/nginx3.png" class="" title="nginx3 image"><h4 id="2-4-关闭"><a href="#2-4-关闭" class="headerlink" title="2.4 关闭"></a>2.4 关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s quit</span><br><span class="line">ngx_http_fastdfs_set pid=13727</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13729    3146  0 10:07 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h3 id="3、nginx常用命令"><a href="#3、nginx常用命令" class="headerlink" title="3、nginx常用命令"></a>3、nginx常用命令</h3><h4 id="3-1-查看版本号"><a href="#3-1-查看版本号" class="headerlink" title="3.1 查看版本号"></a>3.1 查看版本号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/1.16.1</span><br></pre></td></tr></table></figure><h4 id="3-2-关闭nginx"><a href="#3-2-关闭nginx" class="headerlink" title="3.2 关闭nginx"></a>3.2 关闭nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s quit</span><br><span class="line">[root@192 sbin]# ./nginx -s stop</span><br><span class="line">ngx_http_fastdfs_set pid=13727</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13729    3146  0 10:07 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-3-启动Nginx命令"><a href="#3-3-启动Nginx命令" class="headerlink" title="3.3 启动Nginx命令"></a>3.3 启动Nginx命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx</span><br><span class="line">ngx_http_fastdfs_set pid=13620</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13621       1  0 10:01 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root       13622   13621  0 10:01 ?        00:00:00 nginx: worker process</span><br><span class="line">root       13628    3146  0 10:01 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-4-重新加载配置文件"><a href="#3-4-重新加载配置文件" class="headerlink" title="3.4 重新加载配置文件"></a>3.4 重新加载配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br><span class="line">ngx_http_fastdfs_set pid=13917</span><br></pre></td></tr></table></figure><h3 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h3><p>找到nginx配置文件：&#x2F;etc&#x2F;nginx</p><p>指令种类：</p><ul><li>简单指令：</li><li>块指令：</li></ul><p>全局块：就是最开始的简单指令。从配置文件开始到events</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> <span class="string">nginx;</span></span><br><span class="line"><span class="attr">worker_processes</span> <span class="string">auto;</span></span><br><span class="line"><span class="attr">error_log</span> <span class="string">/var/log/nginx/error.log notice;</span></span><br><span class="line"><span class="attr">pid</span> <span class="string">/var/run/nginx.pid;</span></span><br></pre></td></tr></table></figure><p>events块：配置服务器和用户网络连接相关的参数。</p><p>http块：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line"> <span class="attr">include</span> <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line"> <span class="attr">default_type</span> <span class="string">application/octet-stream;</span></span><br><span class="line"> <span class="attr">log_format</span> <span class="string">main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line"> <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line"> <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"> <span class="attr">access_log</span> <span class="string">/var/log/nginx/access.log main;</span></span><br><span class="line"> <span class="attr">sendfile</span> <span class="string">on;</span></span><br><span class="line"><span class="comment"> #tcp_nopush on;</span></span><br><span class="line"> <span class="attr">keepalive_timeout</span> <span class="string">65;</span></span><br><span class="line"><span class="comment"> #gzip on;</span></span><br><span class="line"> <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment"> # server块可以是 多个</span></span><br><span class="line"> <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"> <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line"><span class="comment"> # server_name 127.0.0.1;</span></span><br><span class="line"> <span class="attr">server_name</span> <span class="string">www.cpf.com;</span></span><br><span class="line"><span class="comment"> # location 块可以是 多 个</span></span><br><span class="line"> <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"> <span class="attr">proxy_pass</span> <span class="string">http://127.0.0.1:8080;</span></span><br><span class="line"> <span class="attr">&#125;</span></span><br><span class="line"> <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx简介及常用命令&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/nginx/"/>
    
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>高并发场景下的 httpClient 优化使用</title>
    <link href="https://lyblog2022.github.io/2022/06/21/summary/High-concurrency/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84httpClient%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
    <id>https://lyblog2022.github.io/2022/06/21/summary/High-concurrency/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84httpClient%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-21T01:59:25.000Z</published>
    <updated>2022-06-21T13:36:39.706Z</updated>
    
    <content type="html"><![CDATA[<p>高并发场景下的 httpClient 优化使用，参考自：<a href="https://blog.csdn.net/u010285974/article/details/85696239">仰望星空的尘埃</a></p><span id="more"></span><h4 id="1、HttpClient优化思路"><a href="#1、HttpClient优化思路" class="headerlink" title="1、HttpClient优化思路"></a>1、<code>HttpClient</code>优化思路</h4><ol><li>池化</li><li>长链接</li><li><code>httpclient</code>和<code>httpget</code>复用</li><li>合理的配置参数（最大并发请求数、各种超时时间、重试次数）</li><li>异步</li><li>源码</li></ol><h4 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h4><p>​原始的使用比较简单，即每次请求时初始化一个<code>httpclient</code>，生成一个<code>httppost</code>对象，执行，然后从返回结果中取出<code>entity</code>，保存成一个字符串，最后显示关闭<code>response</code>和<code>client</code></p><h5 id="2-1-httpclient反复创建开销"><a href="#2-1-httpclient反复创建开销" class="headerlink" title="2.1 httpclient反复创建开销"></a>2.1 <code>httpclient</code>反复创建开销</h5><p>​<code>httpclient</code>是一个线程安全的类，没有必要由每个线程在每次使用时创建，全局保留一个即可</p><h5 id="2-2-反复创建tcp连接的开销"><a href="#2-2-反复创建tcp连接的开销" class="headerlink" title="2.2 反复创建tcp连接的开销"></a>2.2 反复创建<code>tcp</code>连接的开销</h5><p>​<code>tcp</code>的三次握手四次挥手两大过程，对于高频词的请求来说，消耗过大，如果每次请求需要花费5ms用于协商过程，那么对于<code>qps</code>为100的单系统，1秒钟就要花费500ms用于握手和挥手，<code>so</code>改成<code>keep alive</code>的方式实现连接复用</p><h4 id="2-3-重复缓存entity的开销"><a href="#2-3-重复缓存entity的开销" class="headerlink" title="2.3 重复缓存entity的开销"></a>2.3 重复缓存<code>entity</code>的开销</h4><p>​一般情况下，使用了以下的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resultString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>​这里相当于额外复制了一份<code>content</code>到一个字符串内，而原本的<code>httpResponse</code>仍然保留了一份<code>content</code>，需要被<code>consume</code>掉，在高并发且<code>content</code>非常大的情况下，会消耗大量内存，并且需要显示的关闭链接</p><h4 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h4><p>按照上面的分析，主要完成三件事：</p><ul><li>单例的<code>client</code></li><li>缓存的保持链接</li><li>更好的处理返回结果</li></ul><p>提到连接缓存，很容易想到数据库连接池。<code>httpclient4</code>提供了一个<code>PoolngHttpClientConnectionManager</code>作为连接池。通过以下步骤进行优化</p><h5 id="3-1-定义一个keep-alive-strategy"><a href="#3-1-定义一个keep-alive-strategy" class="headerlink" title="3.1 定义一个keep alive strategy"></a>3.1 定义一个<code>keep alive strategy</code></h5><p>​是否使用<code>keep-alive</code>要根据业务情况来定，其并不是灵丹妙药，而且<code>keep-alive</code>和<code>time_wait/close_wait</code>之间也有不少故事</p><p>​在本业务场景下，相当于有少数固定的客户端，长时间高频次的访问服务器，启用<code>keep-alive</code>非常合适</p><p>​【注意】 <code>http</code>的<code>keep-alive</code>与<code>tcp</code>的<code>KEEPALIVE</code>不是一个东西</p><p>定义一个<code>strategy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConnectionKeepAliveStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionKeepAliveStrategy</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getKeepAliveDuration</span><span class="params">(HttpResponse response, HttpContext context)</span> &#123;</span><br><span class="line">        <span class="type">HeaderElementIterator</span> <span class="variable">iterator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicHeaderElementIterator</span>(response.headerIterator(HTTP.CONN_KEEP_ALIVE));</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">HeaderElement</span> <span class="variable">element</span> <span class="operator">=</span> iterator.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> element.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> element.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; param.equalsIgnoreCase(<span class="string">&quot;timeout&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Long.parseLong(value) * <span class="number">1000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认时长为60s</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="3-2-配置一个PoolingHttpClientConnectionManager"><a href="#3-2-配置一个PoolingHttpClientConnectionManager" class="headerlink" title="3.2 配置一个PoolingHttpClientConnectionManager"></a>3.2 配置一个<code>PoolingHttpClientConnectionManager</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PoolingHttpClientConnectionManager</span> <span class="variable">connectionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line">connectionManager.setMaxTotal(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//默认每个路由最高50并发，也可以针对每个路由设置并发数。</span></span><br><span class="line">connectionManager.setDefaultMaxPerRoute(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><h5 id="3-3-生成httpclient"><a href="#3-3-生成httpclient" class="headerlink" title="3.3 生成httpclient"></a>3.3 生成<code>httpclient</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpClientBuilder</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom();</span><br><span class="line">httpClient.setConnectionManager(connectionManager);</span><br><span class="line">httpClient.setKeepAliveStrategy(strategy);</span><br><span class="line">httpClient.setDefaultRequestConfig(RequestConfig.custom().setStaleConnectionCheckEnabled(<span class="literal">true</span>).build());</span><br></pre></td></tr></table></figure><p>【注意】：使用<code>setStaleConnectionCheckEnabled</code>方法来逐出已被关闭的链接不被推荐。更好的方式是手动启用一个线程，定时运行<code>closeExpiredConnections </code>和<code>closeIdleConnections</code>方法，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IdleConnectionMonitorThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpClientConnectionManager manager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> shutdown;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IdleConnectionMonitorThread</span><span class="params">(HttpClientConnectionManager manager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.manager = manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!shutdown)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                    wait(<span class="number">5000</span>);</span><br><span class="line">                    manager.closeExpiredConnections();</span><br><span class="line">                    manager.closeIdleConnections(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        shutdown = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-使用httpclient执行method时降低开销"><a href="#3-4-使用httpclient执行method时降低开销" class="headerlink" title="3.4 使用httpclient执行method时降低开销"></a>3.4 使用<code>httpclient</code>执行<code>method</code>时降低开销</h5><p>这里要注意的是，不要关闭<code>connection</code>。</p><p>一种可行的获取内容的方式类似于，把<code>entity</code>里的东西复制一份：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">EntityUtils.consume(response1.getEntity());</span><br></pre></td></tr></table></figure><p>但是，更推荐的方式是定义一个<code>ResponseHandler</code>，其相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(<span class="keyword">final</span> HttpHost target, <span class="keyword">final</span> HttpRequest request,</span></span><br><span class="line"><span class="params">           <span class="keyword">final</span> ResponseHandler&lt;? extends T&gt; responseHandler, <span class="keyword">final</span> HttpContext context)</span></span><br><span class="line">           <span class="keyword">throws</span> IOException, ClientProtocolException &#123;</span><br><span class="line">       Args.notNull(responseHandler, <span class="string">&quot;Response handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> execute(target, request, context);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> T result;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           result = responseHandler.handleResponse(response);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception t) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               EntityUtils.consume(entity);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception t2) &#123;</span><br><span class="line">               <span class="comment">// Log this exception. The original exception is more</span></span><br><span class="line">               <span class="comment">// important and will be thrown to the caller.</span></span><br><span class="line">               <span class="built_in">this</span>.log.warn(<span class="string">&quot;Error consuming content after an exception.&quot;</span>, t2);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (IOException) t;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(t);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Handling the response was successful. Ensure that the content has</span></span><br><span class="line">       <span class="comment">// been fully consumed.</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       EntityUtils.consume(entity);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​可以看到，如果我们使用<code>resultHandler</code>执行<code>execute</code>方法，会最终自动调用<code>consume</code>方法，而这个<code>consume</code>方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">(<span class="keyword">final</span> HttpEntity entity)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="keyword">if</span> (entity == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (entity.isStreaming()) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">instream</span> <span class="operator">=</span> entity.getContent();</span><br><span class="line">           <span class="keyword">if</span> (instream != <span class="literal">null</span>) &#123;</span><br><span class="line">               instream.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​可以看到最终它关闭了输入流。</p><h4 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h4><p>​通过以上步骤，基本就完成了一个支持高并发的<code>httpclient</code>的写法，下面是一些额外的配置和提醒：</p><h5 id="4-1-httpclient的一些超时配置"><a href="#4-1-httpclient的一些超时配置" class="headerlink" title="4.1 httpclient的一些超时配置"></a>4.1 <code>httpclient</code>的一些超时配置</h5><p>​<code>CONNECTION_TIMEOUT</code>是连接超时时间，<code>SO_TIMEOUT</code>是<code>socket</code>超时时间，这两者是不同的。连接超时时间是发起请求前的等待时间；<code>socket</code>超时时间是等待数据的超时时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicHttpParams</span>();</span><br><span class="line"><span class="comment">//设置连接超时时间</span></span><br><span class="line"><span class="comment">//设置请求超时2秒钟 根据业务调整</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">CONNECTION_TIMEOUT</span> <span class="operator">=</span> <span class="number">2</span> * <span class="number">1000</span>; </span><br><span class="line"><span class="comment">//设置等待数据超时时间2秒钟 根据业务调整</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">SO_TIMEOUT</span> <span class="operator">=</span> <span class="number">2</span> * <span class="number">1000</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义了当从ClientConnectionManager中检索ManagedClientConnection实例时使用的毫秒级的超时时间</span></span><br><span class="line"><span class="comment">//这个参数期望得到一个java.lang.Long类型的值。如果这个参数没有被设置，默认等于CONNECTION_TIMEOUT，因此一定要设置。</span></span><br><span class="line"><span class="comment">//在httpclient4.2.3中我记得它被改成了一个对象导致直接用long会报错，后来又改回来了</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">CONN_MANAGER_TIMEOUT</span> <span class="operator">=</span> <span class="number">500L</span>; </span><br><span class="line"> </span><br><span class="line">params.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, CONNECTION_TIMEOUT);</span><br><span class="line">params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT, SO_TIMEOUT);</span><br><span class="line">params.setLongParameter(ClientPNames.CONN_MANAGER_TIMEOUT, CONN_MANAGER_TIMEOUT);</span><br><span class="line"><span class="comment">//在提交请求之前 测试连接是否可用</span></span><br><span class="line">params.setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//另外设置http client的重试次数，默认是3次；当前是禁用掉（如果项目量不到，这个默认即可）</span></span><br><span class="line">httpClient.setHttpRequestRetryHandler(<span class="keyword">new</span> <span class="title class_">DefaultHttpRequestRetryHandler</span>(<span class="number">0</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><h5 id="4-2-如果配置了nginx的话，nginx也要设置面向两端的keep-alive"><a href="#4-2-如果配置了nginx的话，nginx也要设置面向两端的keep-alive" class="headerlink" title="4.2 如果配置了nginx的话，nginx也要设置面向两端的keep-alive"></a>4.2 如果配置了<code>nginx</code>的话，<code>nginx</code>也要设置面向两端的<code>keep-alive</code></h5><p>​现在的业务里，没有<code>nginx</code>的情况反而比较稀少。<code>nginx</code>默认和<code>client</code>端打开长连接而和<code>server</code>端使用短链接。注意<code>client</code>端的<code>keepalive_timeout</code>和<code>keepalive_requests</code>参数，以及<code>upstream</code>端的<code>keepalive</code>参数设置</p><p>​依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Basic认证</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CredentialsProvider</span> <span class="variable">credsProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCredentialsProvider</span>();</span><br><span class="line"><span class="comment">//httpClient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CloseableHttpClient httpclient;</span><br><span class="line"><span class="comment">//httpGet方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpGet httpget;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestConfig reqestConfig;</span><br><span class="line"><span class="comment">//响应处理器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResponseHandler&lt;String&gt; responseHandler;</span><br><span class="line"><span class="comment">//jackson解析工具</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;http.maxConnections&quot;</span>,<span class="string">&quot;50&quot;</span>);</span><br><span class="line">    System.setProperty(<span class="string">&quot;http.keepAlive&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="comment">//设置basic校验</span></span><br><span class="line">    credsProvider.setCredentials(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AuthScope</span>(AuthScope.ANY_HOST, AuthScope.ANY_PORT, AuthScope.ANY_REALM),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="comment">//创建http客户端</span></span><br><span class="line">    httpclient = HttpClients.custom()</span><br><span class="line">            .useSystemProperties()</span><br><span class="line">            .setRetryHandler(<span class="keyword">new</span> <span class="title class_">DefaultHttpRequestRetryHandler</span>(<span class="number">3</span>,<span class="literal">true</span>))</span><br><span class="line">            .setDefaultCredentialsProvider(credsProvider)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//初始化httpGet</span></span><br><span class="line">    httpget = <span class="keyword">new</span> <span class="title class_">HttpGet</span>();</span><br><span class="line">    <span class="comment">//初始化HTTP请求配置</span></span><br><span class="line">    reqestConfig = RequestConfig.custom()</span><br><span class="line">            .setContentCompressionEnabled(<span class="literal">true</span>)</span><br><span class="line">            .setSocketTimeout(<span class="number">100</span>)</span><br><span class="line">            .setAuthenticationEnabled(<span class="literal">true</span>)</span><br><span class="line">            .setConnectionRequestTimeout(<span class="number">100</span>)</span><br><span class="line">            .setConnectTimeout(<span class="number">100</span>).build();</span><br><span class="line">    httpget.setConfig(reqestConfig);</span><br><span class="line">    <span class="comment">//初始化response解析器</span></span><br><span class="line">    responseHandler = <span class="keyword">new</span> <span class="title class_">BasicResponseHandler</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：返回响应</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2019/1/3 上午11:19</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return org.apache.http.client.methods.CloseableHttpResponse</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getResponse</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">    <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(get,responseHandler);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：发送http请求，并用net.sf.json工具解析</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2018/8/15 下午2:21</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return org.json.JSONObject</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">getUrl</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpget.setURI(URI.create(url));</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget,responseHandler);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.fromObject(response);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：发送http请求，并用jackson工具解析</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2018/12/24 下午2:58</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return com.fasterxml.jackson.databind.JsonNode</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JsonNode <span class="title function_">getUrl2</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpget.setURI(URI.create(url));</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget,responseHandler);</span><br><span class="line">        <span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> mapper.readTree(response);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：发送http请求，并用fastjson工具解析</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2018/12/24 下午2:58</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return com.fasterxml.jackson.databind.JsonNode</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> com.alibaba.fastjson.JSONObject <span class="title function_">getUrl3</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpget.setURI(URI.create(url));</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget,responseHandler);</span><br><span class="line">        com.alibaba.fastjson.<span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> com.alibaba.fastjson.JSONObject.parseObject(response);</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;高并发场景下的 httpClient 优化使用，参考自：&lt;a href=&quot;https://blog.csdn.net/u010285974/article/details/85696239&quot;&gt;仰望星空的尘埃&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="那些代码那些总结" scheme="https://lyblog2022.github.io/categories/%E9%82%A3%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%82%A3%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    
    <category term="高并发" scheme="https://lyblog2022.github.io/categories/%E9%82%A3%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%82%A3%E4%BA%9B%E6%80%BB%E7%BB%93/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="httpClient" scheme="https://lyblog2022.github.io/tags/httpClient/"/>
    
    <category term="那些代码那些总结" scheme="https://lyblog2022.github.io/tags/%E9%82%A3%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%82%A3%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    
    <category term="接口调用" scheme="https://lyblog2022.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    
    <category term="高并发" scheme="https://lyblog2022.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>nginx安装</title>
    <link href="https://lyblog2022.github.io/2022/06/20/software/nginx/"/>
    <id>https://lyblog2022.github.io/2022/06/20/software/nginx/</id>
    <published>2022-06-20T08:31:29.000Z</published>
    <updated>2022-06-21T14:41:07.003Z</updated>
    
    <content type="html"><![CDATA[<p>centos8安装nginx</p><span id="more"></span><h4 id="1、上传并安装fastdfs-nginx-module"><a href="#1、上传并安装fastdfs-nginx-module" class="headerlink" title="1、上传并安装fastdfs-nginx-module"></a>1、上传并安装fastdfs-nginx-module</h4><p>​上传  &#x2F;fastdfs-nginx-model_v1.16.tar.gz  到 &#x2F;usr&#x2F;local&#x2F;tmp 中</p><p>​进入 tmp 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br></pre></td></tr></table></figure><p>​解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h4><p>​进入解压目录中src目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​编辑config文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure><p>​修改配置文件中第四行，把路径中local去掉。参数是用于配置安装nginx中的FastDFS组件的时候，在什么位置查找FastDFS核心代码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CORE_INCS</span>=<span class="string">&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3、安装nginx的依赖"><a href="#3、安装nginx的依赖" class="headerlink" title="3、安装nginx的依赖"></a>3、安装nginx的依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="4、上传Nginx-并解压"><a href="#4、上传Nginx-并解压" class="headerlink" title="4、上传Nginx 并解压"></a>4、上传Nginx 并解压</h4><p>​上传nginx-1.16.1.tar.gz 到&#x2F;usr&#x2F;local&#x2F;tmp中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar zxf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure><h4 id="5、修改Nginx配置"><a href="#5、修改Nginx配置" class="headerlink" title="5、修改Nginx配置"></a>5、修改Nginx配置</h4><h5 id="5-1-进入到Nginx文件夹"><a href="#5-1-进入到Nginx文件夹" class="headerlink" title="5.1 进入到Nginx文件夹"></a>5.1 进入到Nginx文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.16.1</span><br></pre></td></tr></table></figure><h5 id="5-2-创建临时目录"><a href="#5-2-创建临时目录" class="headerlink" title="5.2 创建临时目录"></a>5.2 创建临时目录</h5><p>​修改配置文件中好多位置都使用了&#x2F;var&#x2F;temp&#x2F;nginx目录，但是默认不会自动创建这个目录，需要手动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/temp/nginx</span><br></pre></td></tr></table></figure><h5 id="5-3-修改配置文件参数"><a href="#5-3-修改配置文件参数" class="headerlink" title="5.3 修改配置文件参数"></a>5.3 修改配置文件参数</h5><p>内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--add-module=/usr/local/tmp/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​–add-module 必须定义，此配置信息是用于指定安装Nginx时需要加载的模块，如果未指定，Nginx安装过程不会加载fastdfs-nginx-module模块，后续功能无法实现。</p><p>【报错：执行文件无权限】</p><p>先执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x configure</span><br></pre></td></tr></table></figure><p>​再继续执行后续代码</p><h4 id="6、编译并安装"><a href="#6、编译并安装" class="headerlink" title="6、编译并安装"></a>6、编译并安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="7、配置fastdfs-nginx-module模块配置文件"><a href="#7、配置fastdfs-nginx-module模块配置文件" class="headerlink" title="7、配置fastdfs-nginx-module模块配置文件"></a>7、配置fastdfs-nginx-module模块配置文件</h4><p>​复制配置文件fastdfs-nginx-module&#x2F;src&#x2F;mod_fastdfs.conf 到 &#x2F;etc&#x2F;fdfs目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/tmp/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure><h4 id="8、修改-mod-fastdfs-conf"><a href="#8、修改-mod-fastdfs-conf" class="headerlink" title="8、修改 mod_fastdfs.conf"></a>8、修改 mod_fastdfs.conf</h4><h5 id="8-1-进入到-x2F-etc-x2F-fdfs"><a href="#8-1-进入到-x2F-etc-x2F-fdfs" class="headerlink" title="8.1 进入到 &#x2F;etc&#x2F;fdfs"></a>8.1 进入到 &#x2F;etc&#x2F;fdfs</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br></pre></td></tr></table></figure><h5 id="8-2-编辑配置文件"><a href="#8-2-编辑配置文件" class="headerlink" title="8.2 编辑配置文件"></a>8.2 编辑配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mod_fastdfs.conf</span><br></pre></td></tr></table></figure><h5 id="8-3-文件内容修改"><a href="#8-3-文件内容修改" class="headerlink" title="8.3 文件内容修改"></a>8.3 文件内容修改</h5><p>​需要修改文件中四处内容， 这四处内容的含义：</p><p>​connect_timeout&#x3D;2 #连接超时时间，单位秒</p><p>​tracker_server&#x3D;tracker:22122 #tracker 服务结点</p><p>​url_have_group_name&#x3D;false #URL是否包含group名称</p><p>​store_path0&#x3D;&#x2F;home&#x2F;yuqing&#x2F;fastdfs #storage服务结点的存储位置，与配置storage结点一致</p><p>​修改为以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=10</span><br><span class="line">tracker_server=192.168.93.10:22122</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/usr/local/fastdfs/storage/store</span><br></pre></td></tr></table></figure><h4 id="9、提供FastDFS需要的HTTP配置文件"><a href="#9、提供FastDFS需要的HTTP配置文件" class="headerlink" title="9、提供FastDFS需要的HTTP配置文件"></a>9、提供FastDFS需要的HTTP配置文件</h4><p>​复制FastDFS安装包中的两个配置文件(http.conf 和 mine.types) 到 &#x2F;etc&#x2F;fdfs目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/tmp/FastDFS/conf/http.conf /etc/fdfs/</span><br><span class="line">cp /usr/local/tmp/FastDFS/conf/mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><h4 id="10、创建网络访问存储服务的软连接"><a href="#10、创建网络访问存储服务的软连接" class="headerlink" title="10、创建网络访问存储服务的软连接"></a>10、创建网络访问存储服务的软连接</h4><p>​在上传文件到FastDFS后，FastDFS会返回group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;xxxxxxxxx.xxx其中group1是卷名，在mod_fastdfs.conf配置文件中已配置了url_have_group_name， 以保证URL解析正确。其中的M00是FastDFS保存数据时使用的虚拟目录， 需要将这个虚拟目录定位到真实数据目录上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/fastdfs/storage/store/data/ /usr/local/fastdfs/storage/store/data/M00</span><br></pre></td></tr></table></figure><h4 id="11、修改nginx配置文件"><a href="#11、修改nginx配置文件" class="headerlink" title="11、修改nginx配置文件"></a>11、修改nginx配置文件</h4><h5 id="11-1-进入到安装后-nginx目录"><a href="#11-1-进入到安装后-nginx目录" class="headerlink" title="11.1 进入到安装后 nginx目录"></a>11.1 进入到安装后 nginx目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br></pre></td></tr></table></figure><h5 id="11-2-编辑配置文件"><a href="#11-2-编辑配置文件" class="headerlink" title="11.2 编辑配置文件"></a>11.2 编辑配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><h6 id="11-2-1-修改1"><a href="#11-2-1-修改1" class="headerlink" title="11.2.1 修改1"></a>11.2.1 修改1</h6><p>​user root； #Nginx需要访问linux文件系统，必须有文件系统的权限。User root代表nginx文件系统的权限是root用户权限。如果不开启权限，可能有404反问错误。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">user</span>  <span class="string">root;</span></span><br><span class="line"><span class="attr">worker_processes</span>  <span class="string">1;</span></span><br></pre></td></tr></table></figure><h5 id="11-2-2-修改2"><a href="#11-2-2-修改2" class="headerlink" title="11.2.2 修改2"></a>11.2.2 修改2</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server&#123;</span></span><br><span class="line">  <span class="attr">listen</span> <span class="string">8888; #storage 配置中， 有http.server_port=8888的配置信息，必须一致。配置文件是 /etc/fdfs/storaged.conf</span></span><br><span class="line">  <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line">  <span class="attr">location</span> <span class="string">~/group([0-9])/M00&#123;</span></span><br><span class="line">      <span class="attr">ngx_fastdfs_module;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="12、启动nginx"><a href="#12、启动nginx" class="headerlink" title="12、启动nginx"></a>12、启动nginx</h4><p>进入到nginx安装目录的sbin文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/ </span><br></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>关闭nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;centos8安装nginx&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="software" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/nginx/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS实现图片上传及下载</title>
    <link href="https://lyblog2022.github.io/2022/06/20/study/FastDFS/FastDFS-file1/"/>
    <id>https://lyblog2022.github.io/2022/06/20/study/FastDFS/FastDFS-file1/</id>
    <published>2022-06-20T05:21:29.000Z</published>
    <updated>2022-06-25T08:52:36.983Z</updated>
    
    <content type="html"><![CDATA[<p>FastDFS简介及简单实现图片上传及下载</p><span id="more"></span><h3 id="1、分布式文件系统概述"><a href="#1、分布式文件系统概述" class="headerlink" title="1、分布式文件系统概述"></a>1、分布式文件系统概述</h3><h4 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1 分类"></a>1.1 分类</h4><h5 id="1-1-1-通用分布式文件系统"><a href="#1-1-1-通用分布式文件系统" class="headerlink" title="1.1.1 通用分布式文件系统"></a>1.1.1 通用分布式文件系统</h5><p>​和传统的本地文件系统（如ext3、NTFS等）相对应。典型代表：lustre、MooseFS</p><ul><li>优点：标准文件系统操作方式，对开发者门槛较低</li><li>缺点：<ul><li>系统复杂性较高，需要支持若干标准的文件操作，如：目录结构、文件读写权限、文件锁等。复杂性更高</li><li>系统整体性能有所降低，因为要支持POSIX标准（表示<a href="https://baike.baidu.com/item/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/12718298">可移植操作系统接口</a>（Portable Operating System Interface of UNIX），POSIX标准定义了操作系统应该为应用程序提供的接口标准）</li></ul></li></ul><h5 id="1-1-2-专用分布式文件系统"><a href="#1-1-2-专用分布式文件系统" class="headerlink" title="1.1.2 专用分布式文件系统"></a>1.1.2 专用分布式文件系统</h5><p>​基于google File System的思想，文件上传后不能修改。需要使用专有API对文件进行访问，也可称作分布式文件存储服务。典型代表：MogileFS、FastDFS、TFS。</p><ul><li>优点：<ul><li>系统复杂性较低，不需要支持若干标准的文件操作，如：目录结构、文件读写权限、文件锁等，系统比较简洁。</li><li>系统整体性能较高，因为无需支持POSIX标准，可以省去支持POSIX引入的环节，系统更加高效。</li></ul></li><li>缺点：采用专有API，对开发者门槛较高（直接封装成工具类）</li></ul><h4 id="1-2-Google-FS-体系结构"><a href="#1-2-Google-FS-体系结构" class="headerlink" title="1.2  Google FS 体系结构"></a>1.2  Google FS 体系结构</h4><ul><li>两个角色：<ul><li>名字服务器（索引服务器）</li><li>存储服务器</li></ul></li><li>架构特点<ul><li>不支持文件修改功能。</li><li>文件分块存储，需要索引服务器</li><li>一个文件可以存储多份，一个文件存储到哪些存储服务器，通常采用动态分配的方式。</li></ul></li></ul><h3 id="2、FastDFS"><a href="#2、FastDFS" class="headerlink" title="2、FastDFS"></a>2、FastDFS</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><p>​FastDFS是一个轻量级的开源分布式文件系统。2008年4月份开始启动。类似google FS的一个轻量级分布式文件系统，纯C实现，支持Linux、FreeBSD、AIX等UNIX系统。</p><p>​主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡。实现了软件方式的磁盘阵列（Redundant Arrays of Independent Drives，RAID），可以使用廉价的IDE（Integrated Drive Electronics）硬盘进行存储。并且支持存储服务器在线扩容。支持相同内容的文件只保存一份，节约磁盘空间。</p><p>​FastDFS只能通过Client API访问，不支持POSIX访问方式。</p><p>​FastDFS特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）</p><h4 id="2-2-架构"><a href="#2-2-架构" class="headerlink" title="2.2 架构"></a>2.2 架构</h4><img src="/2022/06/20/study/FastDFS/FastDFS-file1/fastdfs5.png" class="" title="fastdfs5 image"><h5 id="2-2-1-角色"><a href="#2-2-1-角色" class="headerlink" title="2.2.1 角色"></a>2.2.1 角色</h5><ul><li>Client：客户端。使用java语言编写的项目属于客户端。</li><li>Tracker Server：跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。在内存中记录集群中group和storage server的状态信息，是连接Client和Storage server的枢纽。</li><li>Storage Server：存储服务器，文件和文件属性（meta data）都保存到存储服务器上</li></ul><h5 id="2-2-2-架构解读"><a href="#2-2-2-架构解读" class="headerlink" title="2.2.2 架构解读"></a>2.2.2 架构解读</h5><p>​只有两个角色，tracker server和storage server，不需要存储文件索引信息。</p><p>​所有服务器都是对等的，不存在Master-Slave关系。</p><p>​存储服务器采用分组方式，同组内存储服务器上的文件完全相同（RAID 1）。</p><p>​不同组的storage server之间不会相互通信。</p><p>​由storage server主动向tracker server报告状态信息，tracker server之间不会相互通信。</p><h3 id="1、文件上传"><a href="#1、文件上传" class="headerlink" title="1、文件上传"></a>1、文件上传</h3><h4 id="1-1-时序图"><a href="#1-1-时序图" class="headerlink" title="1.1 时序图"></a>1.1 时序图</h4><img src="/2022/06/20/study/FastDFS/FastDFS-file1/fastdfs1.png" class="" title="fastdfs1 image"><h4 id="1-2-流程说明"><a href="#1-2-流程说明" class="headerlink" title="1.2 流程说明"></a>1.2 流程说明</h4><ol><li>客户端访问Tracker</li><li>Tracker 返回Storage的ip和端口</li><li>客户端直接访问Storage，把文件内容和元数据发送过去。</li><li>Storage返回文件存储id。包含了组名和文件名</li></ol><img src="/2022/06/20/study/FastDFS/FastDFS-file1/fastdfs2.png" class="" title="fastdfs2 image"><h4 id="1-3-Fastdfs-java-client"><a href="#1-3-Fastdfs-java-client" class="headerlink" title="1.3 Fastdfs-java-client"></a>1.3 Fastdfs-java-client</h4><h5 id="1-3-1-添加依赖"><a href="#1-3-1-添加依赖" class="headerlink" title="1.3.1 添加依赖"></a>1.3.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.bestwu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> `     </span><br></pre></td></tr></table></figure><h5 id="1-3-2-编写配置文件"><a href="#1-3-2-编写配置文件" class="headerlink" title="1.3.2 编写配置文件"></a>1.3.2 编写配置文件</h5><p>​文件名：fdfs_client.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">connect_timeout</span> = <span class="string">10</span></span><br><span class="line"><span class="attr">network_timeout</span> = <span class="string">30</span></span><br><span class="line"><span class="attr">charset</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">http.tracker_http_port</span> = <span class="string">8080</span></span><br><span class="line"><span class="attr">tracker_server</span> = <span class="string">192.168.213.133:22122</span></span><br></pre></td></tr></table></figure><h5 id="1-3-3-导入工具类"><a href="#1-3-3-导入工具类" class="headerlink" title="1.3.3 导入工具类"></a>1.3.3 导入工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.ClientGlobal;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient1;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageServer;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FastDFSClient</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.util</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/19 19:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastDFSClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONF_FILENAME</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath() + <span class="string">&quot;fdfs_client.conf&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只加载一次.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientGlobal.init(CONF_FILENAME);</span><br><span class="line">            <span class="type">TrackerClient</span> <span class="variable">trackerClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>(ClientGlobal.g_tracker_group);</span><br><span class="line">            <span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> trackerClient.getConnection();</span><br><span class="line">            <span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> trackerClient.getStoreStorage(trackerServer);</span><br><span class="line">            storageClient = <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     *    上传的文件输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     *    上传的文件原始名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] uploadFile(InputStream inputStream, String fileName) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件的元数据</span></span><br><span class="line">            NameValuePair[] meta_list = <span class="keyword">new</span> <span class="title class_">NameValuePair</span>[<span class="number">2</span>];</span><br><span class="line">            <span class="comment">// 第一组元数据，文件的原始名称</span></span><br><span class="line">            meta_list[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;file name&quot;</span>, fileName);</span><br><span class="line">            <span class="comment">// 第二组元数据</span></span><br><span class="line">            meta_list[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;file length&quot;</span>, inputStream.available()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// 准备字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] file_buff = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 查看文件的长度</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.available();</span><br><span class="line">                <span class="comment">// 创建对应长度的字节数组</span></span><br><span class="line">                file_buff = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">                <span class="comment">// 将输入流中的字节内容，读到字节数组中。</span></span><br><span class="line">                inputStream.read(file_buff);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上传文件。参数含义：要上传的文件的内容（使用字节数组传递），上传的文件的类型（扩展名），元数据</span></span><br><span class="line">            String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);</span><br><span class="line">            <span class="keyword">return</span> fileids;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     *            文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     *            文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回Null则为失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] uploadFile(File file, String fileName) &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NameValuePair[] meta_list = <span class="literal">null</span>; <span class="comment">// new NameValuePair[0];</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">byte</span>[] file_buff = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fis.available();</span><br><span class="line">                file_buff = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">                fis.read(file_buff);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);</span><br><span class="line">            <span class="keyword">return</span> fileids;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据组名和远程文件名来删除一个文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     *            例如 &quot;group1&quot; 如果不指定该值，默认为group1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteFileName</span></span><br><span class="line"><span class="comment">     *            例如&quot;M00/00/00/wKgxgk5HbLvfP86RAAAAChd9X1Y736.jpg&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 0为成功，非0为失败，具体为错误代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">deleteFile</span><span class="params">(String groupName, String remoteFileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> storageClient.delete_file(groupName == <span class="literal">null</span> ? <span class="string">&quot;group1&quot;</span> : groupName, remoteFileName);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改一个已经存在的文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldGroupName</span></span><br><span class="line"><span class="comment">     *            旧的组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldFileName</span></span><br><span class="line"><span class="comment">     *            旧的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     *            新文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     *            新文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回空则为失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] modifyFile(String oldGroupName, String oldFileName, File file, String fileName) &#123;</span><br><span class="line">        String[] fileids = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先上传</span></span><br><span class="line">            fileids = uploadFile(file, fileName);</span><br><span class="line">            <span class="keyword">if</span> (fileids == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 再删除</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">delResult</span> <span class="operator">=</span> deleteFile(oldGroupName, oldFileName);</span><br><span class="line">            <span class="keyword">if</span> (delResult != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileids;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName 卷名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteFileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title function_">downloadFile</span><span class="params">(String groupName, String remoteFileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="keyword">return</span> inputStream;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NameValuePair[] getMetaDate(String groupName, String remoteFileName)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            NameValuePair[] nvp = storageClient.get_metadata(groupName, remoteFileName);</span><br><span class="line">            <span class="keyword">return</span> nvp;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件后缀名（不带点）.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如：&quot;jpg&quot; or &quot;&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getFileExt</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(fileName) || !fileName.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>); <span class="comment">// 不带最后的点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-4编写测试代码"><a href="#1-3-4编写测试代码" class="headerlink" title="1.3.4编写测试代码"></a>1.3.4编写测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\note\\source\\_posts\\software\\FastDFS\\fastdfs.png&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString()+<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">        String[] result = FastDFSClient.uploadFile(is, fileName);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/20/study/FastDFS/FastDFS-file1/fastdfs3.png" class="" title="fastdfs3 image"><h3 id="2、文件下载"><a href="#2、文件下载" class="headerlink" title="2、文件下载"></a>2、文件下载</h3><h4 id="2-1-时序图"><a href="#2-1-时序图" class="headerlink" title="2.1 时序图"></a>2.1 时序图</h4><img src="/2022/06/20/study/FastDFS/FastDFS-file1/fastdfs3.png" class="" title="fastdfs3 image"><h4 id="2-2-下载说明"><a href="#2-2-下载说明" class="headerlink" title="2.2 下载说明"></a>2.2 下载说明</h4><ol><li><p>client询问tracker下载文件的storage，参数为文件标识（组名和文件名）；</p></li><li><p>tracker返回一台可用的storage；</p></li><li><p>client直接和storage通讯完成文件下载。</p></li></ol><h4 id="2-3-测试代码"><a href="#2-3-测试代码" class="headerlink" title="2.3 测试代码"></a>2.3 测试代码</h4><p>直接使用工具方法完成下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.down;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.util.FastDFSClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.down</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/19 20:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Download</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> FastDFSClient.downloadFile(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;M00/00/00/wKjVhWKvD_iAZ0rRAACDGmk1a_U227.png&quot;</span>);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:/jqk.png&quot;</span>));</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">while</span>((index = is.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(index);</span><br><span class="line">            &#125;</span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;FastDFS简介及简单实现图片上传及下载&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="FastDFS" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/FastDFS/"/>
    
    
    <category term="FastDFS" scheme="https://lyblog2022.github.io/tags/FastDFS/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS安装</title>
    <link href="https://lyblog2022.github.io/2022/06/19/software/FastDFS/"/>
    <id>https://lyblog2022.github.io/2022/06/19/software/FastDFS/</id>
    <published>2022-06-19T06:02:05.000Z</published>
    <updated>2022-06-20T05:20:00.045Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装FastDFS</p><span id="more"></span><h4 id="1、安装FastDFS依赖"><a href="#1、安装FastDFS依赖" class="headerlink" title="1、安装FastDFS依赖"></a>1、安装FastDFS依赖</h4><p> FastDFS是C语言开发的应用。安装必须使用 make , cmake 和 gcc编译器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure><h4 id="2、上传并解压libfastcommon-master"><a href="#2、上传并解压libfastcommon-master" class="headerlink" title="2、上传并解压libfastcommon-master"></a>2、上传并解压libfastcommon-master</h4><p>上传libfastcommon-master 到 &#x2F;usr&#x2F;local&#x2F;tmp下。 libfastcommon是从FastDFS和FastDHT中提取出来的公共C函数库</p><p>解压 libfastcommon-master.zip 由于是zip文件所以要使用 unzip命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">unzip libfastcommon-master.zip</span><br></pre></td></tr></table></figure><h4 id="3、编译并安装"><a href="#3、编译并安装" class="headerlink" title="3、编译并安装"></a>3、编译并安装</h4><p>libfastcommon没有提供make命令安装文件。使用的是shell脚本执行编译和安装。shell脚本为 make.sh</p><p>进入解压后的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd libfastcommon-master</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>有固定的默认安装位置。在&#x2F;usr&#x2F;lib64 和  &#x2F;usr&#x2F;include&#x2F;fastcommon两个目录中</p><h4 id="4、创建软连接"><a href="#4、创建软连接" class="headerlink" title="4、创建软连接"></a>4、创建软连接</h4><p> 因为FastDFS 主程序设置的lib目录是 &#x2F;usr&#x2F;local&#x2F;lib， 所以需要创建软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /user/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so</span><br><span class="line">ln -s /usr/local/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so</span><br></pre></td></tr></table></figure><h4 id="5、上传并解压FastDFS主程序"><a href="#5、上传并解压FastDFS主程序" class="headerlink" title="5、上传并解压FastDFS主程序"></a>5、上传并解压FastDFS主程序</h4><p>上传 FastDFS_v5.08.tar.gz 到 &#x2F;usr&#x2F;local&#x2F;tmp下后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar zxf FastDFS_v5.08.tar.gz</span><br></pre></td></tr></table></figure><h4 id="6、编译并安装FastDFS"><a href="#6、编译并安装FastDFS" class="headerlink" title="6、编译并安装FastDFS"></a>6、编译并安装FastDFS</h4><p>进入到解压后的FastDFS文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd FastDFS</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>​安装后 FastDFS主程序所在的位置是</p><p>​&#x2F;usr&#x2F;bin  可执行文件所在的位置</p><p>​&#x2F;etc&#x2F;fdfs  配置文件所在的位置</p><p>​&#x2F;usr&#x2F;bin  主程序代码所在位置</p><p>​&#x2F;usr&#x2F;include&#x2F;fastdfs 包含一些插件组所在的位置</p><h4 id="7、配置tracker"><a href="#7、配置tracker" class="headerlink" title="7、配置tracker"></a>7、配置tracker</h4><h5 id="7-1-复制配置文件"><a href="#7-1-复制配置文件" class="headerlink" title="7.1 复制配置文件"></a>7.1 复制配置文件</h5><p>进入到 &#x2F;etc&#x2F;fdfs 中 ， 把tracker配置文件复制一份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure><h5 id="7-2-创建数据目录"><a href="#7-2-创建数据目录" class="headerlink" title="7.2 创建数据目录"></a>7.2 创建数据目录</h5><p>创建放置 tracker数据的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/fastdfs/tracker</span><br></pre></td></tr></table></figure><h5 id="7-3-修改配置文件"><a href="#7-3-修改配置文件" class="headerlink" title="7.3 修改配置文件"></a>7.3 修改配置文件</h5><p>修改 tracker.conf 设置 tracker 内容存储目录</p><p>base_path&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;tracker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim tracker.conf</span><br></pre></td></tr></table></figure><h5 id="7-4-启动服务"><a href="#7-4-启动服务" class="headerlink" title="7.4 启动服务"></a>7.4 启动服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_trackerd start</span><br></pre></td></tr></table></figure><p>启动成功后， 配置文件中 base_path 指向的目录出现 FastDFS服务相关数据目录(data目录， logs 目录)</p><h5 id="7-5-查看服务运行状态"><a href="#7-5-查看服务运行状态" class="headerlink" title="7.5 查看服务运行状态"></a>7.5 查看服务运行状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_trackerd status</span><br></pre></td></tr></table></figure><p>如果显示 is running 表示正常运行。</p><h4 id="8、配置storage"><a href="#8、配置storage" class="headerlink" title="8、配置storage"></a>8、配置storage</h4><p> storage可以和tracker不在同一台服务器上。示例中把storage和tracker安装在同一台服务器上了。</p><h5 id="8-1-复制配置文件"><a href="#8-1-复制配置文件" class="headerlink" title="8.1 复制配置文件"></a>8.1 复制配置文件</h5><p>进入到 &#x2F;etc&#x2F;fdfs, 把 storage 配置文件复制一份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure><h5 id="8-2-创建目录"><a href="#8-2-创建目录" class="headerlink" title="8.2 创建目录"></a>8.2 创建目录</h5><p>创建两个目录， 把base用于存储基础数据和日志，store用于存储上传数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/fastdfs/storage/base</span><br><span class="line">mkdir -p /usr/local/fastdfs/storage/store</span><br></pre></td></tr></table></figure><h5 id="8-3-修改配置文件"><a href="#8-3-修改配置文件" class="headerlink" title="8.3 修改配置文件"></a>8.3 修改配置文件</h5><p>​storage.conf配置文件用于描述存储服务的行为，需要进行下述修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><p>配置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/storage/base</span><br><span class="line">store_path0=/usr/local/fastdfs/storage/store</span><br><span class="line">tracker_server=tracker的服务IP：22122</span><br></pre></td></tr></table></figure><p>​base_path - 基础路径。用于保存storage server 基础数据内容和日志内容的目录。</p><p>​store_path0 - 存储路径。是用于保存FastDFS中存储文件的目录，就是要创建256*256个子目录的位置。</p><p>​base_path 和 store_path0 可以使用同一个目录。</p><p>​tracker_server - 跟踪服务器位置。就是跟踪服务器的IP和端口。</p><p>​启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_storaged start</span><br></pre></td></tr></table></figure><p>​启动成功后，配置文件中base_path 指向的目录中出现FastDFS服务相关数据目录（data目录、logs目录）配置文件中的store_path0指向的目录中同样出现FastDFS存储相关数据录（data目录）。其中$store_path0&#x2F;data&#x2F;目录中默认创建若干子孙目录（两级目录层级总计256*256个目录），是用于存储具体文件数据的。</p><p>​Storage 服务器启动比较慢，因为第一次启动的时候，需要创建256*256个目录。</p><p>​查看启动状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_storaged status</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装FastDFS&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="software" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/"/>
    
    <category term="FastDFS" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/FastDFS/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="FastDFS" scheme="https://lyblog2022.github.io/tags/FastDFS/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
  </entry>
  
  <entry>
    <title>dubbo项目</title>
    <link href="https://lyblog2022.github.io/2022/06/12/study/dubbo/dubbo%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lyblog2022.github.io/2022/06/12/study/dubbo/dubbo%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-06-12T02:28:02.000Z</published>
    <updated>2022-06-12T14:20:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo简单的小项目</p><span id="more"></span><h3 id="1、原型"><a href="#1、原型" class="headerlink" title="1、原型"></a>1、原型</h3><h4 id="1-1-部门原型"><a href="#1-1-部门原型" class="headerlink" title="1.1 部门原型"></a>1.1 部门原型</h4><p>​显示全部部门信息</p><img src="/2022/06/12/study/dubbo/dubbo%E9%A1%B9%E7%9B%AE/Dubbo-4.png" class="" title="Dubbo-4 image"><h4 id="1-2-员工新增"><a href="#1-2-员工新增" class="headerlink" title="1.2 员工新增"></a>1.2 员工新增</h4><img src="/2022/06/12/study/dubbo/dubbo%E9%A1%B9%E7%9B%AE/Dubbo-5.png" class="" title="Dubbo-5 image"><h4 id="1-3-查看部门员工"><a href="#1-3-查看部门员工" class="headerlink" title="1.3 查看部门员工"></a>1.3 查看部门员工</h4><img src="/2022/06/12/study/dubbo/dubbo%E9%A1%B9%E7%9B%AE/Dubbo-6.png" class="" title="Dubbo-6 image"><h3 id="2、按照分布式架构进行设计项目"><a href="#2、按照分布式架构进行设计项目" class="headerlink" title="2、按照分布式架构进行设计项目"></a>2、按照分布式架构进行设计项目</h3><p>​设定员工管理和部门管理不在同一个模块中，需要有一个员工管理项目和一个部门管理项目。</p><p>​为了方便，不去每个项目使用一个窗口，而是使用聚合项目。</p><img src="/2022/06/12/study/dubbo/dubbo%E9%A1%B9%E7%9B%AE/Dubbo-7.png" class="" title="Dubbo-7 image"><h3 id="3、创建数据库"><a href="#3、创建数据库" class="headerlink" title="3、创建数据库"></a>3、创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="keyword">default</span>,<span class="string">&#x27;开发部&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="keyword">default</span>,<span class="string">&#x27;产品部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">photo <span class="type">varchar</span>(<span class="number">200</span>),</span><br><span class="line">did <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> key (did) <span class="keyword">REFERENCES</span> dept(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;dubbo简单的小项目&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://lyblog2022.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="dubbo" scheme="https://lyblog2022.github.io/categories/%E9%A1%B9%E7%9B%AE/dubbo/"/>
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="dubbo" scheme="https://lyblog2022.github.io/tags/dubbo/"/>
    
    <category term="项目" scheme="https://lyblog2022.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>dubbo学习</title>
    <link href="https://lyblog2022.github.io/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/"/>
    <id>https://lyblog2022.github.io/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-11T11:51:20.000Z</published>
    <updated>2022-06-11T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo基础学习、架构、支持的协议及注册中心学习，一个简单的Demo项目及负载均衡的简单配置</p><span id="more"></span><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>​Apache Dubbo 是一个高可用的，基于Java的开源RPC框架。</p><p>​Dubbo框架不仅仅是具备RPC访问功能，还包含服务治理功能。</p><h4 id="1-1-发展历程"><a href="#1-1-发展历程" class="headerlink" title="1.1 发展历程"></a>1.1 发展历程</h4><p>​Dubbo是最开始是阿里巴巴内部使用的RPC框架。</p><p>​2011年对外提供。</p><p>​2012年停止更新。</p><p>​2017年开始继续更新。</p><p>​2019年捐献给Apache，由Apache维护2.7以上版本。</p><h4 id="1-2-架构"><a href="#1-2-架构" class="headerlink" title="1.2 架构"></a>1.2 架构</h4><img src="/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/Dubbo-2.png" class="" title="Dubbo-2 image"><ul><li>线条：虚线表示异步，实线表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结果才能继续执行，相对性能低。</li><li>provider：提供者。编写持久层和事务代码。</li><li>container：容器（Spring容器），Dubbo完全基于Spring实现的。</li><li>register：注册中心。放置所有Provider对外提供的信息。包含Provider的IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息。</li><li>consumer：消费者（RPC调用者，SOA调用服务的项目）开发中也是一个项目，编写service和controller（还可以报页面等）。调用XXXXServiceImpl中的方法。</li><li>monitor：监控中心。监控Provider的压力情况等。每隔2分钟Consumer和Provider会把调用次数发送给Monitor，由Monitor进行统计。</li><li>执行流程：<ol><li>start：启动Spring容器时会把Provider启动。 </li><li>register：把Provider相关信息注册到Registry里</li><li>subscribe：Consumer从Registry中订阅Provider的信息</li><li>notify：通知给Consumer</li><li>invoke：Consumer根据Registry通知的信息进行调用Provider中方法。</li><li>count:Consumer和Provider把调用次数信息异步发送给Monitor进行统计。</li></ol></li></ul><h3 id="2、支持的协议"><a href="#2、支持的协议" class="headerlink" title="2、支持的协议"></a>2、支持的协议</h3><h4 id="2-1-Dubbo协议（官方推荐）"><a href="#2-1-Dubbo协议（官方推荐）" class="headerlink" title="2.1 Dubbo协议（官方推荐）"></a>2.1 Dubbo协议（官方推荐）</h4><p>​优点：</p><p>​采用NIO复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</p><p>​缺点：</p><p>​大文件上传时,可能出现问题(不使用Dubbo文件上传)</p><h4 id="2-2-RMI（Remote-Method-Invocation）协议"><a href="#2-2-RMI（Remote-Method-Invocation）协议" class="headerlink" title="2.2 RMI（Remote Method Invocation）协议"></a>2.2 RMI（Remote Method Invocation）协议</h4><p>​优点:</p><p>​JDK自带的能力。</p><p>​缺点:</p><p>​偶尔连接失败</p><h4 id="2-3-Hessian协议"><a href="#2-3-Hessian协议" class="headerlink" title="2.3 Hessian协议"></a>2.3 Hessian协议</h4><p>​优点:</p><p>​可与原生Hessian互操作，基于HTTP协议</p><p>​缺点:</p><p>​需hessian.jar支持，http短连接的开销大</p><h3 id="3、支持的注册中心"><a href="#3、支持的注册中心" class="headerlink" title="3、支持的注册中心"></a>3、支持的注册中心</h3><h4 id="3-1-Zookeeper（官方推荐）"><a href="#3-1-Zookeeper（官方推荐）" class="headerlink" title="3.1 Zookeeper（官方推荐）"></a>3.1 Zookeeper（官方推荐）</h4><p>​优点:</p><p>​支持分布式.很多周边产品</p><p>​缺点: </p><p>​受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优</p><h4 id="3-2-Multicast"><a href="#3-2-Multicast" class="headerlink" title="3.2 Multicast"></a>3.2 Multicast</h4><p>​优点:</p><p>​去中心化,不需要单独安装软件.</p><p>​缺点:</p><p>​Provider和Consumer和Registry不能跨机房(路由)</p><h4 id="3-3-Redis"><a href="#3-3-Redis" class="headerlink" title="3.3 Redis"></a>3.3 Redis</h4><p>​优点:</p><p>​支持集群,性能高</p><p>​缺点:</p><p>​要求服务器时间同步.否则可能出现集群失败问题.</p><h4 id="3-4-Simple"><a href="#3-4-Simple" class="headerlink" title="3.4 Simple"></a>3.4 Simple</h4><p>​优点: </p><p>​标准RPC服务.没有兼容问题</p><p>​ 缺点: </p><p>​不支持集群.</p><h3 id="4、项目Demo"><a href="#4、项目Demo" class="headerlink" title="4、项目Demo"></a>4、项目Demo</h3><p>​新建父项目Dubbo</p><p>​pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-1-创建子项目api"><a href="#4-1-创建子项目api" class="headerlink" title="4.1 创建子项目api"></a>4.1 创建子项目api</h4><p>创建类DemoService（dubbo）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 11 - 20:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.dubbo.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">(String param)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-创建provider项目"><a href="#4-2-创建provider项目" class="headerlink" title="4.2 创建provider项目"></a>4.2 创建provider项目</h4><p>1、添加pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、创建实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dubbo.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dubbo.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 11 - 21:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.dubbo.service.Impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">(String param)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo 已执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> param+<span class="string">&quot;xxxxxxxxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建application.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-provider</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.253.132:2181</span></span><br></pre></td></tr></table></figure><h4 id="4-3-创建consume子项目"><a href="#4-3-创建consume子项目" class="headerlink" title="4.3 创建consume子项目"></a>4.3 创建consume子项目</h4><p>1、添加pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、创建Service接口(springboot)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 11 - 21:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建Service接口实现类（springboot）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 11 - 21:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.service.Impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> com.dubbo.service.DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.demo(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建controller控制了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 11 - 21:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.demo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、添加配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.253.132:2181</span></span><br></pre></td></tr></table></figure><h4 id="4-4-运行项目"><a href="#4-4-运行项目" class="headerlink" title="4.4 运行项目"></a>4.4 运行项目</h4><p>运行顺序：先启动provider，再启动consume</p><img src="/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/dubbo3.png" class="" title="dubbo3 image"><p>控制台运行结果：</p><img src="/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/dubbo4.png" class="" title="dubbo4 image"><p>dubbo运行结果</p><img src="/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/dubbo6.png" class="" title="dubbo6 image"><h4 id="4-5-运行异常"><a href="#4-5-运行异常" class="headerlink" title="4.5 运行异常"></a>4.5 运行异常</h4><p>启动provider和consume报错</p><img src="/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/dubbo5.png" class="" title="dubbo5 image"><p>解决方案：</p><p>添加一下依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-x-discovery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-x-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、搭建admin管理界面"><a href="#5、搭建admin管理界面" class="headerlink" title="5、搭建admin管理界面"></a>5、搭建admin管理界面</h3><p>使用jar文件 dubbo-admin-0.2.0.jar</p><p>将jar文件内配置文件的地址改为本地的zookeeper地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centers in dubbo2.7</span></span><br><span class="line"><span class="attr">admin.registry.address</span>=<span class="string">zookeeper://192.168.253.132:2181</span></span><br><span class="line"><span class="attr">admin.config-center</span>=<span class="string">zookeeper://192.168.253.132:2181</span></span><br><span class="line"><span class="attr">admin.metadata-report.address</span>=<span class="string">zookeeper://192.168.253.132:2181</span></span><br></pre></td></tr></table></figure><p>使用 java -jar命令运行jar文件</p><img src="/2022/06/11/study/dubbo/dubbo%E5%AD%A6%E4%B9%A0/dubbo7.png" class="" title="dubbo7 image"><h3 id="6、负载均衡"><a href="#6、负载均衡" class="headerlink" title="6、负载均衡"></a>6、负载均衡</h3><ul><li>集群：一个内容，部署多次，形成的整体称为集群。集群中每个个体应该部署到不同的服务器上。</li><li>伪集群：集群中内容部署到同一台服务器上，通过不同端口区分不同个体。</li><li>负载均衡是在集群前提下，当访问整个集群时，集群中每个节点被访问次数或频率的规则。</li><li>Dubbo 内置了四个负载均衡策略。默认为Random</li></ul><h4 id="6-1-内置策略"><a href="#6-1-内置策略" class="headerlink" title="6.1 内置策略"></a>6.1 内置策略</h4><ul><li>Random：随机。随机访问集群中节点。访问概率和权重有关。</li><li>RoundRobin：轮询。访问频率和权重有关。<ul><li>权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。</li></ul></li><li>LeastActive：活跃数相同的随机，不同的活跃数高的放前面。</li><li>ConsistentHash：一致性Hash。相同参数请求总是发到一个提供者。</li></ul><h4 id="6-2-设置负载均衡"><a href="#6-2-设置负载均衡" class="headerlink" title="6.2 设置负载均衡"></a>6.2 设置负载均衡</h4><h5 id="6-2-1-Reference"><a href="#6-2-1-Reference" class="headerlink" title="6.2.1 @Reference"></a>6.2.1 @Reference</h5><p>​调用的服务采用的负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference(loadbalance = &quot;roundrobin&quot;)</span></span><br><span class="line"><span class="keyword">private</span> DemoService demoService;</span><br></pre></td></tr></table></figure><h5 id="6-2-2-Service"><a href="#6-2-2-Service" class="headerlink" title="6.2.2 @Service"></a>6.2.2 @Service</h5><p>​当前服务采用的负载均衡算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br></pre></td></tr></table></figure><p>​设置权重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(weight = 4)</span></span><br></pre></td></tr></table></figure><h5 id="6-2-3-配置文件"><a href="#6-2-3-配置文件" class="headerlink" title="6.2.3 配置文件"></a>6.2.3 配置文件</h5><p>​全局设置所有provider和consumer的负载均衡效果</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-provider</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.32.128:2181</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20884</span></span><br><span class="line">  <span class="attr">provider:</span></span><br><span class="line">    <span class="attr">loadbalance:</span> <span class="string">random</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="attr">loadbalance:</span> <span class="string">random</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;dubbo基础学习、架构、支持的协议及注册中心学习，一个简单的Demo项目及负载均衡的简单配置&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="dubbo" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/dubbo/"/>
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="dubbo" scheme="https://lyblog2022.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>手写rpc框架</title>
    <link href="https://lyblog2022.github.io/2022/06/09/study/%E6%89%8B%E5%86%99rpc%E6%A1%86%E6%9E%B6/"/>
    <id>https://lyblog2022.github.io/2022/06/09/study/%E6%89%8B%E5%86%99rpc%E6%A1%86%E6%9E%B6/</id>
    <published>2022-06-09T05:01:35.000Z</published>
    <updated>2022-06-09T05:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Zookeeper作为注册中心，RMI作为连接技术，手写RPC框架。</p><span id="more"></span><h4 id="1、创建RPCClient项目"><a href="#1、创建RPCClient项目" class="headerlink" title="1、创建RPCClient项目"></a>1、创建RPCClient项目</h4><p>创建父项目RPCClient</p><p>包含三个子项目</p><p>pojo: service中需要的实体类</p><p>service：包含被serviceimpl和consumer依赖的接口。</p><p>serviceimpl:provider提供的服务内容</p><p>consumer：消费者，调用服务内容。</p><h4 id="2、pojo项目"><a href="#2、pojo项目" class="headerlink" title="2、pojo项目"></a>2、pojo项目</h4><p>在父项目下新建子项目pojo</p><p>该子项目包括一个文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 08 - 21:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、service项目"><a href="#3、service项目" class="headerlink" title="3、service项目"></a>3、service项目</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建MyService接口，继承Remote类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 08 - 21:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、provider项目"><a href="#4、provider项目" class="headerlink" title="4、provider项目"></a>4、provider项目</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建ProviderRun类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.service.Impl.MyServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.service.MyService;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 08 - 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderRun</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">8989</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:8989/myService&quot;</span>;</span><br><span class="line">            Naming.bind(url, service);</span><br><span class="line">            System.out.println(<span class="string">&quot;MRI服务启动成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建zookeeper并发布信息</span></span><br><span class="line">            <span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(<span class="string">&quot;192.168.253.132:2181&quot;</span>, <span class="number">10000</span>, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;获取链接&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//运行前确保/rpc目录存在</span></span><br><span class="line">            zooKeeper.create(<span class="string">&quot;/rpc/provider&quot;</span>,url.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            System.out.println(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行项目，打开zookeeper，查看是否写入到&#x2F;rpc&#x2F;provider</p><img src="/2022/06/09/study/%E6%89%8B%E5%86%99rpc%E6%A1%86%E6%9E%B6/rpc1.png" class="" title="rpc1 image"><h4 id="5、consume项目"><a href="#5、consume项目" class="headerlink" title="5、consume项目"></a>5、consume项目</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 08 - 21:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.consumer.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PageService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.consumer.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.User;</span><br><span class="line"><span class="keyword">import</span> com.consumer.service.PageService;</span><br><span class="line"><span class="keyword">import</span> com.service.MyService;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 08 - 21:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.consumer.service.Impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PageService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(<span class="string">&quot;192.168.253.132:2181&quot;</span>, <span class="number">10000</span>, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;链接成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="type">byte</span>[] bytes = zooKeeper.getData(<span class="string">&quot;/rpc/provider&quot;</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">            <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> (MyService) Naming.lookup(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> myService.findAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.User;</span><br><span class="line"><span class="keyword">import</span> com.consumer.service.PageService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022 - 06 - 08 - 22:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.consumer.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PageService pageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageService.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动springboot项目，输入localhost:8080&#x2F;show</p><img src="/2022/06/09/study/%E6%89%8B%E5%86%99rpc%E6%A1%86%E6%9E%B6/rpc3.png" class="" title="rpc3 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Zookeeper作为注册中心，RMI作为连接技术，手写RPC框架。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="RPC" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/RPC/"/>
    
    
    <category term="zookeeper" scheme="https://lyblog2022.github.io/tags/zookeeper/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="RPC" scheme="https://lyblog2022.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper使用</title>
    <link href="https://lyblog2022.github.io/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/"/>
    <id>https://lyblog2022.github.io/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-07T13:17:08.000Z</published>
    <updated>2022-06-08T14:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>zookeeper内容发布及消息订阅</p><span id="more"></span><h3 id="1、向zookeeper中注册内容"><a href="#1、向zookeeper中注册内容" class="headerlink" title="1、向zookeeper中注册内容"></a>1、向zookeeper中注册内容</h3><p>新建项目ZookeeperClient</p><h4 id="1-1-创建-x2F-demo"><a href="#1-1-创建-x2F-demo" class="headerlink" title="1.1 创建&#x2F;demo"></a>1.1 创建&#x2F;demo</h4><p>使用zookeeper的客户端命令工具创建&#x2F;demo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh</span><br><span class="line">create /demos</span><br></pre></td></tr></table></figure><h4 id="1-2-添加依赖"><a href="#1-2-添加依赖" class="headerlink" title="1.2 添加依赖"></a>1.2 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-编写代码"><a href="#1-3-编写代码" class="headerlink" title="1.3 编写代码"></a>1.3 编写代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 创建zookeeper对象</span></span><br><span class="line"><span class="comment">            * 参数1：zookeeper IP+端口</span></span><br><span class="line"><span class="comment">            * 参数2：访问超时设置</span></span><br><span class="line"><span class="comment">            * 参数3：链接成功后，编写成功信息</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;192.168.253.132:2181&quot;</span>;</span><br><span class="line">           <span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(ip, <span class="number">10000</span>, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;获取链接&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 向zookeeper发送内容</span></span><br><span class="line"><span class="comment">            * 参数1：发送的文件</span></span><br><span class="line"><span class="comment">            * 参数2：发送的内容</span></span><br><span class="line"><span class="comment">            * 参数3：权限</span></span><br><span class="line"><span class="comment">            * 参数4：内容的模式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">content</span>  <span class="operator">=</span> zooKeeper.create(<span class="string">&quot;/demo/rmi-adress&quot;</span>,<span class="string">&quot;rmi:localhost:8080/demoService&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line">           System.out.println(<span class="string">&quot;content=&quot;</span>+content);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-控制台输出"><a href="#1-4-控制台输出" class="headerlink" title="1.4 控制台输出"></a>1.4 控制台输出</h4><img src="/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/zookeeper1.png" class="" title="zookeeper1 image"><h4 id="1-5-zookeeper输出"><a href="#1-5-zookeeper输出" class="headerlink" title="1.5 zookeeper输出"></a>1.5 zookeeper输出</h4><img src="/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/zookeeper2.png" class="" title="zookeeper2 image"><h4 id="1-6-异常"><a href="#1-6-异常" class="headerlink" title="1.6 异常"></a>1.6 异常</h4><img src="/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/zookeeper3.png" class="" title="zookeeper3 image"><p>解决方案—-防火墙未关闭</p><p>查看防火墙状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><img src="/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/zookeeper4.png" class="" title="zookeeper4 image"><p>active表示当前防火墙处于开启状态 inactive表示关闭状态<br>systemctl stop firewalld.service （关闭防火墙）<br>systemctl start firewalld.service （开启防火墙）<br>systemctl disable firewalld.service （禁止防火墙自启动）<br>systemctl enable firewalld.service （防火墙随系统开启启动）</p><p>关闭防火墙即可</p><h4 id="1-7-异常2—6-8新增"><a href="#1-7-异常2—6-8新增" class="headerlink" title="1.7 异常2—6.8新增"></a>1.7 异常2—6.8新增</h4><p>如果在关闭防火墙后仍出现以上问题</p><p>解决方案–用记事本打开C:\Windows\System32\drivers\etc\hosts文件，添加ZooKeeper部署的服务器ip，然后保存。</p><img src="/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/zookeeper6.png" class="" title="zookeeper6 image"><h3 id="2、zookeeper消息订阅"><a href="#2、zookeeper消息订阅" class="headerlink" title="2、zookeeper消息订阅"></a>2、zookeeper消息订阅</h3><h4 id="2-1-编写代码"><a href="#2-1-编写代码" class="headerlink" title="2.1 编写代码"></a>2.1 编写代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 创建zookeeper对象</span></span><br><span class="line"><span class="comment">            * 参数1：zookeeper IP+端口</span></span><br><span class="line"><span class="comment">            * 参数2：访问超时设置</span></span><br><span class="line"><span class="comment">            * 参数3：链接成功后，编写成功信息</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;192.168.253.132:2181&quot;</span>;</span><br><span class="line">           <span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(ip, <span class="number">10000</span>, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;获取链接&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//从zookeeper中获取内容</span></span><br><span class="line">           <span class="comment">//2.1获取节点</span></span><br><span class="line">           List&lt;String&gt; list = zooKeeper.getChildren(<span class="string">&quot;/demo&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">           System.out.println(list);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取内容</span></span><br><span class="line">           <span class="keyword">for</span>(String child:list)&#123;</span><br><span class="line">               <span class="type">byte</span>[] result = zooKeeper.getData(<span class="string">&quot;/demo/&quot;</span>+child,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">               System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(result));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-控制台输出结果"><a href="#2-2-控制台输出结果" class="headerlink" title="2.2 控制台输出结果"></a>2.2 控制台输出结果</h4><img src="/2022/06/07/study/zookeeper%E4%BD%BF%E7%94%A8/zookeeper5.png" class="" title="zookeeper5 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;zookeeper内容发布及消息订阅&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="zookeeper" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/zookeeper/"/>
    
    
    <category term="zookeeper" scheme="https://lyblog2022.github.io/tags/zookeeper/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper常用命令</title>
    <link href="https://lyblog2022.github.io/2022/06/07/study/zookeeper/"/>
    <id>https://lyblog2022.github.io/2022/06/07/study/zookeeper/</id>
    <published>2022-06-07T12:53:54.000Z</published>
    <updated>2022-06-07T13:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>zookeeper常用命令</p><span id="more"></span><h4 id="1、ls"><a href="#1、ls" class="headerlink" title="1、ls"></a>1、ls</h4><p>ls -s&#x2F;path</p><p>-s 详细信息，替代老版本ls2</p><p>-R 当前目录和子目录中内容都罗列出来</p><p>例如：ls -R &#x2F; 显示根目录下所有内容</p><img src="/2022/06/07/study/zookeeper/zookeeper1.png" class="" title="zookeeper1 image"><h4 id="2、create"><a href="#2、create" class="headerlink" title="2、create"></a>2、create</h4><p>create &#x2F;path [data]</p><p>[data] 包含内容</p><p>创建指定路径信息</p><p>例如：create &#x2F;demo 创建&#x2F;demo</p><img src="/2022/06/07/study/zookeeper/zookeeper2.png" class="" title="zookeeper2 image"><h4 id="3、get"><a href="#3、get" class="headerlink" title="3、get"></a>3、get</h4><p>get [-s] &#x2F;path</p><p>[-s] 详细信息</p><p>查看指定路径下内容。</p><p>例如： get -s &#x2F;demo</p><img src="/2022/06/07/study/zookeeper/zookeeper3.png" class="" title="zookeeper3 image"><p>null:存放的数据</p><p>cZxid:创建时zxid(znode每次改变时递增的事务id)</p><p>ctime:创建时间戳</p><p>mZxid:最近一次更新的zxid</p><p>mtime:最近一次更新的时间戳</p><p>pZxid:子节点的zxid</p><p>cversion:子节点更新次数</p><p>dataversion:节点数据更新次数</p><p>aclVersion:节点ACL(授权信息)的更新次数</p><p>ephemeralOwner:如果该节点为ephemeral节点(临时，生命周期与session一样), ephemeralOwner值表示与该节点绑定的session id. 如果该节点不是ephemeral节点, ephemeralOwner值为0.</p><p>dataLength:节点数据字节数</p><p>numChildren:子节点数量</p><h4 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h4><p>set &#x2F;path data</p><p>设置节点内容</p><img src="/2022/06/07/study/zookeeper/zookeeper5.png" class="" title="zookeeper5 image"><h4 id="5、delete"><a href="#5、delete" class="headerlink" title="5、delete"></a>5、delete</h4><p>delete &#x2F;path</p><p>删除节点</p><img src="/2022/06/07/study/zookeeper/zookeeper6.png" class="" title="zookeeper6 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;zookeeper常用命令&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="zookeeper" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/zookeeper/"/>
    
    
    <category term="zookeeper" scheme="https://lyblog2022.github.io/tags/zookeeper/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
