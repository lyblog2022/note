<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Note</title>
  
  <subtitle>Welcome To My World</subtitle>
  <link href="https://lyblog2022.github.io/atom.xml" rel="self"/>
  
  <link href="https://lyblog2022.github.io/"/>
  <updated>2022-10-09T08:52:13.254Z</updated>
  <id>https://lyblog2022.github.io/</id>
  
  <author>
    <name>ly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mycat数据切分及分库分表</title>
    <link href="https://lyblog2022.github.io/2022/10/09/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <id>https://lyblog2022.github.io/2022/10/09/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</id>
    <published>2022-10-09T05:55:55.000Z</published>
    <updated>2022-10-09T08:52:13.254Z</updated>
    
    <content type="html"><![CDATA[<p>MyCat数据切分、配置文件及分库分表功能</p><span id="more"></span><h3 id="1、数据切分"><a href="#1、数据切分" class="headerlink" title="1、数据切分"></a>1、数据切分</h3><p>​数据切分指的是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库上面，以达到分散单台设备负载的效果。</p><p>​数据的切分根据其切分规则的类型，可以分为两种切分模式。一种是按照不同的表来切分到不同的数据库之上，这种切可以称之为数据的垂直切分或者纵向切分，另外一种则是根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库上面，这种切分称之为数据的水平切分或者横向切分。</p><p>​垂直切分的最大特点就是 规则简单，实施也更为方便，尤其适合各业务之间的耦合度非常低，相互影响很小，业务逻辑非常清晰的系统。在这种系统中，可以很容易做到将不同业务模块所使用的表分拆到不同的数据库中。根据不同的表来进行拆分，对应用程序的影响也很小，拆分规则也会比较简单清晰。</p><p>​水平切分与垂直切分相比，相对来说稍微复杂一些。因为要将同一个表中的不同数据拆分到不同的数据库中，对于应用程序来说，拆分规则本身就较根据表明来拆分更为复杂，后期的数据维护也会更为复杂一些。</p><h4 id="1-1-垂直切分"><a href="#1-1-垂直切分" class="headerlink" title="1.1 垂直切分"></a>1.1 垂直切分</h4><p>​一个数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者压力分担到不同的库上面。</p><p>​<img src="/2022/10/09/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/cat1.png" class="" title="cat1 image"></p><p>​如上图，一个系统被切分成了用户系统、订单交易、支付系统等多个库</p><p>​一个架构设计较好的应用系统，其总体功能肯定是又多个功能模块所组成的。而每一个功能模块所需要的数据对应到数据库中就是一个或者多个表。而在架构设计中，各个功能模块相关质检的交互点越统一越少，系统的耦合度就越低，系统各个模块的维护性以及扩展性也就越好。这样的系统，实现数据的垂直切分也就越容易。</p><p>​但是往往系统中有些表难以做到完全的独立，存在着跨库join的情况，对于这类的表，就需要去做平衡，是数据让步业务，共用一个数据源还是分成多个库，业务之间通过接口来做调用。在系统初期，数据量比较少，或者资源有限的情况下，会选择共用数据源，但是当数据发展到一定规模，负载很大的情况下就必须要做分割。</p><p>​一般来讲业务存在着复杂join的场景是难以切分的，往往业务独立的易于切分。如何切分，切分到何种程度是考验技术架构的一个难题。下面来分析下垂直切分的优缺点：</p><p>优点：</p><ul><li>拆分后业务清晰，拆分规则明确</li><li>系统之间整合或扩展容易</li><li>数据维护简单</li></ul><p>缺点：</p><ul><li>部分业务表无法实现join，只能通过接口方式解决，提高了系统复杂度</li><li>受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高</li><li>事务处理复杂</li></ul><h4 id="1-2-水平切分"><a href="#1-2-水平切分" class="headerlink" title="1.2 水平切分"></a>1.2 水平切分</h4><p>​相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库中，每个表中包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行切分，就是将表中的某些行切分到一个数据库，而另外的某些行又切分到其他的数据库中，</p><p>​<img src="/2022/10/09/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/cat2.png" class="" title="cat2 image"></p><p>​拆分数据就需要定义分片规则。关系型数据库是行列的二维模型，拆分的第一原则是找到拆分维度。比如从会员的角度来分析，商户订单交易类系统中查询会员某天某月某个订单，那么就需要按照会员结合日期来拆分，不同的数据按照会员id做分组，这样所有的数据查询join都会在单库内解决；如果从商户的角度来讲，要查询某个商家某天所有的订单数，就需要按照商户id做拆分；但是如果系统既想按照会员拆分，又想按照商家数据拆分，就会有一定的困难，需要综合考虑找到合适的分片。</p><p>几种典型的分片规则包括：</p><ol><li>按照用户id取模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中；</li><li>按照日期，将不同月甚至日的数据分散到不同的库中；</li><li>按照某个特定的字段求模，或者根据特定范围段分散到不同的库中。</li></ol><p>如图，切分原则都是根据业务找到适合的切分规则分散到不同的库，下图是用用户id求模的案例：</p><p>​<img src="/2022/10/09/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86%E5%8F%8A%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/cat3.png" class="" title="cat3 image"></p><p>数据做完了水平拆分之后也是有优缺点的。</p><p>优点：</p><ol><li>拆分规则抽象好，join操作基本可以数据库做；</li><li>不存在单库大数据，高并发的性能瓶颈；</li><li>应用端改造较少；</li><li>提高了系统的稳定性跟负载能力</li></ol><p>缺点：</p><ol><li>拆分规则难以抽象</li><li>分片事务一致性难以解决</li><li>数据多次扩展跟维护量极大</li><li>跨库join性能较差</li></ol><h4 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h4><p>垂直切分和水平切分共同的缺点：</p><pre><code>1. 引入了分布式事务的问题1. 跨节点join的问题1. 跨节点合并排序分页的问题1. 多数据源管理的问题</code></pre><p>针对数据源管理，目前主要有两种思路：</p><pre><code>1. 客户端模式，在每个应用程序模块中配置管理自己需要的一个或多个数据源，直接访问各个数据库，在模块内完成数据的整合1. 通过中间代理层来统一管理所有的数据源，后端数据库集群对前端应用程序透明；</code></pre><p>​在实际的生产环境中，我们都会选择第二种方案来解决问题，尤其是系统不断变得庞大复杂的时候，其实这是非常正确的，虽然短期内付出的成本可能会比较大，但是对整个系统的扩展性来说，是非常有帮助的。</p><p>​mycat通过数据切分解决传统数据库的缺陷，又有了nosql易于扩展的优点。通过中间代理层规避了多数据源的数据问题，对应用完全透明，同时对数据切分后存在的问题，也做了解决方案。</p><p>​mycat在做数据切分的时候应该尽可能的遵循以下原则，当然这也是经验之谈，最终的落地实现还是要看具体的应用场景在做具体的分析</p><pre><code>+ 第一原则：能不切分尽量不要切分+ 第二原则：如果要切分一定要选择合适的切分规则，提前规划好+ 第三原则：数据切分尽量通过数据冗余或表分组来降低跨库join的可能+ 第四原则：由于数据库中间件对数据join实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表join。</code></pre><h3 id="2、MyCat配置文件"><a href="#2、MyCat配置文件" class="headerlink" title="2、MyCat配置文件"></a>2、MyCat配置文件</h3><h4 id="2-1-schema-xml文件"><a href="#2-1-schema-xml文件" class="headerlink" title="2.1 schema.xml文件"></a>2.1 schema.xml文件</h4><p>schema.xml作为mycat中重要地配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p><h5 id="2-1-1-schema标签"><a href="#2-1-1-schema标签" class="headerlink" title="2.1.1 schema标签"></a>2.1.1 schema标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>schema标签用于定义mycat实例中的逻辑库，mycat可以有多个逻辑库，每个逻辑库都有自己相关的配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schame，那么所有的表配置都将属于同一个默认的逻辑库。</p><pre><code>+ **dataNode：**该属性用于绑定逻辑库到某个具体的database上。+ **checkSQLschema：**当该值为true时，如果执行select * from TESTDB.user，那么mycat会将语句修改为select * from user,即把表示schema的字符去掉，避免发送到后端数据库执行时报错。+ **sqlMaxLimit：**当该值设置为某个数值的时候，每次执行的sql语句，如果没有加上limit语句，mycat也会自动加上对应的值。例如，当设置值为100的时候，那么select * from user的效果跟执行select * from user limit 100相同。如果不设置该值的话，mycat默认会把所有的数据信息都查询出来，造成过多的输出，所以，还是建议设置一个具体的值，以减少过多的数据返回。当然sql语句中可以显式的制定limit的大小，不受该属性的约束。</code></pre><h5 id="2-2-table标签"><a href="#2-2-table标签" class="headerlink" title="2.2 table标签"></a>2.2 table标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>table标签定义了mycat中的逻辑表，所有需要拆分的表都需要在这个标签中定义。</p><pre><code>+ **name：**定义逻辑表的表名，这个名字就如同创建表的时候指定的表名一样，同个schema标签中定义的名字必须唯一。+ **dataNode：**定义这个逻辑表所属的dataNode，该属性的值需要和dataNode标签中的name属性值对应，如果需要定义的dn过多，可以使用如下方法减少配置：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;multipleDn$0-99,multipleDn2$100-199&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-shardinglong&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;multipleDn$0-99&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db$0-99&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;multipleDn2$100-199&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot; db$100-199&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>rule：</strong>该属性用于指定逻辑表要使用的规则名字，规则名字在rule.xml中定义，必须与tableRule标签中的name属性值一一对应</li><li><strong>ruleRequired：</strong>该属性用于指定表是否绑定分片规则，如果配置为true，但没有配置具体rule的话，程序会报错。</li><li><strong>primaryKey：</strong>该逻辑表对应真实表的主键，例如：分片的规则是使用非主键进行分片的，那么在使用主键查询的时候，就会发送查询语句到所有配置的DN上，如果使用改属性配置真实表的主键。那么mycat会缓存主键与具体DN的信息，那么再次使用非主键进行查询的时候就不会进行广播式的查询，就会直接发送语句到具体的DN，但是尽管配置改属性，如果缓存没有命中的话，还是会发送语句给具体的DN来获得数据</li><li><strong>type：</strong>该属性定义了逻辑表的类型，目前逻辑表只有全局表和普通表两种类型。对应的配置：<ul><li>全局表：global</li><li>普通表：不指定该值为global的所有表</li></ul></li><li><strong>autoIncrement：</strong>mysql 对非自增长主键，使用 last_insert_id()是不会返回结果的，只会返回 0。所以，只有定义了自增长主键的表才可以用 last_insert_id()返回主键值。mycat 目前提供了自增长主键功能，但是如果对应的 mysql 节点上数据表，没有定义 auto_increment，那么在 mycat 层调用 last_insert_id()也是不会返回结果的。由于 insert 操作的时候没有带入分片键， mycat 会先取下这个表对应的全局序列，然后赋值给分片键。 这样才能正常的插入到数据库中，最后使用 last_insert_id()才会返回插入的分片键值。如果要使用这个功能最好配合使用数据库模式的全局序列。使用 autoIncrement&#x3D;“true” 指定这个表有使用自增长主键，这样 mycat 才会不抛出分片键找不到的异常。使用 autoIncrement&#x3D;“false” 来禁用这个功能，当然你也可以直接删除掉这个属性。默认就是禁用的。 </li><li><strong>needAddLimit：</strong>指定表是否需要自动的在每个语句后面加上limit限制。由于使用了分库分表，数据量有时会特别巨大。这时候执行查询语句，如果恰巧又忘记了加上数量限制的话，那么查询所有的数据出来，就会执行很久的时间，所以mycat自动为我们加上了limit 100。当前如果语句中又limit，那么就不会添加了。</li></ul><h5 id="2-3-childTable标签"><a href="#2-3-childTable标签" class="headerlink" title="2.3 childTable标签"></a>2.3 childTable标签</h5><p>childTable标签用于定义ER分片的子表。通过标签上的属性与父表进行关联。</p><ul><li><strong>name：</strong>定义子表的表名</li><li><strong>joinKey：</strong>插入子表的时候会使用这个列的值查找父表存储的数据节点</li><li><strong>parentKey：</strong>属性指定的值一般为与父表建立关联关系的列名。程序首先获取joinkey的值，再通过parentKey属性指定的列名产生查询语句，通过执行该语句得到父表存储再哪个分片上，从而确定子表存储的位置。</li><li><strong>primaryKey：</strong>跟table标签所描述相同</li><li><strong>needAddLimit：</strong>跟table标签所描述相同</li></ul><h5 id="2-4-dataNode标签"><a href="#2-4-dataNode标签" class="headerlink" title="2.4 dataNode标签"></a>2.4 dataNode标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;lch3307&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dataNode标签定义了mycat中的数据节点，也就是我们通常说的数据分片，一个dataNode标签就是一个独立的数据分片。</p><ul><li><strong>name：</strong>定义数据节点的名字，这个名字需要是唯一的，我们需要再table标签上应用这个名字，来建立表与分片对应的关系</li><li><strong>dataHost：</strong>该属性用于定义该分片属于哪个数据库实例，属性值是引用dataHost标签上定义的name属性。</li><li><strong>database：</strong>该属性用于定义该分片属性哪个具体数据库实力上的具体库</li></ul><h5 id="2-5-dataHost标签"><a href="#2-5-dataHost标签" class="headerlink" title="2.5 dataHost标签"></a>2.5 dataHost标签</h5><p>​该标签定义了具体的数据库实例、读写分离配置和心跳语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- can have multi write hosts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;readHost host=&quot;hostS1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;</span></span><br><span class="line"><span class="comment">/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>name：</strong>唯一标识dataHost标签，供上层的标签使用</li><li><strong>maxcon：</strong>指定每个读写实例连接池的最大连接</li><li><strong>mincon：</strong>指定每个读写实例连接连接池的最小链接，初始化连接池的大小</li><li><strong>balance：</strong>负载均衡类型：<ul><li>0：不开启读写分离机制，所有读操作都发送到当前可用的writeHost上</li><li>1：全部的readHost和stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式（M1-&gt;S1,M2-&gt;S2,并且M1与M2互为主备），正常情况下，M2,S1,S2都参与select语句的负载均衡</li><li>2：所有读操作都随机的再writeHost、readHost上分发</li><li>3：所有读请求随机的分发到writeHost对应readHost执行，writeHost不负担读压力，在之后的版本中失效。</li></ul></li><li><strong>writeType：</strong>写类型<ul><li>writeType&#x3D;0：所有的写操作发送到配置的第一个writeHost，第一个挂了切换到还生存的第二个writeHost，重启之后以切换后的为准，切换记录保存在配置文件 dnindex.properties</li><li>writeType&#x3D;1：所有写操作都随机的发送到配置的writeHost，1.5以后废弃不推荐</li></ul></li><li><strong>dbType：</strong>指定后端连接的数据库类型，如MySQL，mongodb,oracle</li><li><strong>dbDriver：</strong>指定连接后端数据库使用的Driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和maridb，其他类型的数据库则需要使用JDBC驱动来支持</li><li><strong>switchType：</strong>是否进行主从切换<ul><li>-1：表示不自动切换</li><li>1：默认值，自动切换</li><li>2：基于mysql主从同步的状态决定是否切换</li></ul></li></ul><h5 id="2-6-heartbeat标签"><a href="#2-6-heartbeat标签" class="headerlink" title="2.6 heartbeat标签"></a>2.6 heartbeat标签</h5><p>​这个标签指明用于和后端数据库进行心跳检测的语句。</p><h4 id="2-2-server-xml文件"><a href="#2-2-server-xml文件" class="headerlink" title="2.2 server.xml文件"></a>2.2 server.xml文件</h4><p>server.xml几乎保存了所有mycat需要的系统配置信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">privileges</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0010&quot;</span> <span class="attr">showTables</span>=<span class="string">&quot;custome/mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tbl_user&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0110&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tbl_dynamic&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">privileges</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span>  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyCat数据切分、配置文件及分库分表功能&lt;/p&gt;</summary>
    
    
    
    <category term="框架" scheme="https://lyblog2022.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/categories/%E6%A1%86%E6%9E%B6/MyCat/"/>
    
    
    <category term="框架" scheme="https://lyblog2022.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/tags/MyCat/"/>
    
  </entry>
  
  <entry>
    <title>mycat的基本介绍</title>
    <link href="https://lyblog2022.github.io/2022/10/08/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <id>https://lyblog2022.github.io/2022/10/08/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/</id>
    <published>2022-10-08T05:47:44.000Z</published>
    <updated>2022-10-08T09:52:07.482Z</updated>
    
    <content type="html"><![CDATA[<p>mycat的前置知识及基本介绍</p><span id="more"></span><h3 id="1、前置知识"><a href="#1、前置知识" class="headerlink" title="1、前置知识"></a>1、前置知识</h3><h4 id="1-1-分布式系统"><a href="#1-1-分布式系统" class="headerlink" title="1.1 分布式系统"></a>1.1 分布式系统</h4><p>​分布式系统是指其组件分布在网络上，组件之间通过传递消息进行通信和动作协调的系统。它的核心理念是让多台服务器协同工作，完成单台服务器无法处理的任务，尤其是高并发或者大数据量的额任务。它的特点是：</p><ul><li><strong>透明性：</strong>分布式系统对于用户是透明的，一个分布式系统在用户面前的表现就像一个传统的单处理机分时系统，可用用户不必了解其内部结构就能使用;</li><li><strong>扩展性：</strong>分布式系统的最大特点是可扩展性，它能够根据需求的增加而扩展，可以通过横向扩展使集群的整体性能得到线性提升，也可以通过纵向扩展单台服务器的性能使服务器集群的性能得到提升;</li><li><strong>可靠性：</strong>分布式系统不允许单点失效的问题存在，它的基本思想是，如果一台机器坏了，则其他机器能够接替它进行工作，具有持续服务的特性;</li><li><strong>高性能：</strong>高性能才是设计分布式系统的初衷.</li></ul><p>分布式系统的缺点：</p><ul><li>在节点通信部分的开销比较大，线程安全问题也变得复杂，需要在保证数据完整性的同时兼顾性能</li><li>过分依赖网络，网络信息的丢失和饱和将会抵消分布式系统的大部分优势</li><li>有潜在的数据安全和网络安全等安全性问题。</li></ul><h4 id="1-2-分布式数据库"><a href="#1-2-分布式数据库" class="headerlink" title="1.2 分布式数据库"></a>1.2 分布式数据库</h4><p>​随着技术的发展，各个行业所产生的数据量呈爆炸式增长，动辄就达到数百TB或者PB的级别，已经远远超过了传统单机数据库的处理能力，因此分布式数据库已经成为了最最迫切的需求。</p><p>​分布式数据库是指数据在物理上分步而在逻辑上集中管理的数据库系统。物理上分步是指分布式数据库的数据分步在物理位置不同并由网络连接的节点或站点上；逻辑上集中是指各数据库节点之间在逻辑上是一个整体，并由统一的数据库管理系统管理，不同的节点分步可以跨不同的机房、城市甚至国家。</p><p>分布式数据库的特点:</p><ul><li><pre><code>**透明性：**用户不必关系数据的逻辑分区和物理位置分步的细节，也不必关系重复副本的一致性问题，同时不必关心在局部场地上数据库支持哪种数据模型</code></pre></li><li><pre><code>**数据冗余性：**分布式数据库通过冗余实现系统的可靠性、可用性，并改善其性能。多个节点存储数据副本，当某一个节点的数据遭到破坏时，冗余的副本可保证数据的完整性；当工作的节点受损害时，可通过心跳等机制进行切换，系统整体不被破坏。还可以通过热点数据的就近分步原则减少网络通信的消耗，加快访问速度，改善性能。</code></pre></li><li><pre><code>**易于扩展性：**在分布式数据库中能够方便地通过水平扩展提高系统的整体性能，也能够通过垂直扩展来提高性能，扩展并不需要修改系统程序。</code></pre></li><li><pre><code>**自治性：**各节点上的数据由本地的DBMS管理，具有自治处理能力，完成本场地的应用或局部应用</code></pre></li></ul><p>​分布式数据库还具有经济、性能优越、响应速度更快、灵活的体系结构、易于继承现有系统等特点。</p><h4 id="1-3-分布式数据库的实现原理"><a href="#1-3-分布式数据库的实现原理" class="headerlink" title="1.3 分布式数据库的实现原理"></a>1.3 分布式数据库的实现原理</h4><p>​分布式数据库具有逻辑整体性、物理分布式，正是因为其物理分布性才使得分布式数据库的实现变得更加复杂，因为数据划分后存储在不同的节点上，而为了保证可靠性，需要存储多个副本，所以产生了数据复制的问题。为了保证良好的性能，分布式数据库必须易于扩展，具体来讲分布式数据库应有4个优势：数据分片及复制管理、具有事务的可靠性存取、良好的性能、易于扩展，所以分布式数据库在设计上需要实现数据库数据库的目录管理、数据分片、分布式查询处理、分布式并发控制、分布式锁管理、分布式存储、分布式网络架构、分布式安全管理等。</p><p>​<strong>1、分布式数据库的目录管理</strong></p><p>​分布式数据库的目录存放着系统元数据及数据库的元数据的全部信息，这些数据的存在是为了正确、有效地访问数据。数据的增删改查操作都需要用到目录，用户授权、安全管理及并发控制等也都需要用到目录，目录结构的合理性直接影响数据库的性能。目录一般包括各级的描述、访问方法的描述、关于数据库的统计数据和一致性信息等，系统根据这些信息将用户查询转换为物理数据库上的查询，选择一条最佳的存取路径进行事务管理及安全性、完整性检查等。</p><p>​分布式数据库的目录课分为全局目录、分布式目录、全局与本地混合目录。</p><p>​<strong>2、数据分片</strong></p><p>​当数据库过于庞大，尤其是写入过于频繁且很难由一台主机支撑时，我们还是会面临扩展瓶颈。我们将存放在同一个数据库实例中的数据分散存放到多个数据库实例上，进行多台设备存取以提高性能，在切分数据的同时可以提高系统整体的可用性。</p><p>​数据分片是指将数据全局地划分为相关的逻辑片段，有水平切分、垂直切分、混合切分三种类型。</p><p>​<strong>水平切分：</strong>按照某个字段的某种规则分散到多个节点库中，每个节点中包含一部分数据。可以将数据的水平切分简单理解为按照数据行进行切分，就是将表中的某些行分到一个节点，将另外某些行切分到其他节点，从分布式的整体来看它们是一个整体的表</p><p>​<strong>垂直切分：</strong>一个数据库由很多表构成，每个表对应不同的业务，垂直切分是指按照业务将表进行分类并分不到不同的节点上，垂直拆分简单明了，拆分规则明确，应用程序模块清晰、明确、容易整合，但是某个表的数据量达到一定程度后扩展起来比较困难。</p><p>​<strong>混合切分：</strong>水平切分和垂直切分的结合</p><p>​<strong>3、分布式查询处理</strong></p><p>​分布式查询处理的任务就是把一个分布式数据库上的高层次查询映射为在本地数据库上的操作，查询的解析必须拆分为代数查询的关系运算序列，将要查询的数据定位到各节点，使得查询在各节点进行，最后通过网络通信的操作汇聚查询结果。</p><p>​<strong>4、分布式并发控制</strong></p><p>​并发控制是分布式事务管理的基本任务之一，其目的是保证分布式数据库中的多个事务并发高效、正确的执行。并发控制用来保证事务的可串行性，也就是说事务的并发执行等价于它们按某种次序的串行执行，从而为用户提供并发的透明性。进行并发控制的方法主要有三种：加锁并发控制、时间戳控制、乐观并发控制</p><ol><li>加锁并发控制应用广泛，但是容易发生死锁</li><li>时间戳控制消除了死锁，一旦发生冲突变回重启而不是等待，需要有全局的统一时钟</li><li>乐观并发控制对于冲突较少的系统较为合适，对于冲突多的系统则效率低下。</li></ol><h4 id="1-4-OLTP和OLAP"><a href="#1-4-OLTP和OLAP" class="headerlink" title="1.4 OLTP和OLAP"></a>1.4 OLTP和OLAP</h4><p>​在互联网时代，海量数据的存储和访问成为系统设计与使用的瓶颈，对于海量数据处理，按照使用场景，主要分为两种类型：联级事务处理（OLTP）和联级分析处理（OLAP）。</p><ul><li><strong>联级事务处理</strong>也称为面向事务的处理系统，其基本特征是原始数据可以立即传送到计算中心进行处理，在很短的时间内给出处理结果。</li><li><strong>联级分析处理</strong>是指通过多维的方式对数据进行分析、查询和报表，可以同数据挖掘工具、统计分析工具配合使用，增强决策分析功能。</li></ul><p>两者之间的区别:</p><table><thead><tr><th></th><th>OLTP</th><th>OLAP</th></tr></thead><tbody><tr><td>系统功能</td><td>日常交易处理</td><td>统计、分析、报表</td></tr><tr><td>DB设计</td><td>面向实时交易类应用</td><td>面向统计分析类应用</td></tr><tr><td>数据处理</td><td>当前的，最新的细节的，</td><td>历史的、聚集的、多维的、集成的</td></tr><tr><td>实时性</td><td>实时读写要求高</td><td>实时要求读写低</td></tr><tr><td>事务</td><td>强一致性</td><td>弱事务</td></tr><tr><td>分析要求</td><td>低，简单</td><td>高，复杂</td></tr></tbody></table><h4 id="1-5-关系型数据库和NoSQL"><a href="#1-5-关系型数据库和NoSQL" class="headerlink" title="1.5 关系型数据库和NoSQL"></a>1.5 关系型数据库和NoSQL</h4><p>​NoSQL数据库，全称为Not Only SQL,意思就是适用关系型数据库的时候就是用关系型数据库，不适用的时候也没必要非使用关系型数据库不可，可以考虑更加合适的数据存储，主要分为临时性键值存储（memcached，redis），永久性键值存储（redis），面向文档的数据库（mongoDB,CouchDB）,面向列的数据库（Cassandra，HBase），每种NoSQL都有其特有的使用场景及优点。</p><table><thead><tr><th></th><th>关系型数据库</th><th>NoSQL数据库</th></tr></thead><tbody><tr><td>特点</td><td>数据关系模型基于关系模型，结构化存储，完整性约束<br />基于二维表及其之间的联系，需要连接、并、交、差等操作<br />采用结构化的查询语言做数据读写<br />操作需要数据的一致性，需要事务甚至强一致性</td><td>非结构化的存储<br />基于多维关系模型<br />具有特色的使用场景</td></tr><tr><td>优点</td><td>保证数据的一致性<br />可以进行join等复杂查询<br />通用化，技术成熟</td><td>高并发、大数据下读写能力强<br />支持分布式，易于扩展，可伸缩<br />简单，弱结构化存储</td></tr><tr><td>缺点</td><td>数据读写必须经过sql解析，大量数据、高并发读写性能不足<br />对数据做读写，或修改数据结构时需要加锁，影响并发操作<br />无法适应非结构化存储<br />扩展困难<br />昂贵、复杂</td><td>join等复杂操作能力较弱<br />事务支持较弱<br />通用性差<br />无完整约束复杂业务场景支持较差</td></tr></tbody></table><h3 id="2、MyCat"><a href="#2、MyCat" class="headerlink" title="2、MyCat"></a>2、MyCat</h3><h4 id="2-1-MyCat是什么"><a href="#2-1-MyCat是什么" class="headerlink" title="2.1 MyCat是什么"></a>2.1 MyCat是什么</h4><ul><li><p>从定义和分类来看，它是一个开源的分布式数据库系统，是一个实现了 MySQL 协议的 Server</p></li><li><p>前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问</p></li><li><p>后端可以用 MySQL 原生（Native） 协议与多个 MySQL 服务器通信，也可以用 JDBC 协议与大多数主流数据库服务器通信</p></li><li><p>其核心功能是分表分库，即将一个大表水平分割为 N 个小表，存储在后端 MySQL 服务器里或者其他数据库里。</p></li></ul><blockquote><p>Mycat 发展到目前的版本，已经不是一个单纯的 MySQL 代理了，它的后端可以支持 MySQL、 SQL Server、Oracle、 DB2、 PostgreSQL 等主流数据库，也支持 MongoDB 这种新型 NoSQL 方式的存储，未来还会支持更多类型的存储。</p><p>而在最终用户看来，无论是那种存储方式，在 Mycat 里，都是一个传统的数据库表，支持标准的<br>SQL 语句进行数据的操作，这样一来，对前端业务系统来说，可以大幅降低开发难度，提升开发速度，在测试阶段，可以将一个表定义为任何一种 Mycat 支持的存储方式，比如 MySQL 的 MyASIM 表、内存表、或者MongoDB、 LevelDB 以及号称是世界上最快的内存数据库 MemSQL 上。</p><p>试想一下，用户表存放在 MemSQL 上，大量读频率远超过写频率的数据如订单的快照数据存放于 InnoDB 中，一些日志数据存放于 MongoDB 中，而且还能把 Oracle 的表跟 MySQL 的表做关联查询，你是否有一种不能呼吸的感觉？而未来，还能通过 Mycat 自动将一些计算分析后的数据灌入到 Hadoop 中，并能用 Mycat+Storm&#x2F;Spark Stream 引擎做大规模数据分析</p></blockquote><p>【不同角色对MyCat的理解】</p><ul><li>对于<strong>DBA</strong>而言，可以这么理解MyCat：</li></ul><blockquote><p>Mycat就是MySQL Server，而Mycat后面连接的MySQL Server，就好像是MySQL的存储引擎，如InnoDB，MyISAM等，因此，Mycat本身并不存储数据，数据是在后端的MySQL上存储的，因此数据可靠性以及事务都是MySQL保证的，简单说，Mycat就是MySQL最佳伴侣，它再一定程度上让MySQL拥有了能跟Oracle PK的能力。</p></blockquote><ul><li>对于<strong>软件工程师</strong>来说，可以这么理解MyCat:</li></ul><blockquote><p>Mycat就是一个近似等于MySQL的数据库服务器，你可以用连接MySQL的方式去连接Mycat，除了端口不同，默认的mycat端口是8066而不是mysql的3306，因此需要再连接字符串上增加端口信息，大多数情况下，可以用你熟悉的对象映射框架使用mycat，但建议对于分片表，尽量使用基础的SQL语句，因为这样能达到最佳性能，特别是几千万甚至几百亿条记录的情况下。</p></blockquote><ul><li>对于<strong>架构师</strong>来说，可以这么理解MyCat：</li></ul><blockquote><p>mycat是一个强大的数据库中间件，不仅仅可以用作读写分离、以及分库分表、容灾备份，而且可以用于多租户应用开发，云平台基础设施，让你的架构具备很强的适应性和灵活性，借助于即将发布的mycat只能优化模块，系统的数据访问瓶颈和热点一目了然，根据这些统计分析数据，你可以自动或手工调整后端存储，将不同的表映射到不同的存储引擎上，而整个应用的代码一行也不用改变。</p></blockquote><h4 id="2-2-MyCat原理"><a href="#2-2-MyCat原理" class="headerlink" title="2.2 MyCat原理"></a>2.2 MyCat原理</h4><p>​mycat的原理并不复杂，复杂的是代码</p><p>​mycat的原理中最重要的一个动作是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发送后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户</p><img src="/2022/10/08/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/cat1.png" class="" title="cat1 image"><p>​上述图片里，orders表被分为了三个分片datanode（简称dn），这三个分片是分布在两台MySQL Server上（Datahost），即datanode&#x3D;database@datahost方式，因此你可以用一台到N台服务器来分片，分片规则为（sharding rule）典型的字符串枚举分片规则，一个规则的定义是分片字段（sharding column）+ 分片函数（rule function），这里的分片字段为prov而分片函数为字符串枚举方式。</p><p>​当mycat收到一个SQL时，会先解析这个SQL，查找涉及到的表，然后看此表的定义，如果有分片规则，则获取到SQL里分片字段的值，并分配分片函数，得到该SQL对应的分片列表，然后将SQL发往这些分片去执行，最后收集和处理所有分片返回的结果数据，并输出到客户端，以select * from orders where prov &#x3D; ?语句为例，查到prov&#x3D;wuhan，按照分片函数，wuhan返回dn1，于是sql就发给了mysql1，去取db1上的查询结果，并返回给用户。</p><p>​如果上述sql改为select * from orders where prov in (wuhan,beijing)，那么，sql就会发给MySQL1和MySQL2去执行，然后结果集合并后输出给用户。但通常业务中我们的SQL会有order by以及limit翻页语法，此时就设计到结果集在mycat端的二次处理，这部分代码也比较复杂，而最复杂的则属两个表的join，为此，mycat提出了创新性的ER分片，全局表，HBT（human brain tech）人工智能的catlet，以及结合storm&#x2F;spark引擎等十八般武艺的解决办法</p><h4 id="2-3-应用场景"><a href="#2-3-应用场景" class="headerlink" title="2.3 应用场景"></a>2.3 应用场景</h4><p>mycat发展到现在，使用的场景已经很丰富，而且不断有新用户给出新的创新性的方案，以下是典型的应用场景：</p><ul><li>单纯的读写分离，此时配置最为简单，支持读写分离，主从切换</li><li>分库分表，对于超过1000万的表进行分片，最大支持1000亿的单表分片</li><li>多租户应用，每个应用一个库，但应用程序只连接mycat，从而不改造程序本身，实现多租户化</li><li>报表系统，借助mycat的分表能力，处理大规模报表的统计</li><li>整合多数据源</li><li>作为海量数据实时查询的一种简单有效方案，比如100亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时mycat可能是最简单有效的选择</li><li>数据库路由器，mycat基于mysql实例的连接池复用机制，可以让每一个应用最大程度地共享一个mysql实例地所有连接池，让数据库地并发访问能力大大提升</li></ul><h4 id="2-4-为什么使用mycat"><a href="#2-4-为什么使用mycat" class="headerlink" title="2.4 为什么使用mycat"></a>2.4 为什么使用mycat</h4><ol><li>java与数据库紧耦合</li><li>高访问量高并发对数据库的压力</li><li>读写请求数据不一致</li></ol><h4 id="2-5-数据库中间件对比"><a href="#2-5-数据库中间件对比" class="headerlink" title="2.5 数据库中间件对比"></a>2.5 数据库中间件对比</h4><table><thead><tr><th>对比项目</th><th>mycat</th><th>mango</th><th>cobar</th><th>heisenberg</th><th>altas</th><th>amoeba</th></tr></thead><tbody><tr><td>数据切片</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>读写分离</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>宕机自动切换</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>半支持，影响写</td><td>不支持</td></tr><tr><td>mysql协议</td><td>前后端支持</td><td>JDBC</td><td>前端支持</td><td>前后端支持</td><td>前后端支持</td><td>JDBC</td></tr><tr><td>支持的数据库</td><td>mysql，oracle，mongodb，postgresql</td><td>mysql</td><td>mysql</td><td>mysql</td><td>mysql</td><td>mysql，mongodb</td></tr><tr><td>社区活跃度</td><td>高</td><td>活跃</td><td>停滞</td><td>低</td><td>中等</td><td>停滞</td></tr><tr><td>文档资料</td><td>极丰富</td><td>较齐全</td><td>较齐全</td><td>较少</td><td>中等</td><td>缺少</td></tr><tr><td>是否开源</td><td>开源</td><td>开源</td><td>开源</td><td>开源</td><td>开源</td><td>开源</td></tr><tr><td>是否支持事务</td><td>弱XA</td><td>支持</td><td>单库强一致，分布式弱事务</td><td>单库强一致，多库弱事务</td><td>单库强一致，分布弱事务</td><td>不支持</td></tr></tbody></table><h3 id="3、MyCat核心概念"><a href="#3、MyCat核心概念" class="headerlink" title="3、MyCat核心概念"></a>3、MyCat核心概念</h3><p>​mycat是数据库中间件，就是介于数据库与应用之间，进行数据处理和交互的中间服务。从原有的一个库，被切分为多个分片数据库，所有的分片数据库集群构成了整个完整的数据库存储。</p><img src="/2022/10/08/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/cat2.png" class="" title="cat2 image"><p>​如上图所示，数据被分到多个分片数据库之后，应用如果需要读取数据，就要处理多个数据源的数据。如果没有数据库中间件，那么应用将直接面对分片集群，数据源切换、事务处理、数据聚合都需要应用直接处理，原本该是专注于业务的应用，将会话大量的工作来处理分片后的问题，最重要的是每个应用处理将是完全的重复造轮子。</p><h4 id="3-1-逻辑库"><a href="#3-1-逻辑库" class="headerlink" title="3.1 逻辑库"></a>3.1 逻辑库</h4><p>​对于实际应用而言，其实并不需要知道中间件的存在，开发人员只需要知道数据库的概念即可，所以数据库中间件可以被看作是一个或多个数据库集群构成的逻辑库。</p><p>​在云计算时代，数据库中间件可以以多租户的形式给一个或多个应用提供服务，每个应用访问的可能是一个独立或者共享的物理库，常见的如阿里云数据库服务器RDS</p><p>​<img src="/2022/10/08/study/%E6%A1%86%E6%9E%B6/MyCat/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/cat3.png" class="" title="cat3 image"></p><h4 id="3-2-逻辑表"><a href="#3-2-逻辑表" class="headerlink" title="3.2 逻辑表"></a>3.2 逻辑表</h4><p>​既然有逻辑库，那么就应该有逻辑表，在分布式数据库中，对应用来说，读写数据的表就是逻辑表。逻辑表可以使数据切分后，分步在一个或多个分片库中，也可以不做数据切分，不分片，只有一个表构成</p><h4 id="3-3-分片表"><a href="#3-3-分片表" class="headerlink" title="3.3 分片表"></a>3.3 分片表</h4><p>​分片表，是指那些原有的很大数据的表，需要切分到多个数据库的表，这样每一个分片都会有一部分数据，所有分片构成了完整的数据。</p><h4 id="3-4-非分片表"><a href="#3-4-非分片表" class="headerlink" title="3.4 非分片表"></a>3.4 非分片表</h4><p>​一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。</p><h4 id="3-5-ER表"><a href="#3-5-ER表" class="headerlink" title="3.5 ER表"></a>3.5 ER表</h4><p>​关系型数据库是基于实体关系模型之上，通过其描述了真实世界中事物与关系，mycat中的ER表就是来源于此。根据这一思路，提出了基于ER关系的数据分片策略，子表的记录与所关联的父表记录存放在同一个数据分片上，即子类依赖于父类，通过表分组保证数据join不会跨库操作。</p><p>​表分组是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则。</p><h4 id="3-6-全局表"><a href="#3-6-全局表" class="headerlink" title="3.6 全局表"></a>3.6 全局表</h4><p>​一个真实的业务系统中，往往存在大量的类似字典表的表，这些表基本上很少变动，字典表具有以下几个特点：</p><ol><li>变动不频繁</li><li>数据量总体变化不大</li><li>数据规模不大，很少有超过数十万条记录</li></ol><p>​对于这类的表，在分片的情况下，当业务表因为规模而进行分片以后，业务表与这些附属的字典表之间的关联，就成了比较棘手的问题，所以mycat中通过数据冗余来解决这类表的join，即所有的分片都有一份数据的拷贝，所有将字典表或者符合字典表特性的一些表定义为全局表。</p><p>​数据冗余是解决跨分片数据join的一种很好思路，也是数据切分规划的另外一条重要原则</p><h4 id="3-7-分片节点（dataNode）"><a href="#3-7-分片节点（dataNode）" class="headerlink" title="3.7 分片节点（dataNode）"></a>3.7 分片节点（dataNode）</h4><p>​数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点（dataNode）</p><h4 id="3-8-节点主机（dataHost）"><a href="#3-8-节点主机（dataHost）" class="headerlink" title="3.8 节点主机（dataHost）"></a>3.8 节点主机（dataHost）</h4><p>​数据切分后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（dataNode）所在的机器就是节点主机（dataHost），为了规避单节点主机并发数限制，尽量将读写压力高的分片节点（dataNode）均衡的放在不同的节点主机（dataHost）。</p><h4 id="3-9-分片规则"><a href="#3-9-分片规则" class="headerlink" title="3.9 分片规则"></a>3.9 分片规则</h4><p>​数据切分是指一个大表被分成若干个分片表，就需要一定的规则，这样按照某种规则把数据分到某个分片的规则就是分片规则，数据切分选择合适的分片规则非常重要，将极大的避免后续数据处理的难度。</p><h4 id="3-10-全局序列号"><a href="#3-10-全局序列号" class="headerlink" title="3.10 全局序列号"></a>3.10 全局序列号</h4><p>​数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号。</p><h4 id="3-11-多租户"><a href="#3-11-多租户" class="headerlink" title="3.11 多租户"></a>3.11 多租户</h4><p>​多租户技术或称多重租赁技术，是一种软件架构技术，它是在探讨与实现如何于多用户的环境下共用相同的系统或程序组件，并且扔可确保各用户间数据的隔离性。在云计算时代，多租户技术在共用的数据中心以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。目前各种各样的云计算服务就是这类技术范畴，例如阿里云数据库服务（RDS），阿里云服务器等等。</p><p>​多租户在数据存储上存在三种主要的方案，分别是：</p><ul><li><strong>独立数据库</strong>：一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本也高。<ul><li>优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求，如果出现故障，恢复数据比较简单。</li><li>缺点：增大了数据库的安装数量，随之带来维护成本和购置成本的增加</li></ul></li><li><strong>共享数据库，隔离数据架构</strong>：多个或者所有租户共享database，但是每一个租户一个schema<ul><li>优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可以支持更多的租户数量</li><li>缺点：如果出现故障，数据恢复比较困难，因此恢复数据库将牵扯到其他租户的数据，如果需要跨租户统计数据，存在一定困难</li></ul></li><li><strong>共享数据库，共享数据结构</strong>：租户共享同一个database，同一个schema，但在表中通过tenantID区分租户的数据。这是共享程度最高、隔离级别最低的模式<ul><li>优点：维护和购置成本最低，运行每个数据库支持的租户数量最多</li><li>缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量，数据备份和恢复最困难，需要逐表逐条备份和还原。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;mycat的前置知识及基本介绍&lt;/p&gt;</summary>
    
    
    
    <category term="框架" scheme="https://lyblog2022.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/categories/%E6%A1%86%E6%9E%B6/MyCat/"/>
    
    
    <category term="框架" scheme="https://lyblog2022.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyCat" scheme="https://lyblog2022.github.io/tags/MyCat/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8安装MySQL环境</title>
    <link href="https://lyblog2022.github.io/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/"/>
    <id>https://lyblog2022.github.io/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/</id>
    <published>2022-10-05T04:42:47.000Z</published>
    <updated>2022-10-05T07:11:02.311Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装MySQL环境，使用数据库软件远程链接，并配置主从连接</p><span id="more"></span><h3 id="1、删除环境自带MySQL"><a href="#1、删除环境自带MySQL" class="headerlink" title="1、删除环境自带MySQL"></a>1、删除环境自带MySQL</h3><p>使用yml命令删除已经安装的MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y mysql</span><br></pre></td></tr></table></figure><p>使用find命令找到残留文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p>使用rm -rf命令删除残留文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/selinux/targeted/active/modules/100/mysql</span><br><span class="line">rm -rf /usr/share/bash-completion/completions/mysql</span><br><span class="line">rm -rf /usr/share/selinux/targeted/default/active/modules/100/mysql</span><br></pre></td></tr></table></figure><img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/qw1.png" class="" title="qw1 image"><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</span><br><span class="line">yum install mysql80-community-release-el8-1.noarch.rpm</span><br></pre></td></tr></table></figure><p>查看mysql数据源是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/2.png" class="" title="qw2 image"></p><p>执行以下命令安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure><p>如果出现No match for argument: mysql-community-server<br>可执行 yum module disable mysql命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum module disable mysql // 禁用命令</span><br></pre></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>报错：</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/3.png" class="" title="qw3 image"></p><p>正确启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/systemctl start mysqld.service</span><br><span class="line">service mysqld status</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/4.png" class="" title="qw4 image"></p><h3 id="4、登录并修改密码"><a href="#4、登录并修改密码" class="headerlink" title="4、登录并修改密码"></a>4、登录并修改密码</h3><h4 id="4-1-显示随机密码"><a href="#4-1-显示随机密码" class="headerlink" title="4.1 显示随机密码"></a>4.1 显示随机密码</h4><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/5.png" class="" title="qw5 image"></p><p>方框中的密码即为生成的随机密码</p><h4 id="4-2-登录"><a href="#4-2-登录" class="headerlink" title="4.2 登录"></a>4.2 登录</h4><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/6.png" class="" title="qw6 image"></p><h4 id="4-3-修改密码"><a href="#4-3-修改密码" class="headerlink" title="4.3 修改密码"></a>4.3 修改密码</h4><p>【注意】密码先修改成”Root_2022”，因为我们随便修改密码时,一般都不满足它的策略，会报错误: <code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code></p><p>【解决方案】一定要先修改默认密码为: Root_2022 满足它的策略,再进行下面的操作:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Root_2022&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                        <span class="operator">|</span> <span class="keyword">Value</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> validate_password.check_user_name    <span class="operator">|</span> <span class="keyword">ON</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.dictionary_file    <span class="operator">|</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.length             <span class="operator">|</span> <span class="number">8</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.mixed_case_count   <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.number_count       <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.policy             <span class="operator">|</span> MEDIUM <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.special_char_count <span class="operator">|</span> <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+--------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your password&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="5、开放远程访问"><a href="#5、开放远程访问" class="headerlink" title="5、开放远程访问"></a>5、开放远程访问</h3><p>创建权限记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure><p>关闭系统防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewall;//查看防火墙状态</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/7.png" class="" title="qw7 image"></p><ul><li>systemctl stop firewalld.service （关闭防火墙）</li><li>systemctl start firewalld.service （开启防火墙）</li><li>systemctl disable firewalld.service （禁止防火墙自启动）</li><li>systemctl enable firewalld.service （防火墙随系统开启启动）</li></ul><p>使用navicat远程连接mysql</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/8.png" class="" title="qw8 image"></p><h3 id="6、配置主从"><a href="#6、配置主从" class="headerlink" title="6、配置主从"></a>6、配置主从</h3><p>现有两台服务器 <strong>192.168.213.164 和 192.168.213.165</strong>，在这两台服务器之间搭建一主一从MySQL，配置164位主，165为从</p><h4 id="6-1-主数据库修改"><a href="#6-1-主数据库修改" class="headerlink" title="6.1 主数据库修改"></a>6.1 主数据库修改</h4><p>修改&#x2F;etc&#x2F;my.cnf</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/9.png" class="" title="qw9 image"></p><ul><li>server-id值要唯一不能与从数据库重复；</li><li>log-bin 设置为 mysql-bin；</li></ul><p>关闭164的MySQL服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpt | grep mysql</span><br></pre></td></tr></table></figure><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/10.png" class="" title="qw10 image"></p><p>使用kill命令关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 33830</span><br></pre></td></tr></table></figure><p>再次启动mysql</p><h4 id="6-2-从数据库修改"><a href="#6-2-从数据库修改" class="headerlink" title="6.2 从数据库修改"></a>6.2 从数据库修改</h4><p>修改&#x2F;etc&#x2F;my.cnf</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/11.png" class="" title="qw11 image"></p><ul><li>server-id值要唯一不能与主数据库重复；</li><li>log-bin 设置为 mysql-bin；</li></ul><p>关闭165的MySQL服务</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/12.png" class="" title="qw12 image"></p><p>再次启动mysql</p><h4 id="6-3-查看主服务器的状态"><a href="#6-3-查看主服务器的状态" class="headerlink" title="6.3 查看主服务器的状态"></a>6.3 查看主服务器的状态</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span> Executed_Gtid_Set <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>      <span class="number">157</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="6-4-从服务器执行"><a href="#6-4-从服务器执行" class="headerlink" title="6.4 从服务器执行"></a>6.4 从服务器执行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.213.164&#x27;</span>, master_port<span class="operator">=</span><span class="number">3306</span>, master_user<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;password&#x27;</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">157</span>;</span><br></pre></td></tr></table></figure><ul><li>master_host 为主服务器的地址</li><li>master_port 为MySQL端口号。</li><li>master_user 为主服务器的用户名。</li><li>master_password 为用户密码。</li><li>master_log_file 为主数据库中File处的值。</li><li>master_log_pos 为主数据库中Position处的值。</li></ul><h4 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5 测试"></a>6.5 测试</h4><p>主：创建test的数据库</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/13.png" class="" title="qw13 image"></p><p>刷新从数据库：</p><p>​<img src="/2022/10/05/study/%E6%95%B0%E6%8D%AE%E5%BA%93/CentOS8%E5%AE%89%E8%A3%85MySQL%E7%8E%AF%E5%A2%83/14.png" class="" title="qw14 image"></p><h4 id="6-6-解除主从"><a href="#6-6-解除主从" class="headerlink" title="6.6 解除主从"></a>6.6 解除主从</h4><p>关闭主从：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>重置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  reset slave all;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>显示主从状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status;</span><br><span class="line">Empty set</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装MySQL环境，使用数据库软件远程链接，并配置主从连接&lt;/p&gt;</summary>
    
    
    
    <category term="CentOS8" scheme="https://lyblog2022.github.io/categories/CentOS8/"/>
    
    <category term="Mysql" scheme="https://lyblog2022.github.io/categories/CentOS8/Mysql/"/>
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="CentOS8" scheme="https://lyblog2022.github.io/tags/CentOS8/"/>
    
  </entry>
  
  <entry>
    <title>MySQL调优</title>
    <link href="https://lyblog2022.github.io/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/"/>
    <id>https://lyblog2022.github.io/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/</id>
    <published>2022-09-30T06:09:21.000Z</published>
    <updated>2022-10-04T06:05:58.126Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL调优</p><span id="more"></span><h3 id="1、MySQL调优金字塔"><a href="#1、MySQL调优金字塔" class="headerlink" title="1、MySQL调优金字塔"></a>1、MySQL调优金字塔</h3><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds1.png" class="" title="ds1 image"></p><p>很明显从图上可以看出，越往上走，难度越来越高，收益却是越来越小的。</p><h4 id="1-1-架构调优"><a href="#1-1-架构调优" class="headerlink" title="1.1 架构调优"></a>1.1 架构调优</h4><ul><li>系统设计时首先需要充分考虑业务的实际情况，是否可以把不适合数据库做的事情放到数据仓库、搜索引擎或者缓存中去做</li><li>考虑写的并发量有多大，是否需要采用分布式</li><li>考虑读的压力是否很大，是否需要读写分离</li><li>对于核心应用或者金融类的应用，需要额外考虑数据安全因素，数据是否不允许丢失</li></ul><p>在进行优化时，首先需要关注和优化的应该是架构，如果架构不合理，即使是DBA能做的事情其实是也是比较有限的。</p><h4 id="1-2-MySQL调优"><a href="#1-2-MySQL调优" class="headerlink" title="1.2 MySQL调优"></a>1.2 MySQL调优</h4><p>需要确认业务表结构设计是否合理，SQL语句优化是否足够，该添加的索引是否都添加了，是否可以剔除多余的索引等等</p><h4 id="1-3-硬件和OS调优"><a href="#1-3-硬件和OS调优" class="headerlink" title="1.3 硬件和OS调优"></a>1.3 硬件和OS调优</h4><p>需要对硬件和OS有着非常深刻的了解，仅仅就磁盘一项来说，一般非DBA能想到的调整就是SSD盘比用机械硬盘更好。DBA级别考虑的至少包括了，使用什么样的磁盘阵列（RAID）级别、是否可以分散磁盘IO、是否使用裸设备存放数据，使用哪种文件系统（目前比较推荐的是XFS），操作系统的磁盘调度算法选择，是否需要调整操作系统文件管理方面比如atime属性等等。</p><h3 id="2、查询性能优化"><a href="#2、查询性能优化" class="headerlink" title="2、查询性能优化"></a>2、查询性能优化</h3><p>前面的章节我们知道如何设计最优的库表结构、如何建立最好的索引，这些对于高性能来说是必不可少的。但这些还不够—还需要合理的设计查询。如果查询写得很糟糕，即使库表结构再合理、索引再合适，也无法实现高性能。</p><h4 id="2-1-慢查询"><a href="#2-1-慢查询" class="headerlink" title="2.1 慢查询"></a>2.1 慢查询</h4><p>慢查询日志，顾名思义，就是查询花费大量时间的日志，是指mysql记录所有执行超过long_query_time参数设定的时间阈值的SQL语句的日志。该日志能为SQL语句的优化带来很好的帮助。默认情况下，慢查询日志是关闭的，要使用慢查询日志功能，首先要开启慢查询日志功能。如何开启，我们稍后再说。</p><h5 id="2-1-1-慢查询基础-优化数据访问"><a href="#2-1-1-慢查询基础-优化数据访问" class="headerlink" title="2.1.1 慢查询基础-优化数据访问"></a>2.1.1 慢查询基础-优化数据访问</h5><p>查询性能低下最基本的原因是访问的数据太多。大部分性能低下的查询都可以通过减少访问的数据量的方式进行优化</p><p>对于低效的查询，一般通过下面两个步骤来分析总是很有效:</p><ol><li>确认应用程序是否在检索大量超过需要的数据。这通常意味着访问了太多的行，但有时候也可能是访问了太多的列。</li><li>确认MySQL服务器层是否在分析大量超过需要的数据行。</li></ol><h5 id="2-1-2-请求了不需要的数据"><a href="#2-1-2-请求了不需要的数据" class="headerlink" title="2.1.2 请求了不需要的数据"></a>2.1.2 请求了不需要的数据</h5><p>有些查询会请求超过实际需要的数据，然后这些多余的数据会被应用程序丢弃。这会给MySQL服务器带来额外的负担，并增加网络开销，另外也会消耗应用服务器的CPU和内存资源。</p><p><strong>查询不需要的记录</strong></p><p>一个常见的错误是常常会误以为MySQL会只返回需要的数据，实际上MySQL却是先返回全部结果集再进行计算。我们经常会看到一些了解其他数据库系统的人会设计出这类应用程序。</p><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds2.png" class="" title="ds2 image"></p><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds3.png" class="" title="ds3 image"></p><p>你认为MySQL会执行查询，并只返回他们需要的20条数据，然后停止查询。实际情况是MySQL会查询出全部的结果集，客户端的应用程序会接收全部的结果集数据，然后抛弃其中大部分数据。</p><p><strong>总是去除全部列</strong><br>取出全部列，会让优化器无法完成索引覆盖扫描这类优化，还会为服务器带来额外的I&#x2F;O、内存和CPU消耗。因此，一些DBA是严格禁止 select * 的写法的，这样做有时候还能避免某些列被修改带来的问题</p><p>尤其是使用二级索引，使用*的方式会导致回表，导致性能低下。</p><p><em>什么时候可以使用 select * ?</em></p><p>如果应用程序使用了某种缓存机制，或者有其他考虑，获取超过需要的数据也可能有其好处，但不要忘记这样做的代价是什么</p><p>获取并缓存所有的列的查询，相比多个独立的只获取部分列的查询可能就更有好处。</p><p><strong>重复查询相同的数据</strong></p><p>不断地重复执行相同的查询，然后每次都返回完全相同的数据。比较好的方案是，当初次查询的时候将这个数据缓存起来，需要的时候从缓存中取出，这样性能显然会更好。</p><h5 id="2-1-3-是否再扫描额外的记录"><a href="#2-1-3-是否再扫描额外的记录" class="headerlink" title="2.1.3 是否再扫描额外的记录"></a>2.1.3 是否再扫描额外的记录</h5><p>在确定查询只返回需要的数据以后，接下来应该看看查询为了返回结果是否扫描了过多的数据。对于MySQL，最简单的衡量查询开销的三个指标如下:</p><ul><li><strong>响应时间</strong>：<ul><li>响应时间是两个部分之和:服务时间和排队时间。</li><li>服务时间是指数据库处理这个查询真正花了多长时间。</li><li>排队时间是指服务器因为等待某些资源而没有真正执行查询的时间—-可能是等I&#x2F;O操作完成，也可能是等待行锁，等等。</li></ul></li><li><strong>扫描的行数和返回的行数</strong>：<ul><li>分析查询时，查看该查询扫描的行数是非常有帮助的。这在一定程度上能够说明该查询找到需要的数据的效率高不高。</li><li>理想情况下扫描的行数和返回的行数应该是相同的。但实际情况中这种“美事”并不多。例如在做一个关联查询时，服务器必须要扫描多行才能生成结果集中的一行。扫描的行数对返回的行数的比率通常很小，一般在1:1和10:1之间，不过有时候这个值也可能非常非常大。</li></ul></li><li><strong>扫描的行数和访问类型</strong><ul><li>在评估查询开销的时候，需要考虑一下从表中找到某一行数据的成本。</li><li>MySQL有好几种访问方式可以查找并返回一行结果。有些访问方式可能需要扫描很多行才能返回一行结果，也有些访问方式可能无须扫描就能返回结果。</li><li>在EXPLAIN语句中的type列反应了访问类型。访问类型有很多种，从全表扫描到索引扫描、范围扫描、唯一索引查询、常数引用等。这里列的这些，速度是从慢到快，扫描的行数也是从小到大。你不需要记住这些访问类型，但需要明白扫描表、扫描索引、范围访问和单值访问的概念。</li><li>如果查询没有办法找到合适的访问类型，那么解决的最好办法通常就是增加一个合适的索引，为什么索引对于查询优化如此重要了。索引让 MySQL以最高效、扫描行数最少的方式找到需要的记录。</li></ul></li></ul><p>一般 MySQL能够使用如下三种方式应用WHERE条件，从好到坏依次为:</p><ol><li><p>在索引中使用WHERE条件来过滤不匹配的记录。这是在存储引擎层完成的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> ... <span class="keyword">where</span> a<span class="operator">&gt;</span><span class="number">100</span> <span class="keyword">and</span> b<span class="operator">&lt;</span><span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>使用覆盖索引扫描来返回记录，直接从索引中过滤不需要的记录并返回命中的结果。这是在 MySQL服务器层完成的，但无须再回表查询记录。</p></li><li><p>从数据表中返回数据(存在回表)，然后过滤不满足条件的记录。这在 MySQL服务器层完成，MySQL需要先从数据表读出记录然后过滤。</p></li></ol><p>好的索引可以让查询使用合适的访问类型，尽可能地只扫描需要的数据行。</p><p><strong>如果发现查询需要扫描大量的数据但只返回少数的行，那么通常可以尝试下面的技巧去优化它:</strong></p><ol><li>使用索引覆盖扫描，把所有需要用的列都放到索引中，这样存储引擎无须回表获取对应行就可以返回结果了</li><li>改变库表结构。例如使用单独的汇总表。</li><li>重写这个复杂的查询，让MySQL优化器能够以更优化的方式执行这个查询。</li></ol><h5 id="2-1-4-慢查询配置"><a href="#2-1-4-慢查询配置" class="headerlink" title="2.1.4 慢查询配置"></a>2.1.4 慢查询配置</h5><p>我们已经知道慢查询日志可以帮助定位可能存在问题的SQL语句，从而进行SQL语句层面的优化。但是默认值为关闭的，需要我们手动开启。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds4.png" class="" title="ds4 image"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">0</span>：关闭；<span class="number">1</span>：开启</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> slow_query_log<span class="operator">=</span><span class="number">1</span>; </span><br></pre></td></tr></table></figure><p>但是多慢算慢？MySQL中可以设定一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志中。long_query_time参数就是这个阈值。默认值为10，代表10秒。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds5.png" class="" title="ds5 image"></p><p>同时对于运行的SQL语句没有使用索引，则MySQL数据库也可以将这条SQL语句记录到慢查询日志文件，控制参数是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%log_queries_not_using_indexes%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log_file%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds6.png" class="" title="ds6 image"></p><p>​<img src="/2022/09/30/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E8%B0%83%E4%BC%98/ds7.png" class="" title="ds7 image"></p><p>【小结】</p><ul><li>**slow_query_log **启动停止慢查询日志</li><li>**slow_query_log_file **指定慢查询日志得存储路径及文件（默认和数据文件放一起）</li><li>**long_query_time **指定记录慢查询日志SQL执行时间得伐值（单位：秒，默认10秒）</li><li>**log_queries_not_using_indexes  **是否记录未使用索引的SQL</li><li>**log_output **日志存放的地方可以是[TABLE][FILE][FILE,TABLE]</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL调优&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中的索引</title>
    <link href="https://lyblog2022.github.io/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>https://lyblog2022.github.io/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/</id>
    <published>2022-09-20T06:12:23.000Z</published>
    <updated>2022-09-22T02:42:28.972Z</updated>
    
    <content type="html"><![CDATA[<p>InnoDB存储引擎支持以下几种常见的索引：B+树索引、全文索引、哈希索引，其中比较关键的是B+树索引</p><span id="more"></span><h3 id="1、B-树索引"><a href="#1、B-树索引" class="headerlink" title="1、B+树索引"></a>1、B+树索引</h3><p>InnoDB中的索引自然也是按照B+树来组织的，前面我们说过B+树的叶子节点用来放数据的，但是放什么数据呢？索引自然是要放的，因为B+树的作用本来就是就是为了快速检索数据而提出的一种数据结构，不放索引放什么呢？但是数据库中的表，数据才是我们真正需要的数据，索引只是辅助数据，甚至于一个表可以没有自定义索引。InnoDB中的数据到底是如何组织的？</p><h4 id="1-1-聚集索引-x2F-聚簇索引"><a href="#1-1-聚集索引-x2F-聚簇索引" class="headerlink" title="1.1 聚集索引&#x2F;聚簇索引"></a>1.1 聚集索引&#x2F;聚簇索引</h4><p>InnoDB中使用了聚集索引，就是将表的主键用来构造一棵B+树，并且将整张表的行记录数据存放在该B+树的叶子节点中。也就是所谓的索引即数据，数据即索引。由于聚集索引是利用表的主键构建的，所以每张表只能拥有一个聚集索引。</p><p>聚集索引的叶子节点就是数据页。换句话说，数据页上存放的是完整的每行记录。因此聚集索引的一个优点就是：<strong>通过过聚集索引能获取完整的整行数据</strong>。另一个优点是：<strong>对于主键的排序查找和范围查找速度非常快</strong>。</p><p>聚集索引的缺陷也比较明显：<strong>聚簇索引只能在搜索条件是主键值时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。</strong></p><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds1.png" class="" title="ds1 image"></p><p>如果我们没有定义主键呢？MySQL会使用唯一性索引，没有唯一性索引，MySQL也会创建一个隐含列RowID来做主键，然后用这个主键来建立聚集索引。</p><h4 id="1-2-二级索引-x2F-辅助索引"><a href="#1-2-二级索引-x2F-辅助索引" class="headerlink" title="1.2 二级索引&#x2F;辅助索引"></a>1.2 二级索引&#x2F;辅助索引</h4><p>如果我们想以别的列作为搜索条件怎么办？我们一般会建立多个索引，这些索引被称为辅助索引&#x2F;二级索引。</p><p>每建立一个索引，就会有一颗B+树，对于辅助索引，叶子节点并不包含行记录的全部数据。叶子节点除了包含键值以外，每个叶子节点中的索引行中还包含了一个书签( bookmark)。该书签用来告诉InnoDB存储引擎哪里可以找到与索引相对应的行数据。因此InnoDB存储引擎的辅助索引的书签就是相应行数据的聚集索引键。</p><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds2.png" class="" title="ds2 image"></p><p>比如辅助索引index(node)，那么叶子节点中包含的数据就包括了(note和主键)。</p><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds3.png" class="" title="ds3 image"></p><h4 id="1-3-回表"><a href="#1-3-回表" class="headerlink" title="1.3 回表"></a>1.3 回表</h4><p>辅助索引的存在并不影响数据在聚集索引中的组织，因此每张表上可以有多个辅助索引。当通过辅助索引来寻找数据时，InnoDB存储引擎会遍历辅助索引并通过叶级别的指针获得指向主键索引的主键，然后再通过主键索引（聚集索引）来找到一个完整的行记录。这个过程也被称为 <strong>回表</strong> 。也就是根据辅助索引的值查询一条完整的用户记录需要使用到2棵B+树—-一次辅助索引，一次聚集索引。</p><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds4.png" class="" title="ds4 image"></p><p>**为什么我们还需要一次回表操作呢?**直接把完整的用户记录放到辅助索引d的叶子节点不就好了么？如果把完整的用户记录放到叶子节点是可以不用回表，但是太占地方了，相当于每建立一棵B+树都需要把所有的用户记录再都拷贝一遍，这就有点太浪费存储空间了。而且每次对数据的变化要在所有包含数据的索引中全部都修改一次，性能也非常低下。</p><p>很明显，回表的记录越少，性能提升就越高，需要回表的记录越多，使用二级索引的性能就越低，甚至让某些查询宁愿使用全表扫描也不使用二级索引。</p><p><strong>那什么时候采用全表扫描的方式，什么时候使用采用二级索引 + 回表的方式去执行查询呢？</strong>这个就是查询优化器做的工作，查询优化器会事先对表中的记录计算一些统计数据，然后再利用这些统计数据根据查询的条件来计算一下需要回表的记录数，需要回表的记录数越多，就越倾向于使用全表扫描，反之倾向于使用二级索引 + 回表的方式。</p><h4 id="1-4-联合索引-x2F-复合索引"><a href="#1-4-联合索引-x2F-复合索引" class="headerlink" title="1.4 联合索引&#x2F;复合索引"></a>1.4 联合索引&#x2F;复合索引</h4><p>前面我们对索引的描述，隐含了一个条件，那就是构建索引的字段只有一个，但实践工作中构建索引的完全可以是多个字段。所以，将表上的多个列组合起来进行索引我们称之为联合索引或者复合索引，比如index(a,b)就是将a,b两个列组合起来构成一个索引。</p><p>千万要注意一点，建立联合索引只会建立1棵B+树，多个列分别建立索引会分别以每个列则建立B+树，有几个列就有几个B+树，比如，index(note)、index(b)，就分别对note,b两个列各构建了一个索引。</p><p>而如果是index(note,b)在索引构建上，包含了两个意思：</p><ol><li>先把各个记录按照note列进行排序。</li><li>在记录的note列相同的情况下，采用b列进行排序</li></ol><p>从原理可知，为什么有最佳左前缀法则，就是这个道理</p><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds5.png" class="" title="ds5 image"></p><h4 id="1-5-覆盖索引"><a href="#1-5-覆盖索引" class="headerlink" title="1.5 覆盖索引"></a>1.5 覆盖索引</h4><p>既然多个列可以组合起来构建为联合索引，那么辅助索引自然也可以由多个列组成。</p><p>InnoDB存储引擎支持覆盖索引(covering index，或称索引覆盖)，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录(回表)。使用覆盖索引的一个好处是辅助索引不包含整行记录的所有信息，故其大小要远小于聚集索引，因此可以减少大量的IO操作。所以记住，覆盖索引并不是索引类型的一种。</p><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds6.png" class="" title="ds6 image"></p><h3 id="2、哈希索引"><a href="#2、哈希索引" class="headerlink" title="2、哈希索引"></a>2、哈希索引</h3><p>InnoDB存储引擎除了我们前面所说的各种索引，还有一种自适应哈希索引，我们知道B+树的查找次数,取决于B+树的高度,在生产环境中,B+树的高度一般为3、4层,故需要3、4次的IO查询。</p><p>所以在InnoDB存储引擎内部自己去监控索引表，如果监控到某个索引经常用，那么就认为是热数据，然后内部自己创建一个hash索引，称之为自适应哈希索引( Adaptive Hash Index,AHI)，创建以后，如果下次又查询到这个索引，那么直接通过hash算法推导出记录的地址，直接一次就能查到数据，比重复去B+tree索引中查询三四次节点的效率高了不少。</p><p>InnoDB存储引擎使用的哈希函数采用除法散列方式，其冲突机制采用链表方式。注意，对于自适应哈希索引仅是数据库自身创建并使用的，我们并不能对其进行干预。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engine innodb status</span><br></pre></td></tr></table></figure><p>​<img src="/2022/09/20/study/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/ds7.png" class="" title="ds7 image"></p><p>哈希索引只能用来搜索等值的查询,如 SELECT* FROM table WHERE index co&#x3D;xxx。而对于其他查找类型,如范围查找,是不能使用哈希索引的,</p><p>因此这里出现了non-hash searches&#x2F;s的情况。通过 hash searches: non- hash searches可以大概了解使用哈希索引后的效率。</p><p><strong>innodb_adaptive_hash_index</strong>来考虑是禁用或启动此特性,默认AHI为开启状态。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;InnoDB存储引擎支持以下几种常见的索引：B+树索引、全文索引、哈希索引，其中比较关键的是B+树索引&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础</title>
    <link href="https://lyblog2022.github.io/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <id>https://lyblog2022.github.io/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-19T06:17:26.000Z</published>
    <updated>2022-09-20T06:16:43.901Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的范式化、反范式化设计，字段数据类型优化，及B+树的简述</p><span id="more"></span><h3 id="1、范式化设计"><a href="#1、范式化设计" class="headerlink" title="1、范式化设计"></a>1、范式化设计</h3><h4 id="1-1-什么是范式"><a href="#1-1-什么是范式" class="headerlink" title="1.1 什么是范式"></a>1.1 什么是范式</h4><ul><li>范式：来自英文Normal Form 简称NF</li><li>可以理解为一张数据表的表结构所符合的某种设计标准的级别</li><li>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式（4NF）和第五范式（完美范式）</li><li>满足最低要求的范式是第一范式（1NF），在第一范式的基础上进一步满足更多规范的要求为第二范式（2NF），其余范式以此类推，数据库一般只需要满足第三范式（3NF）就可以了</li></ul><h4 id="1-2-第一范式（1NF）"><a href="#1-2-第一范式（1NF）" class="headerlink" title="1.2 第一范式（1NF）"></a>1.2 第一范式（1NF）</h4><ul><li>定义：属于第一范式关系的所有属性不可再分，即数据项不可分</li><li>理解：第一范式属于强调表的原子性，是其他范式的基础</li><li>示例：一张表有一个name-age列，这个列具有两个属性，一个name，一个age，所以不符合第一范式，当把name和age拆分，这张表就符合第一范式了</li></ul><p>​<img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds1.png" class="" title="ds1 image"></p><ul><li>要求<ul><li>每一列属性都是不可再分的属性值，确保每一列的原子性</li><li>两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据</li><li>单一属性的列为基本数据类型构成</li><li>设计出来的表都是简单的二维表</li></ul></li></ul><h4 id="1-3-第二范式（2NF）"><a href="#1-3-第二范式（2NF）" class="headerlink" title="1.3 第二范式（2NF）"></a>1.3 第二范式（2NF）</h4><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式必须先满足第二范式</p><p>第二范式要求实体的属性完全依赖于主关键字</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds2.png" class="" title="ds2 image"><h4 id="1-4-第三范式（3NF）"><a href="#1-4-第三范式（3NF）" class="headerlink" title="1.4 第三范式（3NF）"></a>1.4 第三范式（3NF）</h4><p>满足第三范式（3NF）必须先满足第二范式（2NF）</p><p>第三范式（3NF）要求一个数据库表中不包含已在其他表中包含的非主关键字信息，即数据不能存在传递关系，每个属性都跟随主键有直接关系而不是间接关系</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds3.png" class="" title="ds3 image"><p>产品表：</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds4.png" class="" title="ds4 image"><p>这里当产品表内的产品名称发送变化时，订单表内的产品名称并不会发生变化，所以不符合第三范式，只有删除订单表的产品名称字段，才符合第三范式</p><h3 id="2、反范式化设计"><a href="#2、反范式化设计" class="headerlink" title="2、反范式化设计"></a>2、反范式化设计</h3><p>完全符合范式化的设计并不是完美无瑕，在实际业务查询中会有大量存在着表的关联查询，而表设计都做成了范式化设计，大量的表关联很多时候非常影响查询的性能</p><p><strong>反范式化就是违反范式化设计：</strong></p><ol><li>为了性能和读取效率而适当的违反对数据库设计范式的要求</li><li>为了查询的性能，允许存在部分冗余数据</li></ol><p><strong>反范式化就是使用空间来换取时间</strong></p><h3 id="3、范式化和范式化对比"><a href="#3、范式化和范式化对比" class="headerlink" title="3、范式化和范式化对比"></a>3、范式化和范式化对比</h3><table><thead><tr><th></th><th>范式设计</th><th>反范式设计</th></tr></thead><tbody><tr><td>更新操作</td><td>快</td><td>慢</td></tr><tr><td>数据重复度</td><td>低</td><td>高</td></tr><tr><td>内存占用</td><td>小</td><td>大</td></tr><tr><td>查询表关联</td><td>多</td><td>少</td></tr><tr><td>查询索引命中</td><td>较少命中</td><td>更多命中</td></tr></tbody></table><ol><li>范式化的更新操作通常比反范式化要快（字段少）</li><li>当数据较好的范式化时，就只有很少或者没有重复数据，所以只需要修改更少的数据</li><li>范式化的表通常更小，所以占据内存更少</li><li>范式化设计的缺点是通常需要关联，稍微复杂一些的查询语句再符合范式的表上都可能需要至少一次关联</li><li>复杂的查询语句也可能使一些索引策略无效，例如，范式化可能将列存放在不同的表中，而这些列如果再一个表中本可以属于同一个索引</li></ol><h3 id="4、常见的反范式实现"><a href="#4、常见的反范式实现" class="headerlink" title="4、常见的反范式实现"></a>4、常见的反范式实现</h3><h4 id="4-1-缓存与汇总数据"><a href="#4-1-缓存与汇总数据" class="headerlink" title="4.1 缓存与汇总数据"></a>4.1 缓存与汇总数据</h4><p><strong>“缓存”来表示存储那些可以比较简单的从其他表获取数据的表</strong></p><p>比如：从父表冗余一些数据到字表的</p><p><strong>“汇总”则保存的是使用 group by 语句聚合数据的表</strong></p><p>如果需要显示每个用户发了多少消息，可以每次执行一个对用户发送消息进行 count 的子查询来计算并显示，也可以在 user 表中建一个消息发送数目的专门列，每当用户发新消息时更新这个值</p><p>在使用缓存表和汇总表时，有个关键点是如何维护缓存表和汇总表中的数据，常用的有两种方式，实时维护数据和定期重建，这个取决于应用程序，不过一般来说，缓存表用实时维护数据更多点，往往一个事务中同时更新数据本表和缓存表，汇总表则用定期重建更多，使用定时任务对汇总表进行更新</p><h4 id="4-2-计数器表设计"><a href="#4-2-计数器表设计" class="headerlink" title="4.2 计数器表设计"></a>4.2 计数器表设计</h4><p>计数器表在 web 应用中很常见，如网站点击数，用户的朋友数、文件下载次数等，对于高并发下的处理，首先可以创建一张独立的表存储计数器，这样可使计数器表小且快，并且可以使用一些更高级的技巧</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds5.png" class="" title="ds5 image"><p>如：有一个计数器表，只有一行数据，记录网站的点击次数，网站的每次点击都会导致对计数器进行更新，问题在于，对于任何想要更新这一行的事务来说，这条记录上都有一个全局的互斥锁（mutex），这会使得这些事务只能串行执行，会严重显示系统的并发能力</p><p>改进：可以将计数器保存再多行中，每次随机选择一行进行更新。具体实现上，一个增加一个槽（slot）字段，然后预先在这张表增加100行或者更多数据，当对计数器更新时，选择一个随机的槽（slot）进行更新即可</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds6.png" class="" title="ds6 image"><h3 id="5、字段数据类型优化"><a href="#5、字段数据类型优化" class="headerlink" title="5、字段数据类型优化"></a>5、字段数据类型优化</h3><h4 id="5-1-字段优化基本原则"><a href="#5-1-字段优化基本原则" class="headerlink" title="5.1 字段优化基本原则"></a>5.1 字段优化基本原则</h4><ul><li><strong>更小的通常更好</strong></li></ul><p>一般情况下，尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期也更少</p><p>如：一个类型既可以用字符串也可以使用整形，<strong>优先选择整型</strong>。因为字符串牵涉到了字符集及校对规则等</p><ul><li><strong>简单</strong></li></ul><p>简单数据类型的操作通常需要更少的CPU周期。如，整型比字符操作代价更低，因为字符集和校对规则使字符比较比整型比较更复杂。如应该使用MySQL内建的类型而不是字符串来存储日期和时间</p><ul><li><strong>尽量避免NULL</strong></li></ul><p>通常情况下最好指定列为NOT NULL，除非真的需要存储NULL值</p><p>如果查询中包含可为NULL的列，对MySQL来说更难优化，因为可为NULL的列使得索引、索引统计和值比较都更复杂。可为NULL的列会使用更多的存储空间，在MySQL里也需要特殊处理。当可为NULL的列被索引时，每个索引记录都需要一个额外的字节</p><p>通常把可为NULL的列改为NOT NULL带来的性能提升比较小，所以调优时没必要首先再现有的schema中查找并修改掉这种情况，除非确定这会导致问题。但是，如果计划在列上建索引，就应该尽量避免设计成可为NULL的列</p><h4 id="5-2-Int-x2F-整数类型"><a href="#5-2-Int-x2F-整数类型" class="headerlink" title="5.2 Int&#x2F;整数类型"></a>5.2 Int&#x2F;整数类型</h4><p>存储整数，可以使用这几种整数类型：tinyint、smallint、mediumint、int、bigint。分别使用8、16、24、32、64位存储空间，即1、2、3、4、8个字节</p><p>同时整数类型有可选的unsigned属性，表示不允许负值，这大致可以使正数的上限提高一倍。</p><p>有符号和无符号类型使用相同的存储空间，并具有相同的性能，因此可以根据实际情况选择合适的类型</p><p>另，integer和int存储及大小没有任何差别，只是为了业务上的区分</p><p>MySQL可以为整数类型指定宽度，例如INT(11)，对大多数应用这是没有意义的，它不会限制值的合法范围，只是规定了MySQL的一些交互工具（如MySQL命令行客户端）用来显示字符的个数，对于存储和计算来说，INT(1)和INT(20)是相同的</p><p>MySQL中没有long类型，对应的只有bigint</p><h4 id="5-3-实数类型"><a href="#5-3-实数类型" class="headerlink" title="5.3 实数类型"></a>5.3 实数类型</h4><p>实数是带有小数部分的数字。MySQL既支持精确类型的存储Decimal类型，也支持不精确类型存储Float和Double类型（浮点类型）.</p><p>Decimal类型用于存储精确的小数，本质上MySQL是以字符串形式存放的，所以CPU不支持对Decimal的直接计算，只是在MySQL中自身实现了Decimal的高精度计算。相对而言，CPU直接支持原生浮点计算，所以浮点运算明显更快</p><p>浮点类型再存储同样范围的值时，通常比Decimal使用更少的空间，Float使用4个字节存储，Double占用8个字节，Decimal里面存储65位数字，Decimal对于列的空间消耗比较大，另外Double比Float有更高的精度和更大 的范围</p><p>【选择】</p><ol><li>精度不敏感和需要快速运算的时候。选择Float和Double</li><li>应该尽量只在对小数进行精确计算时才使用Decimal，例如存储金融数据</li><li>在数据量比较大且运行精度要求较高，可考虑使用Bigint代替Decimal，将需要存储的货币单位根据小数的位数乘以相应的倍数即可。假设存储财务数据要精确到万分之一，则可以把所有金额乘以一百万，然后将结果存储在Bigint里 ，这样可避免浮点计算不精确和Decimal精确计算代价高的问题</li></ol><h4 id="5-4-字符串类型"><a href="#5-4-字符串类型" class="headerlink" title="5.4 字符串类型"></a>5.4 字符串类型</h4><p>MySQL支持多种字符串类型，包括varchar和char类型、blob和text类型、enum(枚举)和set类型</p><h5 id="5-4-1-Varchar和Char"><a href="#5-4-1-Varchar和Char" class="headerlink" title="5.4.1 Varchar和Char"></a>5.4.1 Varchar和Char</h5><p><strong>Varchar</strong></p><p>Varchar类型用于存储可变长字符串，是最常见的字符串数据类型。其比定长类型更节省空间，因为仅使用必要的空间。在内部实现上，Varchar需要使用1或2个额外字节记录字符串的长度，如果列的最大长度小于等于255字节，则使用用1个字节表示，否则使用2个字节</p><p>Varchar节省了存储空间，所以对性能有帮助，但是，由于行是变长的，在update新值比旧数据长时，使行变得比原来长，就可能导致需要做额外的工作，如果一行占用的空间增长，并且在页内没有更多的空间可以存储，在这种情况下，MyISAM会将行拆成不同的片段存储</p><p><strong>Char</strong></p><p>Char类型是定长的，MySQL总是根据定义的字符串长度分配足够的空间。当存储Char值时，MySQL会删除所有的末尾空格，Char值会根据需要采用空格进行填充以方便比较</p><p><strong>Char和VarChar的选择</strong></p><p>在Char和VarChar的选择上，下列情况下使用Varchar是比较合适的</p><ul><li>字符串列的最大长度比平均长度大很多，列的更新很少</li><li>使用了像UTF-8这样复杂的字符集，每个字符都使用不同的字节数进行存储</li></ul><p>下列情况，使用Char更合适：</p><ul><li><p>Char适合存储很短的字符串，或者所有值定长或都接近同一个长度。如char非常适合存储密码的MD5值，因为这是定长的值，对于经常变更的数据，Char也比Varchar更好，因为定长的Char类型不容易产生碎片</p></li><li><p>对于非常短的列，Char也比Varchar在存储空间上也更有效率，如用char(1)存储只有Y和N的值，如果采用单字节字符集只需要一个字节，但是Varchar却需要两个字节，因为还有一个记录长度的额外字节</p></li></ul><h5 id="5-4-2-Blob和Text类型"><a href="#5-4-2-Blob和Text类型" class="headerlink" title="5.4.2 Blob和Text类型"></a>5.4.2 Blob和Text类型</h5><p>Blob和Text都是为存储很大的数据而设计的字符串类型，分别采用二进制和字符方式存储</p><p>与其他类型不同，MySQL会把每个Blob和Text值当做一个独立的对象处理，存储引擎再存储时通常会做特殊处理。当Blob和Text值太大时，InnoDB会使用专门的“外部”存储区域来进行存储，此时每个值再行内需要1~4个字节存储一个指针，然后在外部存储区域存储实际的值</p><p><strong>二者的区别</strong></p><ul><li>blob存储的是二进制数据，没有排序规则或字符集</li><li>Text类型有字符集和排序规则</li></ul><p><strong>使用要慎重</strong></p><ol><li>Blob和Text值会引起一些性能问题，所以尽量避免使用</li><li>一定要用的时候，建议把Blob或Text列分离到单独的表</li><li>在不必要的时候避免检索大型的Blob或Text的值。如Select * 查询就不是很好的想法，除非能够确定作为约束条件的 where子句只会找到所需要的数据行；否则，很可能毫无目的的在网络上传输大量数据。建议可以搜索索引，决定需要的哪些数据行，然后从符合条件的数据行中检索Blob或Text值</li><li>还可以使用合成的（Synthetic）索引来提高大文本字段（Blob或Text）的查询性能。简单说，合成索引是根据大文本字段的内容建立一个散列值，并把这个值存储在单独的数据列中，接下来就可以通过检索散列值找到数据。但是，这种技术只能用于精确匹配的查询（散列值对于类型&lt;或&gt;&#x3D;等范围搜索操作符是没有用处的）。可以使用MD5函数生成散列值，也可以使用SHA1（或CRC32），或者使用自己的应用程序逻辑来计算散列值</li></ol><h4 id="5-5-枚举类型"><a href="#5-5-枚举类型" class="headerlink" title="5.5 枚举类型"></a>5.5 枚举类型</h4><p>如果表中的字段的取值是固定几个字符串，可以使用枚举列代替常用的字符串类型。</p><p>枚举列可以把一些不重复的字符串存储成一个预定义的集合。MySQL在存储枚举时非常紧凑，会根据列表值的数量压缩到一个或者两个字节中，MySQL在内部会将每个值在列表中的位置保存为整数，这样的话可以让表的大小大为缩小。</p><p>具体枚举使用见官网地址：<a href="https://dev.mysql.com/doc/refman/5.7/en/enum.html">https://dev.mysql.com/doc/refman/5.7/en/enum.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">enum_test(e ENUM(<span class="string">&#x27; fish&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">enum_test(e) <span class="keyword">VALUES</span>(<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>因为枚举列实际存储为整数，而不是字符串，所以不要使用数字作为ENUM枚举常量，这种双重性很容易导致混乱，例如ENUM( ‘1’,’2’,’3’)。</li><li>枚举字段是按照内部存储的整数而不是定义的字符串进行排序的，所以尽量按照需要的顺序来定义枚举列。</li></ol><h4 id="5-6-日期和时间类型"><a href="#5-6-日期和时间类型" class="headerlink" title="5.6 日期和时间类型"></a>5.6 日期和时间类型</h4><p>MySQL可以使用许多类型来保存日期和时间值，例如YEAR和 DATE以及DATETIME和TIMESTAMP。MySQL能存储的最小时间粒度为秒。</p><p>datetime 存储日期范围：1001年~9999年</p><p>timestamp 存储日期范围：1970年~2038年,并且跟时区有关系。</p><p>如果需要存储比秒更小粒度的日期和时间值怎么办？MySQL目前没有提供合适的数据类型，但是可以使用自己的存储格式：可以使用BIGINT类型存储微秒级别的时间截，或者使用DOUBLE存储秒之后的小数部分。</p><h3 id="6、命名规范"><a href="#6、命名规范" class="headerlink" title="6、命名规范"></a>6、命名规范</h3><ul><li><p>可读性原则：</p><ul><li>数据库、表、字段的命名要遵守可读性原则，尽可能少使用或者不使用缩写。</li><li>对象的名字应该能够描述它所表示的对象。例如：表的名称应该能够体现表中存储的数据内容，最好是遵循“业务名称_表的作用”；对于存储过程存储过程应该能够体现存储过程的功能。库名与应用名称尽量一致。</li><li>表达是与否概念的字段，应该使用is_xxx的方式命名，数据类型是unsigned tinyint（1表示是，0表示否）。</li></ul></li><li><p>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><ul><li>说明：MySQL在Windows下不区分大小写，但在Linux下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</li></ul></li><li><p>表名不使用复数名词</p></li><li><p>数据库、表、字段的命名禁用保留字，如desc、range、match之类</p></li><li><p><strong>主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名则为idx_字段名。</strong></p></li></ul><h3 id="7、MySQL中的索引"><a href="#7、MySQL中的索引" class="headerlink" title="7、MySQL中的索引"></a>7、MySQL中的索引</h3><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。可以得到索引的本质： <strong>索引是数据结构</strong> 。InnoDB存储引擎支持以下几种常见的索引：B+树索引、全文索引、哈希索引，其中比较关键的是B+树索引</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds7.png" class="" title="ds7 image"><p><strong>为什么HashMap不适合做数据库索引？</strong></p><ol><li>hash表只能匹配是否相等，不能实现范围查找；</li><li>当需要按照索引进行order by时，hash值没办法支持排序；</li><li>组合索引可以支持部分索引查询，如(a,b,c)的组合索引，查询中只用到了a和b也可以查询的，如果使用hash表，组合索引会将几个字段合并hash，没办法支持部分索引；</li><li>当数据量很大时，hash冲突的概率也会非常大。</li></ol><h3 id="8、B-Tree"><a href="#8、B-Tree" class="headerlink" title="8、B+Tree"></a>8、B+Tree</h3><p>B+树索引就是传统意义上的索引，这是目前关系型数据库系统中查找最常用和最为有效的索引。B+树索引的构造类似于二叉树，根据键值（Key Value）快速找到数据。注意B+树中的B不是代表二叉(binary)，而是代表平衡(balance)，因为B+树是从最早的平衡二叉树演化而来，但是B+树不是一个二叉树。</p><p>下图就是一颗平衡二叉查找树</p><p>借助网页工具：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualization (usfca.edu)</a></p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds8.png" class="" title="ds8 image"><p>现将其改造成B+树</p><p>树的阶数表示一个节点最多能有多少个子节点。</p><p>每个叶子页（LeafPage）存储了实际的数据，如下图中有的叶子页就存放了3条数据记录，当然可以更多，叶子节点由小到大（有序）串联在一起，叶子页中的数据也是排好序的；</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds9.png" class="" title="ds9 image"><p>从AVL到B+树的变化可知，如果节点特别多的话，AVL树的高度远远高于B+树。</p><p>可以归纳出B+树的几个特征：</p><ol><li>相同节点数量的情况下，B+树高度远低于平衡二叉树；</li><li>非叶子节点只保存索引信息和下一层节点的指针信息，不保存实际数据记录；</li><li>每个叶子页（LeafPage）存储了实际的数据，比如上图中每个叶子页就存放了3条数据记录，当然可以更多，叶子节点由小到大（有序）串联在一起，叶子页中的数据也是排好序的；</li><li>相邻的叶子节点之间用指针相连</li></ol><p><strong>注意：叶子节点中的数据在物理存储上完全可以是无序的，仅仅是在逻辑上有序（通过指针串在一起）。</strong></p><p>一棵m阶的B+树完整定义如下：</p><ul><li>每个节点最多可以有 m 个元素；</li><li>除了根节点外，每个节点最少有 (m&#x2F;2) 个元素；</li><li>如果根节点不是叶节点，那么它最少有 2 个孩子节点；</li><li>所有的叶子节点都在同一层；</li><li>非叶子节点只存放关键字和指向下一个孩子节点的索引，记录只存放在叶子节点中</li><li>一个有 k 个孩子节点的非叶子节点有(k-1) 个元素，按升序排列；</li><li>某个元素的左子树中的元素都比它小，右子树的元素都大于或等于它（二叉排序树的特征）；</li><li>相邻的叶子节点之间用指针相连。</li></ul><h4 id="8-1-B-树与B树、B-树的区别"><a href="#8-1-B-树与B树、B-树的区别" class="headerlink" title="8.1 B+树与B树、B*树的区别"></a>8.1 B+树与B树、B*树的区别</h4><p>B树与B+树的差别是，B树的非叶子节点也需要存放数据，下图树B树</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds10.png" class="" title="ds10 image"><p>而B+树，数据只存放在叶子节点上，同时相邻的叶子节点有链表的结构</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds11.png" class="" title="ds11 image"><p>【注意】MySQL中实现的B+树，叶子节点之间的链表是双向链表，这是一个细微的差别</p><p>B*树与B+树的差别就在非叶子节点之间，也有相互的指针指向，Oracle中使用的是B*树</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds12.png" class="" title="ds12 image"><h4 id="8-2-MySQL与B-树"><a href="#8-2-MySQL与B-树" class="headerlink" title="8.2 MySQL与B+树"></a>8.2 MySQL与B+树</h4><p><strong>为什么使用B+树而不使用B树</strong></p><ul><li>因为B数据每个节点都存储数据，每次查询的数据大小固定，就会造成每次查询返回的数据的条数变少，相同数据规模的情况下B树会增加io次数，而B+树，则数据量较小，一次可以返回多条记录，io次数较少</li><li>范围查询B+树明显优于B树</li></ul><p><strong>为什么关系型数据库都选择了B+树</strong></p><p>这个和磁盘的特性有着非常大的关系。</p><p>为了提高效率，要尽量减少磁盘I&#x2F;O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，这个称之为<strong>预读。</strong></p><p>预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页，页大小通常为4k。</p><p>按照磁盘的这种性质，如果是一个页存放一个B+树的节点，自然是可以存放很多的数据的，比如InnoDB里，默认定义的B+树的节点大小是16KB，这就是说，假如一个Key是8个字节，那么一个节点可以存放大约1000个Key，意味着B+树可以有1000个分叉。同时InnoDB每一次磁盘I&#x2F;O，读取的都是 16KB的整数倍的数据。也就是说InnoDB在节点的读写上是可以充分利用磁盘顺序IO的高速读写特性。</p><p>同时按照B+树逻辑结构来说，在叶子节点一层，所有记录的主键按照从小到大的顺序排列，并且形成了一个双向链表。同一层的非叶子节点也互相串联，形成了一个双向链表。那么在实际读写的时候，很大的概率相邻的节点会放在相邻的页上，又可以充分利用磁盘顺序IO的高速读写特性。</p><p>所以对MySQL优化的一大方向就是 <strong>尽可能的多让数据顺序读写，少让数据随机读写</strong> 。</p><p>磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），一般来说，磁盘的顺序读的效率是随机读的40到400倍都有可能，顺序写是随机写的10到100倍。</p><img src="/2022/09/19/study/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/ds13.png" class="" title="ds13 image"><h4 id="8-3-B-树的作用总结"><a href="#8-3-B-树的作用总结" class="headerlink" title="8.3 B+树的作用总结"></a>8.3 B+树的作用总结</h4><ul><li>在磁盘设备上，通过B+树可以有效的存储数据；</li><li>所有记录都存储在叶子节点上，非叶子(non-leaf)存储索引(keys)信息；而且记录按照索引列的值由小到大排好了序。</li><li>B+树含有非常高的扇出（fanout），通常超过100，在查找一个记录时，可以有效的减少IO操作；</li></ul><p><strong>扇出</strong>：是每个索引节点(Non-LeafPage)指向每个叶子节点(LeafPage)的指针；</p><p><strong>扇出数</strong> &#x3D; 索引节点(Non-LeafPage)可存储的最大关键字个数 + 1</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据库的范式化、反范式化设计，字段数据类型优化，及B+树的简述&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>4. 寻找两个正序数组的中位数</title>
    <link href="https://lyblog2022.github.io/2022/08/23/leetcode/difficult/question4/"/>
    <id>https://lyblog2022.github.io/2022/08/23/leetcode/difficult/question4/</id>
    <published>2022-08-23T08:37:45.000Z</published>
    <updated>2022-08-23T09:14:30.183Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></p><span id="more"></span><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><p>算法的时间复杂度应该为 O(log (m+n)) 。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>nums1.length &#x3D;&#x3D; m</li><li>nums2.length &#x3D;&#x3D; n</li><li>0 &lt;&#x3D; m &lt;&#x3D; 1000</li><li>0 &lt;&#x3D; n &lt;&#x3D; 1000</li><li>1 &lt;&#x3D; m + n &lt;&#x3D; 2000</li><li>-106 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 106</li></ul><p>解法一：时间复杂度为O(m+n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4. 寻找两个正序数组的中位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-23 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums1 = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span>[] nums2 = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().findMedianSortedArrays(nums1,nums2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            length += nums1.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            length += nums2.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> length;</span><br><span class="line">            length/=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            System.out.println(result);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                last = current;</span><br><span class="line">                length--;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; nums1.length) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; nums2.length) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">                            current = nums1[i];</span><br><span class="line">                            i++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            current = nums2[j];</span><br><span class="line">                            j++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        current = nums1[i];</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; nums2.length) &#123;</span><br><span class="line">                        current = nums2[j];</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        current = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">while</span> (length&gt;=<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;current&quot;</span>+current+<span class="string">&quot;   last:&quot;</span>+last);</span><br><span class="line">            <span class="comment">//中位数是两个，需求和</span></span><br><span class="line">            <span class="keyword">if</span> (result % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; result&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (current+last)/<span class="number">2.000</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二：二分法</p><p>题目是求中位数，其实就是求第 <code>k</code> 小数的一种特殊情况，而求第 <code>k</code> 小数有一种算法。</p><p>我们可以一半儿一半儿的排除，假设要找第 <code>k</code> 小数，可以每次循环排除掉 <code>k/2</code> 个数。看下边一个例子。</p><p>假设要找第 7 小的数字</p><img src="/2022/08/23/leetcode/difficult/question4/1.png" class="" title="leetcode image"><p>比较两个数组的第 k&#x2F;2 个数字，如果 k 是奇数，向下取整。也就是比较第 3 个数字，上边数组中的 4 和下边数组中的 3，如果哪个小，就表明该数组的前 k&#x2F;2 个数字都不是第 k 小数字，所以可以排除。也就是 1，2，3 这三个数字不可能是第 7 小的数字，可以把它排除掉。将 1 3 4 9  和 4 5 6 7 8 9 10 两个数组作为新的数组进行比较。</p><p>更一般的情况 A[1] ，A[2] ，A[3]，A[k&#x2F;2] … ，B[1]，B[2]，B[3]，B[k&#x2F;2] … ，如果 A[k&#x2F;2]&lt;B[k&#x2F;2] ，那么A[1]，A[2]，A[3]，A[k&#x2F;2]都不可能是第 k 小的数字。</p><p>A 数组中比 A[k&#x2F;2] 小的数有 k&#x2F;2-1 个，B 数组中，B[k&#x2F;2] 比 A[k&#x2F;2] 小，假设 B[k&#x2F;2] 前边的数字都比 A[k&#x2F;2] 小，也只有 k&#x2F;2-1 个，所以比 A[k&#x2F;2] 小的数字最多有 k&#x2F;1-1+k&#x2F;2-1&#x3D;k-2个，所以 A[k&#x2F;2] 最多是第 k-1 小的数。而比 A[k&#x2F;2] 小的数更不可能是第 k 小的数了，所以可以把它们排除。</p><p>橙色的部分表示已经去掉的数字。</p><img src="/2022/08/23/leetcode/difficult/question4/2.png" class="" title="leetcode image"><p>由于已经排除掉了 3 个数字，就是这 3 个数字一定在最前边，所以在两个新数组中，只需要找第 7 - 3 &#x3D; 4 小的数字就可以了，也就是 k &#x3D; 4。此时两个数组，比较第 2 个数字，3 &lt; 5，所以可以把小的那个数组中的 1 ，3 排除掉了</p><img src="/2022/08/23/leetcode/difficult/question4/3.png" class="" title="leetcode image"><p>又排除掉 2 个数字，所以现在找第 4 - 2 &#x3D; 2 小的数字就可以了。此时比较两个数组中的第 k &#x2F; 2 &#x3D; 1 个数，4 &#x3D;&#x3D; 4，怎么办呢？由于两个数相等，所以无论去掉哪个数组中的都行，因为去掉 1 个总会保留 1 个的，所以没有影响。为了统一，就假设 4 &gt; 4 吧，所以此时将下边的 4 去掉。</p><img src="/2022/08/23/leetcode/difficult/question4/4.png" class="" title="leetcode image"><p>由于又去掉 1 个数字，此时要找第 1 小的数字，所以只需判断两个数组中第一个数字哪个小就可以了，也就是 4。</p><p>所以第 7 小的数字是 4。</p><p>每次都是取 <code>k/2</code> 的数进行比较，有时候可能会遇到数组长度小于 <code>k/2</code>的时候。</p><img src="/2022/08/23/leetcode/difficult/question4/5.png" class="" title="leetcode image"><p>此时 k &#x2F; 2 等于 3，而上边的数组长度是 2，此时将箭头指向它的末尾就可以了。这样的话，由于 2 &lt; 3，所以就会导致上边的数组 1，2 都被排除。造成下边的情况。</p><img src="/2022/08/23/leetcode/difficult/question4/6.png" class="" title="leetcode image"><p>由于 2 个元素被排除，所以此时 k &#x3D; 5，又由于上边的数组已经空了，只需要返回下边的数组的第 5 个数字就可以了。</p><p>从上边可以看到，无论是找第奇数个还是第偶数个数字，对算法并没有影响，而且在算法进行中，k 的值都有可能从奇数变为偶数，最终都会变为 1 或者由于一个数组空了，直接返回结果。</p><p>所以采用递归的思路，为了防止数组长度小于 k&#x2F;2，所以每次比较 min(k&#x2F;2，len(数组) 对应的数字，把小的那个对应的数组的数字排除，将两个新数组进入递归，并且 k 要减去排除的数字的个数。递归出口就是当 k&#x3D;1 或者其中一个数字长度是 0 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">    <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;  </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getKth</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> start1, <span class="type">int</span> end1, <span class="type">int</span>[] nums2, <span class="type">int</span> start2, <span class="type">int</span> end2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 </span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：每进行一次循环，就减少 k&#x2F;2 个元素，所以时间复杂度是 O(log(k)，而 k&#x3D;(m+n)&#x2F;2，所以最终的复杂也就是 O(log(m+n）</p><p>空间复杂度：虽然用到了递归，但是可以看到这个递归属于尾递归，所以编译器不需要不停地堆栈，所以空间复杂度为 O(1)O(1)。</p><p>参考自：<a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/">windliang的解法三</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/median-of-two-sorted-arrays/&quot;&gt;4. 寻找两个正序数组的中位数&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="difficult" scheme="https://lyblog2022.github.io/categories/leetcode/difficult/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>线程的基础</title>
    <link href="https://lyblog2022.github.io/2022/08/15/study/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E7%A1%80/"/>
    <id>https://lyblog2022.github.io/2022/08/15/study/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-15T14:03:13.000Z</published>
    <updated>2022-08-22T10:09:45.508Z</updated>
    
    <content type="html"><![CDATA[<p>线程的基础及简单使用</p><span id="more"></span><h3 id="1、基础概念"><a href="#1、基础概念" class="headerlink" title="1、基础概念"></a>1、基础概念</h3><h4 id="1-1-进程与线程"><a href="#1-1-进程与线程" class="headerlink" title="1.1 进程与线程"></a>1.1 进程与线程</h4><p><strong>进程</strong>：指运行中的程序，比如使用的浏览器，微信，需要启动这个程序，操作系统会给这个程序分配一定的资源（占用内存资源）</p><p><strong>线程</strong>：是CPU调度的基本单位，每个线程执行的都是某一个进程的某个片段</p><p>【例】：房子与人</p><p>现在有一个100平的房子，这个方式可以看做是一个进程</p><p>房子里有人，人就可以看做是一个线程</p><p>人在房子中做事，如吃饭，学习，睡觉。可以看做是线程在执行某个功能的代码</p><p>所谓进程就是线程的容器，需要线程利用进程中的一些资源，处理一个代码、指令。最终实现进程所预期的结果</p><p>进程与线程的区别：</p><ul><li><strong>根本不同</strong>：进程是操作系统分配的资源，线程是CPU调度的基本单位</li><li><strong>资源方面</strong>：同一个进程下的线程共享进程中的一些资源。线程同时拥有自身的独立存储空间，进程之间的资源通常是独立的</li><li><strong>数量不同</strong>：进程一般指的就是一个进程，而线程是依附于某个进程的，且一个进程中至少会有一个或多个线程</li><li><strong>开销不同</strong>：进程和线程不是一个级别的内容，线程的创建、终止时间是比较短的，而且线程之间的切换比进程之间的切换速度要快的多。进程之间的通讯很麻烦，通常用借助内核实现，线程之间通讯则比较简单</li></ul><h4 id="1-2-多线程"><a href="#1-2-多线程" class="headerlink" title="1.2 多线程"></a>1.2 多线程</h4><p><strong>多线程</strong>：单个进程中同时运行多个线程</p><p>多线程的使用是为了提供CPU的利用率，可以通过避免一些网络IO或者磁盘IO等需要等待的操作，让CPU去调度其他线程，这样可以大幅度的提升程序的效率，而不是一个一个的排队。如要处理一个网络等待的操作，开启一个线程取处理需要网络等待的任务，让当前业务线程可以继续往下执行逻辑，效率可以大幅度提升</p><p>多线程的局限：</p><ul><li>如果线程的数量特别多，CPU在切换线程上下文时，会额外造成很大的消耗</li><li>任务的拆分需要依赖业务场景，有一些异构化的任务，很难对任务拆分，还有很多业务并不是多线程处理更好</li><li><strong>线程安全问题</strong>：虽然多线程带来了一定的性能提升，但是在做一些操作时，多线程如果操作临界资源，可能会发生一些数据不一致的安全问题，甚至涉及到锁操作时会造成死锁问题</li></ul><h4 id="1-3-串行、并行、并发"><a href="#1-3-串行、并行、并发" class="headerlink" title="1.3 串行、并行、并发"></a>1.3 串行、并行、并发</h4><p><strong>串行</strong>：一个一个排队，第一个做完，第二个才能开始做</p><p><strong>并行</strong>：并行就是同时处理，一起处理，多核CPU同时调度多个线程，是真正的多个线程的同时执行，单核CPU无法实现并行效果</p><p><strong>并发</strong>：CPU调度线程的概念，CPU在极短的时间内，反复切换执行不同的线程，宏观并行，微观串行</p><h4 id="1-4-同步异步、阻塞非阻塞"><a href="#1-4-同步异步、阻塞非阻塞" class="headerlink" title="1.4 同步异步、阻塞非阻塞"></a>1.4 同步异步、阻塞非阻塞</h4><p>同步异步；执行某个功能后，被调用者是否会主动反馈信息</p><p>阻塞非阻塞：执行某个功能后，调用者是否需要一直等待结果的反馈</p><p>两个概念侧重点不同，下面用锅烧水的方式简述下列4种情况</p><p><strong>同步阻塞</strong>：锅烧水，水烧开后不会主动通知用户，烧水开始执行后，需要一直等待水烧开</p><p><strong>同步非阻塞</strong>：锅烧水，水烧开后不会主动通知用户，烧水开始执行后，不需要等待水烧开，可以在烧水的同时去做其他的事情，但需要时不时查看水是否开了</p><p><strong>异步阻塞</strong>：水壶烧水，水烧开后，会主动通知用户，烧水开始执行后，需要一直等待水烧开</p><p><strong>异步非阻塞</strong>：水壶烧水，水烧开后，会主动通知用户，烧水开始执行后，不需要等待水烧开，可以在烧水的同时去做其他的事情，但需要时不时查看水是否开了</p><p>【说明】异步非阻塞的效果是最好的，平时并发时，提升效率最好的方式就是采用异步非阻塞的方式处理一些多线程的任务</p><h3 id="2、线程的创建"><a href="#2、线程的创建" class="headerlink" title="2、线程的创建"></a>2、线程的创建</h3><p>线程的创建分为三种方式：</p><h4 id="2-1-继承Thread类，重写run方法"><a href="#2-1-继承Thread类，重写run方法" class="headerlink" title="2.1 继承Thread类，重写run方法"></a>2.1 继承Thread类，重写run方法</h4><p>启动线程是调用start方法，这样会创建一个新的线程，并执行线程的任务</p><p>如果直接调用run方法，这样会让当前线程执行run方法中的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:多线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-16 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadDemo</span> <span class="variable">threadDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line">        threadDemo.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-实现Runnable接口，重写run方法"><a href="#2-2-实现Runnable接口，重写run方法" class="headerlink" title="2.2 实现Runnable接口，重写run方法"></a>2.2 实现Runnable接口，重写run方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:多线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-16 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RunnableDemo</span> <span class="variable">runnableDemo</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnableDemo);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用的方式：</p><ul><li>匿名内部类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:多线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-16 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;thread:&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lambda方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:多线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-16 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;thread:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-实现callable重写call方法，配合FutureTask"><a href="#2-3-实现callable重写call方法，配合FutureTask" class="headerlink" title="2.3 实现callable重写call方法，配合FutureTask"></a>2.3 实现callable重写call方法，配合FutureTask</h4><p>Callable一般用于有返回结果的非阻塞的执行方法</p><p>同步非阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:多线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-16 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">CallableDemo</span> <span class="variable">callableDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableDemo</span>();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callableDemo);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CallableDemo</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            count+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、线程的使用"><a href="#3、线程的使用" class="headerlink" title="3、线程的使用"></a>3、线程的使用</h3><h4 id="3-1-线程的状态"><a href="#3-1-线程的状态" class="headerlink" title="3.1 线程的状态"></a>3.1 线程的状态</h4><img src="/2022/08/15/study/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%911.png" class="" title="线程的状态 image"><ul><li><strong>NEW</strong>：Thread对象被创建出来了，但是还没有执行start方法。</li><li><strong>RUNNABLE</strong>：Thread对象调用了start方法，就为RUNNABLE状态（CPU调度&#x2F;没有调度）</li><li><strong>BLOCKED、WAITING、TIME_WAITING</strong>：都可以理解为是阻塞、等待状态，因为处在这三种状态下，CPU不会调度当前线程<ul><li><strong>BLOCKED</strong>：synchronized没有拿到同步锁，被阻塞的情况</li><li><strong>WAITING</strong>：调用wait方法就会处于WAITING状态，需要被手动唤醒</li><li><strong>TIME_WAITING</strong>：调用sleep方法或者join方法，会被自动唤醒，无需手动唤醒</li></ul></li><li><strong>TERMINATED</strong>：run方法执行完毕，线程生命周期到头了</li></ul><p>【验证】</p><pre><code>+ **NEW**</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStatus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//NEW状态</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(t1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>RUNNABLE</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStatus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//RUNNABLE状态</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        System.out.println(t1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>BLOCKED</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStatus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//BLOCKED状态</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            t1.start();</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            System.out.println(t1.getState());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>WAITING</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStatus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//BLOCKED状态</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   obj.wait();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(t1.getState());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TIMED_WAITING</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStatus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//BLOCKED状态</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(t1.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TERMINATED</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-08-22 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStatus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//BLOCKED状态</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(t1.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线程的基础及简单使用&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="并发编程" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="并发编程" scheme="https://lyblog2022.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Nginx中location块配置</title>
    <link href="https://lyblog2022.github.io/2022/08/10/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Nginx%E4%B8%ADlocation%E5%9D%97%E9%85%8D%E7%BD%AE/"/>
    <id>https://lyblog2022.github.io/2022/08/10/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/Nginx%E4%B8%ADlocation%E5%9D%97%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-10T06:41:22.000Z</published>
    <updated>2022-09-15T03:19:06.560Z</updated>
    
    <content type="html"><![CDATA[<p>location 指令是 <a href="https://so.csdn.net/so/search?q=nginx&spm=1001.2101.3001.7020">nginx</a> 中最关键的指令之一，location 指令的功能是用来匹配不同的 URI 请求，进而对请求做不同的处理和响应，这其中较难理解的是多个 location 的匹配顺序</p><span id="more"></span><h3 id="1、nginx文件结构"><a href="#1、nginx文件结构" class="headerlink" title="1、nginx文件结构"></a>1、nginx文件结构</h3><p>先简单了解 nginx 的文件结构，nginx 的 HTTP 配置主要包括三个区块，结构如下：</p><ul><li><p><strong>Global</strong>: nginx 运行相关</p></li><li><p><strong>Events</strong>: 与用户的网络连接相关</p></li><li><p><strong>http</strong></p><ul><li><strong>http Global</strong>：代理，缓存，日志，以及第三方模块的配置</li></ul></li><li><p><strong>server</strong>：</p><ul><li><strong>server Global</strong>：虚拟主机相关</li></ul></li><li><p><strong>location</strong>：地址定向，数据缓存，应答控制，以及第三方模块的配置</p></li></ul><p>从上面展示的 nginx 结构中可以看出 location 属于请求级别配置，这也是最常用的配置。</p><h3 id="2、配置location块"><a href="#2、配置location块" class="headerlink" title="2、配置location块"></a>2、配置location块</h3><h4 id="2-1-location-语法"><a href="#2-1-location-语法" class="headerlink" title="2.1 location 语法"></a>2.1 location 语法</h4><p>​Location 块通过指定模式来与客户端请求的URI相匹配。</p><p>​Location基本语法：</p><ul><li>匹配 URI 类型，有四种参数可选，当然也可以不带参数。</li><li>命名location，用@来标识，类似于定义goto语句块。</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">[ = | ~ | ~* | ^~ ] /URI &#123; … &#125;</span></span><br><span class="line"><span class="attr">location</span> <span class="string">@/name/ &#123; … &#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-location匹配命令解释"><a href="#2-2-location匹配命令解释" class="headerlink" title="2.2 location匹配命令解释"></a>2.2 location匹配命令解释</h4><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>空</td><td>location 后没有参数直接跟着 <strong>标准 URI</strong>，表示前缀匹配，代表跟请求中的 URI 从头开始匹配。</td></tr><tr><td>&#x3D;</td><td>用于<strong>标准 URI</strong> 前，要求请求字符串与其精准匹配，成功则立即处理，nginx停止搜索其他匹配。</td></tr><tr><td>^~</td><td>用于<strong>标准 URI</strong> 前，并要求一旦匹配到就会立即处理，不再去匹配其他的那些个正则 URI，一般用来匹配目录</td></tr><tr><td>~</td><td>用于<strong>正则 URI</strong> 前，表示 URI 包含正则表达式， <strong>区分</strong>大小写</td></tr><tr><td>~*</td><td>用于<strong>正则 URI</strong> 前， 表示 URI 包含正则表达式， <strong>不区分</strong>大小写</td></tr><tr><td>@</td><td>@ 定义一个命名的 location，@ 定义的locaiton名字一般用在内部定向，例如error_page, try_files命令中。它的功能类似于编程中的goto。</td></tr></tbody></table><h4 id="2-3-location匹配顺序"><a href="#2-3-location匹配顺序" class="headerlink" title="2.3 location匹配顺序"></a>2.3 location匹配顺序</h4><p>​nginx有两层指令来匹配请求 URI 。第一个层次是 server 指令，它通过域名、ip 和端口来做第一层级匹配，当找到匹配的 server 后就进入此 server 的 location 匹配。</p><p>​location 的匹配并不完全按照其在配置文件中出现的顺序来匹配，请求URI 会按如下规则进行匹配：</p><ol><li>先精准匹配 &#x3D; ，精准匹配成功则会立即停止其他类型匹配；</li><li>没有精准匹配成功时，进行前缀匹配。先查找带有 ^~ 的前缀匹配，带有 ^~ 的前缀匹配成功则立即停止其他类型匹配，普通前缀匹配（不带参数 ^~ ）成功则会暂存，继续查找正则匹配；</li><li>&#x3D; 和 ^~ 均未匹配成功前提下，查找正则匹配 ~ 和 ~* 。当同时有多个正则匹配时，按其在配置文件中出现的先后顺序优先匹配，命中则立即停止其他类型匹配；</li><li>所有正则匹配均未成功时，返回步骤 2 中暂存的普通前缀匹配（不带参数 ^~ ）结果</li></ol><p>以上规则简单总结就是优先级从高到低依次为（序号越小优先级越高）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1.</span> <span class="string">location =    # 精准匹配</span></span><br><span class="line"><span class="attr">2.</span> <span class="string">location ^~   # 带参前缀匹配</span></span><br><span class="line"><span class="attr">3.</span> <span class="string">location ~    # 正则匹配（区分大小写）</span></span><br><span class="line"><span class="attr">4.</span> <span class="string">location ~*   # 正则匹配（不区分大小写）</span></span><br><span class="line"><span class="attr">5.</span> <span class="string">location /a   # 普通前缀匹配，优先级低于带参数前缀匹配。</span></span><br><span class="line"><span class="attr">6.</span> <span class="string">location /    # 任何没有匹配成功的，都会匹配这里处理</span></span><br></pre></td></tr></table></figure><h4 id="2-4-其他location配置相关"><a href="#2-4-其他location配置相关" class="headerlink" title="2.4 其他location配置相关"></a>2.4 其他location配置相关</h4><h5 id="2-4-1-匹配问号后的参数"><a href="#2-4-1-匹配问号后的参数" class="headerlink" title="2.4.1 匹配问号后的参数"></a>2.4.1 匹配问号后的参数</h5><p>​请求 URI 中问号后面的参数是不能在 location 中匹配到的，这些参数存储在 $query_string 变量中，可以用 if 来判断。</p><p>例如，对于参数中带有单引号 ’ 进行匹配然后重定向到错误页面。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/plus/list.php?tid</span>=<span class="string">19&amp;mid=1124‘</span></span><br><span class="line"><span class="attr">if</span> <span class="string">( $query_string ~* “.*[;’&lt;&gt;].*” )&#123;</span></span><br><span class="line">  <span class="attr">return</span> <span class="string">404;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-2-location-URI结尾带不带-x2F"><a href="#2-4-2-location-URI结尾带不带-x2F" class="headerlink" title="2.4.2 location URI结尾带不带 &#x2F;"></a>2.4.2 location URI结尾带不带 &#x2F;</h5><p>​关于 URI 尾部的 &#x2F; 有三点也需要说明一下。第一点与 location 配置有关，其他两点无关。</p><ol><li>location 中的字符有没有 &#x2F; 都没有影响。也就是说 &#x2F;user&#x2F; 和 &#x2F;user 是一样的。</li><li>如果 URI 结构是 <a href="https://domain.com/">https://domain.com/</a> 的形式，尾部有没有 &#x2F; 都不会造成重定向。因为浏览器在发起请求的时候，默认加上了 &#x2F; 。虽然很多浏览器在地址栏里也不会显示 &#x2F; </li><li>如果 URI 的结构是 <a href="https://domain.com/some-dir/">https://domain.com/some-dir/</a> 。尾部如果缺少 &#x2F; 将导致重定向。因为根据约定，URL 尾部的 &#x2F; 表示目录，没有 &#x2F; 表示文件。所以访问 &#x2F;some-dir&#x2F; 时，服务器会自动去该目录下找对应的默认文件。如果访问 &#x2F;some-dir 的话，服务器会先去找 some-dir 文件，找不到的话会将 some-dir 当成目录，重定向到 &#x2F;some-dir&#x2F; ，去该目录下找默认文件。可以去测试一下你的网站是不是这样的。</li></ol><h5 id="2-4-3-命名-location"><a href="#2-4-3-命名-location" class="headerlink" title="2.4.3 命名 location"></a>2.4.3 命名 location</h5><p>​带有 @ 的 location 是用来定义一个命名的 location，这种 location 不参与请求匹配，一般用在内部定向。用法如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">    <span class="attr">try_files</span> <span class="string">$uri $uri/ @custom</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">location</span> <span class="string">@custom &#123;</span></span><br><span class="line"><span class="comment">    # ...do something</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>​上例中，当尝试访问 URI 找不到对应的文件就重定向到我们自定义的命名 location（此处为 custom）。</p><p>​值得注意的是，命名 location 中不能再嵌套其它的命名 location。</p><h4 id="2-5-location-实际使用建议"><a href="#2-5-location-实际使用建议" class="headerlink" title="2.5 location 实际使用建议"></a>2.5 location 实际使用建议</h4><ol><li><p>直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">location</span> = <span class="string">/ &#123;</span></span><br><span class="line">    <span class="attr">proxy_pass</span> <span class="string">http://tomcat:8080/index</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项，有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">^~ /static/ &#123;</span></span><br><span class="line">    <span class="attr">root</span> <span class="string">/webroot/static/;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">location</span> <span class="string">~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span></span><br><span class="line">    <span class="attr">root</span> <span class="string">/webroot/res/;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>第三个规则就是通用规则，用来转发动态请求到后端应用服务器，非静态文件请求就默认是动态请求，自己根据实际把握，毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">    <span class="attr">proxy_pass</span> <span class="string">http://tomcat:8080/</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>转自：<a href="https://blog.csdn.net/qq_41993206/article/details/117432516">Nginx 中 location 块配置详解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;location 指令是 &lt;a href=&quot;https://so.csdn.net/so/search?q=nginx&amp;spm=1001.2101.3001.7020&quot;&gt;nginx&lt;/a&gt; 中最关键的指令之一，location 指令的功能是用来匹配不同的 URI 请求，进而对请求做不同的处理和响应，这其中较难理解的是多个 location 的匹配顺序&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"/>
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡</title>
    <link href="https://lyblog2022.github.io/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/"/>
    <id>https://lyblog2022.github.io/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/</id>
    <published>2022-08-09T02:51:31.000Z</published>
    <updated>2022-09-15T03:21:06.895Z</updated>
    
    <content type="html"><![CDATA[<p>负载均衡及nginx负载均衡测试</p><span id="more"></span><h3 id="1、-负载均衡"><a href="#1、-负载均衡" class="headerlink" title="1、 负载均衡"></a>1、 负载均衡</h3><h4 id="1-1-什么是负载均衡"><a href="#1-1-什么是负载均衡" class="headerlink" title="1.1 什么是负载均衡"></a>1.1 什么是负载均衡</h4><p>​负载均衡（Load Balance，简称LB）是高并发、高可用系统不可少的关键组件，目标是尽力将网站流量平均分发到多个服务器上，以提高系统整体的响应速度和可用性。</p><h4 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h4><ul><li><strong>高并发</strong>：负载均衡通过算法调整负载，尽力均匀的分配应用集群中各节点的工作量，以此提高应用集群的并发处理能力（吞吐量）。</li><li><strong>伸缩性</strong>：添加或减少服务器数量，然后由负载均衡进行分发控制。这使得应用集群具备伸缩性。</li><li><strong>高可用</strong>：负载均衡器可以监控候选服务器，当服务器不可用时，自动跳过，将请求分发给可用的服务器。这使得应用集群具备高可用的特性。</li><li><strong>安全防护</strong>：有些负载均衡软件或硬件提供了安全性功能，如：黑白名单处理、防火墙，防 DDos 攻击等。</li></ul><h4 id="1-3-分类"><a href="#1-3-分类" class="headerlink" title="1.3 分类"></a>1.3 分类</h4><p>​支持负载均衡的技术很多，可以通过不同维度去进行分类。</p><h5 id="1-3-1-载体维度分类"><a href="#1-3-1-载体维度分类" class="headerlink" title="1.3.1 载体维度分类"></a>1.3.1 载体维度分类</h5><p>​从支持负载均衡的载体来看，可以将负载均衡分为两类：<strong>硬件负载均衡、软件负载均衡</strong></p><h6 id="1-3-1-1-硬件负载均衡"><a href="#1-3-1-1-硬件负载均衡" class="headerlink" title="1.3.1.1 硬件负载均衡"></a>1.3.1.1 <strong>硬件负载均衡</strong></h6><p>​硬件负载均衡，一般是在定制处理器上运行的独立负载均衡服务器，价格昂贵，土豪专属。硬件负载均衡的主流产品有:F5 和 A10。</p><ul><li><strong>硬件负载均衡的 优点：</strong><ul><li>功能强大：支持全局负载均衡并提供较全面的、复杂的负载均衡算法。</li><li>性能强悍：硬件负载均衡由于是在专用处理器上运行，因此吞吐量大，可支持单机百万以上的并发。</li><li>安全性高：往往具备防火墙，防 DDos 攻击等安全功能。</li></ul></li><li><strong>硬件负载均衡的 缺点：</strong><ul><li>成本昂贵：购买和维护硬件负载均衡的成本都很高。</li><li>扩展性差：当访问量突增时，超过限度不能动态扩容。</li></ul></li></ul><h6 id="1-3-1-2-软件负载均衡"><a href="#1-3-1-2-软件负载均衡" class="headerlink" title="1.3.1.2 软件负载均衡"></a>1.3.1.2 <strong>软件负载均衡</strong></h6><p>​软件负载均衡，应用最广泛，无论大公司还是小公司都会使用。<br>​软件负载均衡从软件层面实现负载均衡，一般可以在任何标准物理设备上运行。<br>​软件负载均衡的 主流产品 有：<strong>Nginx、HAProxy、LVS</strong>。</p><ul><li>LVS 可以作为四层负载均衡器。其负载均衡的性能要优于 Nginx。</li><li>HAProxy 可以作为 HTTP 和 TCP 负载均衡器。</li><li>Nginx、HAProxy 可以作为四层或七层负载均衡器。</li></ul><p><strong>软件负载均衡的 优点：</strong></p><ul><li>扩展性好：适应动态变化，可以通过添加软件负载均衡实例，动态扩展到超出初始容量的能力</li><li>成本低廉：软件负载均衡可以在任何标准物理设备上运行，降低了购买和运维的成本。</li></ul><p><strong>软件负载均衡的 缺点：</strong></p><ul><li>性能略差：相比于硬件负载均衡，软件负载均衡的性能要略低一些。</li></ul><h5 id="1-3-2-网络通信分类"><a href="#1-3-2-网络通信分类" class="headerlink" title="1.3.2 网络通信分类"></a>1.3.2 网络通信分类</h5><p>​软件负载均衡从通信层面来看，又可以分为四层和七层负载均衡。</p><h6 id="1-3-2-1-七层负载均衡"><a href="#1-3-2-1-七层负载均衡" class="headerlink" title="1.3.2.1 七层负载均衡"></a>1.3.2.1 <strong>七层负载均衡</strong></h6><p>​就是可以根据访问用户的 HTTP 请求头、URL 信息将请求转发到特定的主机。</p><ul><li>DNS 重定向</li><li>HTTP 重定向</li><li>反向代理</li></ul><h6 id="1-3-2-2-四层负载均衡"><a href="#1-3-2-2-四层负载均衡" class="headerlink" title="1.3.2.2 四层负载均衡"></a>1.3.2.2 <strong>四层负载均衡</strong></h6><p>​基于 IP 地址和端口进行请求的转发。</p><ul><li>修改 IP 地址</li><li>修改 MAC 地址</li></ul><h6 id="1-3-2-3-DNS-负载均衡"><a href="#1-3-2-3-DNS-负载均衡" class="headerlink" title="1.3.2.3 DNS 负载均衡"></a>1.3.2.3 <strong>DNS 负载均衡</strong></h6><p>​DNS 负载均衡一般用于互联网公司，复杂的业务系统不适合使用。大型网站一般使用 DNS 负载均衡作为 第一级负载均衡手段，然后在内部使用其它方式做第二级负载均衡。DNS 负载均衡属于七层负载均衡。<br>​DNS 即 域名解析服务，是 OSI 第七层网络协议。DNS 被设计为一个树形结构的分布式应用，自上而下依次为：根域名服务器，一级域名服务器，二级域名服务器，… ，本地域名服务器。显然，如果所有数据都存储在根域名服务器，那么 DNS 查询的负载和开销会非常庞大。<br>​因此，DNS 查询相对于 DNS 层级结构，是一个逆向的递归流程，DNS 客户端依次请求本地 DNS 服务器，上一级 DNS 服务器，上上一级 DNS 服务器，… ，根 DNS 服务器（又叫权威 DNS 服务器），一旦命中，立即返回。为了减少查询次数，每一级 DNS 服务器都会设置 DNS 查询缓存。<br>​DNS 负载均衡的工作原理就是：基于 DNS 查询缓存，按照负载情况返回不同服务器的 IP 地址。</p><p>​DNS 重定向的 优点：</p><ul><li>使用简单：负载均衡工作，交给 DNS 服务器处理，省掉了负载均衡服务器维护的麻烦</li><li>提高性能：可以支持基于地址的域名解析，解析成距离用户最近的服务器地址（类似 CDN 的原理），可以加快访问速度，改善性能；</li></ul><p>​DNS 重定向的 缺点：</p><ul><li>可用性差：DNS 解析是多级解析，新增&#x2F;修改 DNS 后，解析时间较长；解析过程中，用户访问网站将失败；</li><li>扩展性低：DNS 负载均衡的控制权在域名商那里，无法对其做更多的改善和扩展；</li><li>维护性差：也不能反映服务器的当前运行状态；支持的算法少；不能区分服务器的差异（不能根据系统与服务的状态来判断负载）。</li></ul><h6 id="1-3-2-4-HTTP-负载均衡"><a href="#1-3-2-4-HTTP-负载均衡" class="headerlink" title="1.3.2.4 HTTP 负载均衡"></a>1.3.2.4 <strong>HTTP 负载均衡</strong></h6><p>​HTTP 负载均衡是基于 HTTP 重定向实现的。HTTP 负载均衡属于七层负载均衡。</p><p>​HTTP 重定向原理是：根据用户的 HTTP 请求计算出一个真实的服务器地址，将该服务器地址写入 HTTP 重定向响应中，返回给浏览器，由浏览器重新进行访问。</p><img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx2.png" class="" title="nginx2 image"><p>​HTTP 重定向的优点：方案简单。</p><p>​HTTP 重定向的 缺点：</p><ul><li>性能较差：每次访问需要两次请求服务器，增加了访问的延迟。</li><li>降低搜索排名：使用重定向后，搜索引擎会视为 SEO 作弊。</li><li>如果负载均衡器宕机，就无法访问该站点。</li></ul><p>​由于其缺点比较明显，所以这种负载均衡策略实际应用较少。</p><h6 id="1-3-2-5-反向代理负载均衡"><a href="#1-3-2-5-反向代理负载均衡" class="headerlink" title="1.3.2.5 反向代理负载均衡"></a>1.3.2.5 <strong>反向代理负载均衡</strong></h6><p>​反向代理（Reverse Proxy）方式是指以 代理服务器 来接受网络请求，然后 将请求转发给内网中的服务器，并将从内网中的服务器上得到的结果返回给网络请求的客户端。反向代理负载均衡属于七层负载均衡。</p><p>​反向代理服务的主流产品：<strong>Nginx、Apache</strong>。</p><p>​正向代理与反向代理有什么区别？</p><ul><li><strong>正向代理</strong>：发生在 客户端，是由用户主动发起的。翻墙软件就是典型的正向代理，客户端通过主动访问代理服务器，让代理服务器获得需要的外网数据，然后转发回客户端。</li><li><strong>反向代理</strong>：发生在 服务端，用户不知道代理的存在。</li></ul><img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx3.png" class="" title="nginx3 image"><p>反向代理的实现</p><p>​<img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx4.png" class="" title="nginx4 image"></p><p>​首先，在代理服务器上设定好负载均衡规则。然后，当收到客户端请求，反向代理服务器拦截指定的域名或 IP 请求，根据负载均衡算法，将请求分发到候选服务器上。其次，如果某台候选服务器宕机，反向代理服务器会有容错处理，比如分发请求失败 3 次以上，将请求分发到其他候选服务器上。</p><p>​反向代理的 优点：</p><ul><li>多种负载均衡算法：支持多种负载均衡算法，以应对不同的场景需求。</li><li>可以监控服务器：基于 HTTP 协议，可以监控转发服务器的状态，如：系统负载、响应时间、是否可用、连接数、流量等，从而根据这些数据调整负载均衡的策略。</li></ul><p>​反向代理的 缺点：</p><ul><li><p>额外的转发开销：反向代理的转发操作本身是有性能开销的，可能会包括创建连接，等待连接响应，分析响应结果等操作。</p></li><li><p>增加系统复杂度：反向代理常用于做分布式应用的水平扩展，但反向代理服务存在以下问题，为了解决以下问题会给系统整体增加额外的复杂度和运维成本：</p><ul><li>反向代理服务如果自身宕机，就无法访问站点，所以需要有 高可用 方案，常见的方案有：主备模式（一主一备）、双主模式（互为主备）。</li><li>反向代理服务自身也存在性能瓶颈，随着需要转发的请求量不断攀升，需要有 可扩展 方案。</li></ul></li></ul><h6 id="1-3-2-6-IP负载均衡"><a href="#1-3-2-6-IP负载均衡" class="headerlink" title="1.3.2.6 IP负载均衡"></a>1.3.2.6 IP负载均衡</h6><p>​IP 负载均衡是在网络层通过修改请求目的地址进行负载均衡。</p><p>​<img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx5.png" class="" title="nginx5 image"></p><p>​如上图所示，IP 均衡处理流程大致为：</p><ol><li>客户端请求 192.168.137.10，由负载均衡服务器接收到报文。</li><li>负载均衡服务器根据算法选出一个服务节点 192.168.0.1，然后将报文请求地址改为该节点的 IP。</li><li>真实服务节点收到请求报文，处理后，返回响应数据到负载均衡服务器。</li><li>负载均衡服务器将响应数据的源地址改负载均衡服务器地址，返回给客户端。</li></ol><p>​IP 负载均衡在内核进程完成数据分发，较反向代理负载均衡有更好的从处理性能。但是，由于所有请求响应都要经过负载均衡服务器，集群的吞吐量受制于负载均衡服务器的带宽。</p><h6 id="1-3-2-7-数据链路层负载均衡"><a href="#1-3-2-7-数据链路层负载均衡" class="headerlink" title="1.3.2.7 数据链路层负载均衡"></a>1.3.2.7 <strong>数据链路层负载均衡</strong></h6><p>​数据链路层负载均衡是指在通信协议的数据链路层修改 mac 地址进行负载均衡。</p><p>​<img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx6.png" class="" title="nginx6 image"></p><p>​在 Linux 平台上最好的链路层负载均衡开源产品是 LVS (Linux Virtual Server)。LVS 是基于 Linux 内核中 netfilter 框架实现的负载均衡系统。netfilter 是内核态的 Linux 防火墙机制，可以在数据包流经过程中，根据规则设置若干个关卡（hook 函数）来执行相关的操作。</p><p>​LVS 的工作流程大致如下：</p><ol><li>当用户访问 <a href="http://www.sina.com.cn/">www.sina.com.cn</a> 时，用户数据通过层层网络，最后通过交换机进入 LVS 服务器网卡，并进入内核网络层。</li><li>进入 PREROUTING 后经过路由查找，确定访问的目的 VIP 是本机 IP 地址，所以数据包进入到 INPUT 链上</li><li>IPVS 是工作在 INPUT 链上，会根据访问的 <strong>vip+port</strong> 判断请求是否 IPVS 服务，如果是则调用注册的 IPVS HOOK 函数，进行 IPVS 相关主流程，强行修改数据包的相关数据，并将数据包发往 POSTROUTING 链上。</li><li>POSTROUTING 上收到数据包后，根据目标 IP 地址（后端服务器），通过路由选路，将数据包最终发往后端的服务器上。</li></ol><p>​开源 LVS 版本有 3 种工作模式，每种模式工作原理截然不同，说各种模式都有自己的优缺点，分别适合不同的应用场景，不过最终本质的功能都是能实现均衡的流量调度和良好的扩展性。主要包括三种模式：DR 模式、NAT 模式、Tunnel 模式。</p><h3 id="2、负载均衡算法"><a href="#2、负载均衡算法" class="headerlink" title="2、负载均衡算法"></a>2、负载均衡算法</h3><p>​负载均衡器的实现可以分为两个部分：</p><ol><li>根据负载均衡算法在候选服务器列表选出一个服务器;</li><li>将请求数据发送到该服务器上。</li></ol><p>​负载均衡算法是负载均衡服务核心中的核心。负载均衡产品多种多样，但是各种负载均衡算法原理是共性的。负载均衡算法有很多种，分别适用于不同的应用场景，本文仅介绍最为常见的负载均衡算法的特性及原理：<strong>轮询、随机、最小活跃数、源地址哈希、一致性哈希</strong>。</p><h4 id="2-1-轮循-Round-Robin"><a href="#2-1-轮循-Round-Robin" class="headerlink" title="2.1 轮循(Round Robin)"></a>2.1 轮循(Round Robin)</h4><ul><li>将收到的请求循环分配到服务器集群中的每台机器，即有效服务器</li><li>使用这种方式，所有的标记进入虚拟服务的服务器应该有相近的资源容量以及负载形同的应用程序</li><li>如果所有的服务器有相同或者相近的性能那么选择这种方式会使服务器负载形同</li><li>基于这个前提，轮循调度是一个简单而有效的分配请求的方式</li><li>对于服务器不同的情况，选择这种方式就意味着能力比较弱的服务器也会在下一轮循环中接受轮循，即使这个服务器已经不能再处理当前这个请求了。这可能导致能力较弱的服务器超载。</li></ul><h4 id="2-2-加权轮循-Weighted-Round-Robin"><a href="#2-2-加权轮循-Weighted-Round-Robin" class="headerlink" title="2.2 加权轮循(Weighted Round Robin)"></a>2.2 加权轮循(Weighted Round Robin)</h4><p>​这种算法解决了简单轮循调度算法的缺点：传入的请求按顺序被分配到集群中服务器，但是会考虑提前为每台服务器分配的权重。管理员只是简单的通过服务器的处理能力来定义各台服务器的权重。例如，能力最强的服务器A给的权重是100，同时能力最低的服务器给的权重是50。这意味着在服务器B接收到第一个请求之前前，服务器A会连续的接受到2个请求，以此类推。</p><h4 id="2-3-最少连接数-Least-Connection"><a href="#2-3-最少连接数-Least-Connection" class="headerlink" title="2.3 最少连接数(Least Connection)"></a>2.3 最少连接数(Least Connection)</h4><ul><li>以上两种方法都没有考虑的是系统不能识别在给定的时间里保持了多少连接。因此可能发生，服务器B服务器收到的连接比服务器A少但是它已经超载，因为服务器B上的用户打开连接持续的时间更长。这就是说连接数即服务器的负载是累加的。这种潜在的问题可以通过”最少连接数”算法来避免</li><li>传入的请求是根据每台服务器当前所打开的连接数来分配的。即活跃连接数最少的服务器会自动接收下一个传入的请求</li><li>和简单轮询的原则相同：所有拥有虚拟服务的服务器资源容量应该相近</li><li>值得注意的是，在流量率低的配置环境中，各服务器的流量并不是相同的，会优先考虑第一台服务器。这是因为，如果所有的服务器是相同的，那么第一个服务器优先，直到第一台服务器有连续的活跃流量，否则总是会优先选择第一台服务器。</li></ul><h4 id="2-4-源IP哈希-Source-IP-Hash"><a href="#2-4-源IP哈希-Source-IP-Hash" class="headerlink" title="2.4 源IP哈希(Source IP Hash)"></a>2.4 源IP哈希(Source IP Hash)</h4><ul><li>这种方式通过生成请求源IP的哈希值，并通过这个哈希值来找到正确的真实服务器，这意味着对于同一主机来说他对应的服务器总是相同</li><li>使用这种方式，你不需要保存任何源IP。但是需要注意，这种方式可能导致服务器负载不平衡。</li></ul><h3 id="3、负载均衡测试"><a href="#3、负载均衡测试" class="headerlink" title="3、负载均衡测试"></a>3、负载均衡测试</h3><h4 id="3-1-目的"><a href="#3-1-目的" class="headerlink" title="3.1 目的"></a>3.1 目的</h4><ol><li>通过浏览器多次访问一个地址（<a href="http://www.ly.com/city%EF%BC%89">http://www.ly.com/city）</a></li><li>nginx接受上面的请求，并进行转发。</li><li>那么每个请求的响应，是来自于不同的tomcat提供的。（2台tomcat，端口：8081，8082）。两台tomcat，不同的响应内容：“8081”和“8082”。</li></ol><h4 id="3-2-步骤"><a href="#3-2-步骤" class="headerlink" title="3.2 步骤"></a>3.2 步骤</h4><ol><li><p>准备2个tomcat，并做好响应的页面，启动，测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# cd /usr/local/tomcatb/tomcat8082/webapps/city</span><br><span class="line">[root@192 city]# cat index.html</span><br><span class="line">this is 8082</span><br><span class="line">[root@192 city]# pwd</span><br><span class="line">/usr/local/tomcatb/tomcat8082/webapps/city</span><br><span class="line">[root@192 sbin]# cd /usr/local/tomcatb/tomcat8081/webapps/city</span><br><span class="line">[root@192 city]# cat index.html</span><br><span class="line">this is 8081</span><br><span class="line">[root@192 city]# pwd</span><br><span class="line">/usr/local/tomcatb/tomcat8081/webapps/city</span><br></pre></td></tr></table></figure></li><li><p>访问测试：</p><ul><li><a href="http://192.168.213.143:8081/city/">http://192.168.213.143:8081/city/</a></li></ul><p>​<img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx7.png" class="" title="nginx7 image"></p><ul><li><p><a href="http://192.168.213.143:8082/city/">http://192.168.213.143:8082/city/</a></p><img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx8.png" class="" title="nginx8 image"></li></ul></li><li><p>修改nginx.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # server list</span></span><br><span class="line">    <span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">        <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">        <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/&#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">9001;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /beijing/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8081;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /shanghai/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8082;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">9002;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://myServers;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重新加载nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问测试：<a href="http://www.ly.com:9002/city/">http://www.ly.com:9002/city/</a></p></li></ol><h3 id="4、负载均衡算法应用"><a href="#4、负载均衡算法应用" class="headerlink" title="4、负载均衡算法应用"></a>4、负载均衡算法应用</h3><h4 id="4-1-Round-Robin轮询"><a href="#4-1-Round-Robin轮询" class="headerlink" title="4.1 Round Robin轮询"></a>4.1 Round Robin轮询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-Least-Connections"><a href="#4-2-Least-Connections" class="headerlink" title="4.2 Least Connections"></a>4.2 Least Connections</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">least_conn;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-IP-Hash"><a href="#4-3-IP-Hash" class="headerlink" title="4.3 IP Hash"></a>4.3 IP Hash</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">ip_hash;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>调用则会显示8082</p><img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx8.png" class="" title="nginx8 image"><p>将8082标记为down</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">ip_hash;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082 down;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>再次访问则会显示回8081</p><img src="/2022/08/09/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95/nginx7.png" class="" title="nginx7 image"><h4 id="4-4-Generic-Hash"><a href="#4-4-Generic-Hash" class="headerlink" title="4.4 Generic Hash"></a>4.4 Generic Hash</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">hash</span> <span class="string">$request_uri consistent;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-5-Random"><a href="#4-5-Random" class="headerlink" title="4.5 Random"></a>4.5 Random</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">random</span> <span class="string">two least_conn;;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-服务权重"><a href="#4-6-服务权重" class="headerlink" title="4.6 服务权重"></a>4.6 服务权重</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081 weight=2;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082 weight=8;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>参考自：<a href="https://blog.csdn.net/wanghangzhen/article/details/118554304">什么是负载均衡，看完文章秒懂</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;负载均衡及nginx负载均衡测试&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"/>
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理</title>
    <link href="https://lyblog2022.github.io/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://lyblog2022.github.io/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2022-08-08T12:48:36.000Z</published>
    <updated>2022-09-15T03:19:24.983Z</updated>
    
    <content type="html"><![CDATA[<p>nginx反向代理</p><span id="more"></span><h3 id="1、单台代理"><a href="#1、单台代理" class="headerlink" title="1、单台代理"></a>1、单台代理</h3><h4 id="1-1-目的："><a href="#1-1-目的：" class="headerlink" title="1.1 目的："></a>1.1 目的：</h4><ol><li>在浏览器访问一个地址：<a href="http://www.ly.com/">www.ly.com</a></li><li>Nginx接受上面的请求。</li><li>转发请求到tomcat。</li><li>tomcat响应一个页面，页面中有：”tomcat hello !!!”。</li></ol><h4 id="1-2-操作"><a href="#1-2-操作" class="headerlink" title="1.2 操作"></a>1.2 操作</h4><ol><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# ps -ef | grep nginx</span><br><span class="line">root        2290       1  0 08:20 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nginx       2320    2290  0 08:23 ?        00:00:00 nginx: worker process</span><br><span class="line">root        2667    2175  0 09:02 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://192.168.213.143/">http://192.168.213.143/</a></p><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx.png" class="" title="nginx image"></li><li><p>准备一个tomcat。</p><p>查看服务器上是否有tomcat？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# systemctl status tomcat</span><br><span class="line">Unit tomcat.service could not be found.</span><br></pre></td></tr></table></figure><p>tomcat安装</p><p>在tomcat下创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@192 tomcat]# ll</span><br><span class="line">总用量 136</span><br><span class="line">drwxr-xr-x. 2 root root  4096 8月   8 09:25 bin</span><br><span class="line">-rw-r--r--. 1 root root 19992 8月   8 09:26 BUILDING.txt</span><br><span class="line">drwxr-xr-x. 3 root root  4096 8月   8 09:32 conf</span><br><span class="line">-rw-r--r--. 1 root root  6210 8月   8 09:26 CONTRIBUTING.md</span><br><span class="line">drwxr-xr-x. 2 root root  4096 8月   8 09:25 lib</span><br><span class="line">-rw-r--r--. 1 root root 57092 8月   8 09:26 LICENSE</span><br><span class="line">drwxr-xr-x. 2 root root  4096 8月   8 09:32 logs</span><br><span class="line">-rw-r--r--. 1 root root  2333 8月   8 09:26 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3398 8月   8 09:26 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6901 8月   8 09:26 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16505 8月   8 09:26 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root    30 8月   8 09:25 temp</span><br><span class="line">drwxr-xr-x. 7 root root    81 8月   8 09:26 webapps</span><br><span class="line">drwxr-xr-x. 3 root root    22 8月   8 09:32 work</span><br><span class="line">[root@192 tomcat]# cd webapps</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 09:25 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 09:26 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 09:26 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 09:26 manager</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 09:25 ROOT</span><br><span class="line">[root@192 webapps]# mkdir root</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 09:25 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 09:26 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 09:26 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 09:26 manager</span><br><span class="line">drwxr-xr-x.  2 root root    6 8月   8 09:34 root</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 09:25 ROOT</span><br><span class="line">[root@192 webapps]# cd root</span><br><span class="line">[root@192 root]# vi index.html</span><br><span class="line">[root@192 root]# cat index.html</span><br><span class="line">tomcat hello !!!</span><br><span class="line">[root@192 root]# curl localhost:8080/root/index.html</span><br><span class="line">tomcat hello !!!</span><br></pre></td></tr></table></figure><p>tomcat启动测试：<a href="http://192.168.213.143:8080/root/index.html">http://192.168.213.143:8080/root/index.html</a></p><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx2.png" class="" title="nginx2 image"></li><li><p>修改nginx配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/&#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>重新加载配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>访问测试：</p><p><a href="http://www.ly.com/root/index.html">http://www.ly.com/root/index.html</a></p><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx2.png" class="" title="nginx2 image"></li></ol><h3 id="2、多台代理"><a href="#2、多台代理" class="headerlink" title="2、多台代理"></a>2、多台代理</h3><h4 id="2-1-目的"><a href="#2-1-目的" class="headerlink" title="2.1 目的"></a>2.1 目的</h4><ol><li>浏览器访问：（<a href="http://www.ly.com/beijing%EF%BC%89%EF%BC%8C%E9%80%9A%E8%BF%87nginx%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%80%E4%B8%AAtomcat%E4%B8%8A%EF%BC%88http://localhost:8081%EF%BC%89%EF%BC%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E6%98%BE%E7%A4%BA%EF%BC%9Abeijing%E3%80%82">http://www.ly.com/beijing），通过nginx，跳转到一个tomcat上（http://localhost:8081），在浏览器上显示：beijing。</a></li><li>浏览器访问：（<a href="http://www.ly.com/shanghai%EF%BC%89%EF%BC%8C%E9%80%9A%E8%BF%87nginx%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%80%E4%B8%AAtomcat%E4%B8%8A%EF%BC%88http://localhost:8082%EF%BC%89%EF%BC%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E6%98%BE%E7%A4%BA%EF%BC%9Ashanghai%E3%80%82">http://www.ly.com/shanghai），通过nginx，跳转到一个tomcat上（http://localhost:8082），在浏览器上显示：shanghai。</a></li></ol><h4 id="2-2-操作"><a href="#2-2-操作" class="headerlink" title="2.2 操作"></a>2.2 操作</h4><ol><li><p>复制一个tomcat，一个为8081，另一个为8082</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port=&quot;8015&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">&lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>准备文件</p><p>8081&#x2F;webapps&#x2F;ROOT下添加index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is BEIJING</span><br></pre></td></tr></table></figure><p>8082&#x2F;webapps&#x2F;ROOT下添加index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is SHANGHAI</span><br></pre></td></tr></table></figure></li><li><p>创建文件，拷贝文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@192 tomcat8081]# cd webapps</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 10:15 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 10:16 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 10:16 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 10:16 manager</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 10:48 ROOT</span><br><span class="line">[root@192 webapps]# mkdir beijing</span><br><span class="line">[root@192 webapps]# cp ROOT/index.html beijing/</span><br><span class="line">[root@192 tomcat8082]# cd webapps</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 10:16 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 10:16 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 10:16 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 10:16 manager</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 10:48 ROOT</span><br><span class="line">[root@192 webapps]# mkdir shanghai</span><br><span class="line">[root@192 webapps]# cp ROOT/index.html shanghai/</span><br></pre></td></tr></table></figure></li><li><p>服务器端访问测试</p></li><li><p>修改nginx配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/&#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">9001;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /beijing/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8081;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /shanghai/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8082;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><a href="http://www.ly.com:9001/shanghai/">http://www.ly.com:9001/shanghai/</a></p><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx3.png" class="" title="nginx3 image"><p><a href="http://www.ly.com:9001/beijing/">http://www.ly.com:9001/beijing/</a></p><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx4.png" class="" title="nginx4 image"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx反向代理&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"/>
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx常用命令及配置文件</title>
    <link href="https://lyblog2022.github.io/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://lyblog2022.github.io/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2022-08-08T12:17:04.000Z</published>
    <updated>2022-09-15T03:15:56.854Z</updated>
    
    <content type="html"><![CDATA[<p>nginx常用命令及配置文件</p><span id="more"></span><h3 id="1、nginx常用命令"><a href="#1、nginx常用命令" class="headerlink" title="1、nginx常用命令"></a>1、nginx常用命令</h3><h4 id="1-1-查看nginx版本号"><a href="#1-1-查看nginx版本号" class="headerlink" title="1.1  查看nginx版本号"></a>1.1  查看nginx版本号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/1.22.0</span><br></pre></td></tr></table></figure><h4 id="1-2-关闭nginx"><a href="#1-2-关闭nginx" class="headerlink" title="1.2 关闭nginx"></a>1.2 关闭nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2222       1  0 08:14 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nginx       2223    2222  0 08:14 ?        00:00:00 nginx: worker process</span><br><span class="line">root        2276    2175  0 08:19 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@192 sbin]# ./nginx -s stop</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2280    2175  0 08:19 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="1-3-启动nginx"><a href="#1-3-启动nginx" class="headerlink" title="1.3 启动nginx"></a>1.3 启动nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2280    2175  0 08:19 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@192 sbin]# ./nginx</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2290       1  0 08:20 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nginx       2291    2290  0 08:20 ?        00:00:00 nginx: worker process</span><br><span class="line">root        2293    2175  0 08:20 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="1-4-重载配置文件"><a href="#1-4-重载配置文件" class="headerlink" title="1.4 重载配置文件"></a>1.4 重载配置文件</h4><p>配置文件位置：&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="2、配置文件介绍"><a href="#2、配置文件介绍" class="headerlink" title="2、配置文件介绍"></a>2、配置文件介绍</h3><h4 id="2-1-配置文件位置："><a href="#2-1-配置文件位置：" class="headerlink" title="2.1 配置文件位置："></a>2.1 配置文件位置：</h4><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/nginx.png" class="" title="nginx image"><h4 id="2-2-指令"><a href="#2-2-指令" class="headerlink" title="2.2 指令"></a>2.2 指令</h4><h5 id="2-2-1-简单指令："><a href="#2-2-1-简单指令：" class="headerlink" title="2.2.1 简单指令："></a>2.2.1 简单指令：</h5><ul><li>名称+参数组成</li><li><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/nginx2.png" class="" title="nginx2 image"></li></ul><h5 id="2-2-2-块指令："><a href="#2-2-2-块指令：" class="headerlink" title="2.2.2 块指令："></a>2.2.2 块指令：</h5><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/nginx3.png" class="" title="nginx3 image"><h4 id="2-3-整体分类"><a href="#2-3-整体分类" class="headerlink" title="2.3 整体分类"></a>2.3 整体分类</h4><h5 id="2-3-1-全局块"><a href="#2-3-1-全局块" class="headerlink" title="2.3.1 全局块"></a>2.3.1 全局块</h5><ul><li>从配置文件开始到events</li><li>配置一些影响nginx服务器整体运行的一些指令</li></ul><h5 id="2-3-2-events块"><a href="#2-3-2-events块" class="headerlink" title="2.3.2 events块"></a>2.3.2 events块</h5><ul><li>配置服务器与用户的网络链接相关的</li><li><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/nginx4.png" class="" title="nginx4 image"></li></ul><h5 id="2-3-3-http块"><a href="#2-3-3-http块" class="headerlink" title="2.3.3 http块"></a>2.3.3 http块</h5><ul><li>修改最频繁部分</li><li>配置文件引入、日志格式等等</li><li><img src="/2022/08/08/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/nginx5.png" class="" title="nginx5 image"></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx常用命令及配置文件&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/nginx/"/>
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://lyblog2022.github.io/2022/08/01/algorithm/tree/tree/"/>
    <id>https://lyblog2022.github.io/2022/08/01/algorithm/tree/tree/</id>
    <published>2022-08-01T06:04:23.000Z</published>
    <updated>2022-08-01T07:26:46.659Z</updated>
    
    <content type="html"><![CDATA[<p>树的基本概念及二叉树的概念和遍历，转自<a href="https://blog.csdn.net/Real_Fool_/article/details/113930623">数据结构：树(Tree)【详解】</a></p><span id="more"></span><h3 id="1-树的基本概念"><a href="#1-树的基本概念" class="headerlink" title="1. 树的基本概念"></a>1. 树的基本概念</h3><h4 id="1-1-树的定义"><a href="#1-1-树的定义" class="headerlink" title="1.1 树的定义"></a>1.1 树的定义</h4><p>​树是n（n&gt;&#x3D;0）个结点的有限集。当n &#x3D; 0时，称为空树。在任意一棵非空树中应满足：</p><ol><li>有且仅有一个特定的称为根的结点。</li><li>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一棵树，并且称为根的子树。</li></ol><p>​显然，树的定义是递归的，即在树的定义中又用到了自身，树是一种递归的数据结构。树作为一种逻辑结构，同时也是一种分层结构，具有以下两个特点：</p><ol><li>树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。</li><li>树中所有结点可以有零个或多个后继。</li></ol><p>​因此n个结点的树中有n-1条边。</p><h4 id="1-2-基本术语"><a href="#1-2-基本术语" class="headerlink" title="1.2 基本术语"></a>1.2 基本术语</h4><p>​下面结合图示来说明一下树的一些基本术语和概念。</p><img src="/2022/08/01/algorithm/tree/tree/tree1.png" class="" title="tree1 image"><ol><li>考虑结点K。根A到结点K的唯一路径上的任意结点,称为结点K的<strong>祖先</strong>。如结点B是结点K的祖先,而结点K是结点B的<strong>子孙</strong>。路径上最接近结点K的结点E称为K的<strong>双亲</strong>,而K为结点E的<strong>孩子</strong>。根A是树中唯一没有双亲的结点。有相同双亲的结点称为<strong>兄弟</strong>,如结点K和结点L有相同的双亲E,即K和L为兄弟。</li><li>树中一个结点的孩子个数称为该<strong>结点的度</strong>,树中结点的最大度数称为<strong>树的度</strong>。如结点B的度为2,结点D的度为3,树的度为3。</li><li>度大于0的结点称为<strong>分支结点</strong>(又称<strong>非终端结点</strong>);度为0(没有子女结点)的结点称为<strong>叶子结点</strong>(又称<strong>终端结点</strong>)。在分支结点中,每个结点的分支数就是该结点的度。</li><li>结点的深度、高度和层次。<ol><li><strong>结点的层次</strong>从树根开始定义,根结点为第1层,它的子结点为第2层,以此类推。双亲在同一层的结点互为<strong>堂兄弟</strong>,图中结点G与E,F,H,I,J互为堂兄弟。</li><li><strong>结点的深度</strong>是从根结点开始自顶向下逐层累加的。</li><li><strong>结点的高度</strong>是从叶结点开始自底向上逐层累加的。</li><li><strong>树的高度</strong>(或<strong>深度</strong>)是树中结点的最大层数。图中树的高度为4。</li></ol></li><li>有序树和无序树。树中结点的各子树从左到右是有次序的,不能互换,称该树为<strong>有序树</strong>,否则称为<strong>无序树</strong>。假设图为有序树,若将子结点位置互换,则变成一棵不同的树。</li><li>路径和路径长度。树中两个结点之间的<strong>路径</strong>是由这两个结点之间所经过的结点序列构成的,而<strong>路径长度</strong>是路径上所经过的边的个数。<br>注意:由于树中的分支是有向的,即从双亲指向孩子,所以树中的路径是从上向下的,同一双亲的两个孩子之间不存在路径。</li><li>森林。<strong>森林</strong>是m (m≥0)棵互不相交的树的集合。森林的概念与树的概念十分相近，因为只要把树的根结点删去就成了森林。反之，只要给m棵独立的树加上一个结点，并把这m棵树作为该结点的子树，则森林就变成了树。</li></ol><h4 id="1-3-树的性质"><a href="#1-3-树的性质" class="headerlink" title="1.3 树的性质"></a>1.3 树的性质</h4><p>​树具有如下最基本的性质：</p><ol><li>树中的结点数等于所有结点的度数加1.</li><li>度为m的树中，第i层上至多有m^(i-1)个节点（i&gt;&#x3D;1）</li><li>高度为h的m叉树至多有(m^h-1)&#x2F;(m-1)个节点</li><li>具有n个节点的m叉树的最小高度为[logm(n(m-1)+1)]</li></ol><h3 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2. 二叉树"></a>2. 二叉树</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><p>​二叉树是另一种树形结构，其特点是每个结点至多只有两棵子树( 即二叉树中不存在度大于2的结点)，并且二叉树的子树有左右之分，其次序不能任意颠倒。<br>​与树相似，二叉树也以递归的形式定义。二叉树是n (n≥0) 个结点的有限集合:</p><p>​二叉树是有序树，若将其左、右子树颠倒，则成为另一棵不同的二叉树。即使树中结点只有一棵子树，也要区分它是左子树还是右子树。二叉树的5种基本形态如图所示。</p><img src="/2022/08/01/algorithm/tree/tree/tree2.png" class="" title="tree2 image"><h4 id="2-2-特殊的二叉树"><a href="#2-2-特殊的二叉树" class="headerlink" title="2.2 特殊的二叉树"></a>2.2 特殊的二叉树</h4><h5 id="2-2-1-斜树"><a href="#2-2-1-斜树" class="headerlink" title="2.2.1 斜树"></a>2.2.1 斜树</h5><p>​所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p><h5 id="2-2-2-满二叉树"><a href="#2-2-2-满二叉树" class="headerlink" title="2.2.2 满二叉树"></a>2.2.2 满二叉树</h5><p>​一颗高度为h，且含有2^h-1个节点的二叉树称为满二叉树，即树中的每层都含有最多的节点。满二叉树的叶子结点都集中在二叉树的最下一层，并且出叶子结点之外的每个节点度数均为2。可以对满二叉树按层序编号：约定编号从根节点(根节点编号为1)起，自上而下，自左而右。这样，每个节点对应一个编号，对于编号为i的节点，若有双亲，则其双亲为i&#x2F;2，若有左孩子，则左孩子为2i；若有右孩子，则右孩子为2i+1</p><img src="/2022/08/01/algorithm/tree/tree/tree3.png" class="" title="tree3 image"><h5 id="2-2-3-完全二叉树"><a href="#2-2-3-完全二叉树" class="headerlink" title="2.2.3 完全二叉树"></a>2.2.3 完全二叉树</h5><p>​高度为h，有n个节点的二叉树，当且仅当其每个节点都与高度为h的满二叉树中编号为1~n的节点一一对应时，称为完全二叉树，其特点为：</p><ol><li>若i&lt;&#x3D;n&#x2F;2，则节点i为分支节点，否则为叶子节点</li><li>叶子结点只可能在层次最大的两层上出现。对于最大层次中的叶子结点，都依次排列在该层最左边的位置上。</li><li>若有度为1 的结点，则只可能有一个，且该结点只有左孩子而无右孩子(<strong>重要特征</strong>)。</li><li>按层序编号后，一旦出现某结点(编号为i)为叶子节点或只有左孩子，则编号大于i的节点均为叶子节点</li><li>若n为奇数，则每个分支节点都有左孩子和右孩子；若n为偶数，则编号最大的分支节点(编号为n&#x2F;2)只有左孩子，没有右孩子，其余分支节点左右孩子都有</li></ol><h5 id="2-2-4-二叉排序树"><a href="#2-2-4-二叉排序树" class="headerlink" title="2.2.4 二叉排序树"></a>2.2.4 二叉排序树</h5><p>​左子树上所有结点的关键字均小于根结点的关键字;右子树上的所有结点的关键字均大于根结点的关键字;左子树和右子树又各是一棵二叉排序树。</p><h5 id="2-2-5-平衡二叉树"><a href="#2-2-5-平衡二叉树" class="headerlink" title="2.2.5 平衡二叉树"></a>2.2.5 平衡二叉树</h5><p>​树上任一结点的左子树和右子树的深度之差不超过1。</p><h4 id="2-3-二叉树的性质"><a href="#2-3-二叉树的性质" class="headerlink" title="2.3 二叉树的性质"></a>2.3 二叉树的性质</h4><ol><li>任意一棵树，若节点数量为n，则边的数量为n-1</li><li>非空二叉树上的叶子节点树等于度为2的节点数+1</li><li>非空二叉树上第k层上至多有2^(k-1)个节点（k&gt;&#x3D;1）</li><li>高度为h的二叉树至多有2^h-1个节点（k&gt;&#x3D;1）</li><li>对完全二叉树按从上到下、从左到右的顺序依次编号1,2..n，则有以下关系<ol><li>i&gt;1时，节点i的双亲的编号为i&#x2F;2，即当i为偶数时，它是双亲的左孩子；当i为奇数时，它是双亲的右孩子</li><li>当2i&lt;&#x3D;n时，节点i的左孩子编号为2i，否则无左孩子</li><li>当2i+1&lt;&#x3D;n时，节点i的右孩子编号为2i+1，否则无右孩子</li><li>节点i所在的层次（深度）为{log2 i} +1</li></ol></li><li>具有n个（n&gt;0）节点的完全二叉树的高度为{log2 n}+1</li></ol><h4 id="2-4-二叉排序树"><a href="#2-4-二叉排序树" class="headerlink" title="2.4 二叉排序树"></a>2.4 二叉排序树</h4><p>​二叉排序树(也称二叉查找树)或者是一棵空树，或者是具有下列特性的二叉树:</p><ol><li>若左子树非空，则左子树上所有结点的值均小于根结点的值。</li><li>若右子树非空，则右子树上所有结点的值均大于根结点的值。</li><li>左、右子树也分别是一棵二叉排序树。</li></ol><h4 id="2-5-平衡二叉树"><a href="#2-5-平衡二叉树" class="headerlink" title="2.5 平衡二叉树"></a>2.5 平衡二叉树</h4><p>​平衡二叉树是一种儿茶排序树，其中每一个节点的左子树和右子树的高度差至多等于1</p><p>​它是一种高度平衡的二叉排序树。它要么是一棵空树， 要么它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;树的基本概念及二叉树的概念和遍历，转自&lt;a href=&quot;https://blog.csdn.net/Real_Fool_/article/details/113930623&quot;&gt;数据结构：树(Tree)【详解】&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:814. 二叉树剪枝</title>
    <link href="https://lyblog2022.github.io/2022/07/21/leetcode/middle/question814/"/>
    <id>https://lyblog2022.github.io/2022/07/21/leetcode/middle/question814/</id>
    <published>2022-07-21T09:06:19.000Z</published>
    <updated>2022-08-01T03:16:17.096Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/binary-tree-pruning/">二叉树剪枝</a></p><span id="more"></span><p>给你二叉树的根结点 root ，此外树的每个结点的值要么是 0 ，要么是 1 。</p><p>返回移除了所有不包含 1 的子树的原二叉树。</p><p>节点 node 的子树为 node 本身加上所有 node 的后代。</p><p>示例 1：</p><img src="/2022/07/21/leetcode/middle/question814/code1.png" class="" title="code1 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,null,0,0,1]</span><br><span class="line">输出：[1,null,0,null,1]</span><br><span class="line">解释：</span><br><span class="line">只有红色节点满足条件“所有不包含 1 的子树”。 右图为返回的答案。</span><br></pre></td></tr></table></figure><p>示例 2：</p><img src="/2022/07/21/leetcode/middle/question814/code2.png" class="" title="code2 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,0,1,0,0,0,1]</span><br><span class="line">输出：[1,null,1,null,1]</span><br></pre></td></tr></table></figure><p>示例 3：</p><img src="/2022/07/21/leetcode/middle/question814/code3.png" class="" title="code3 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,1,0,1,1,0,1,0]</span><br><span class="line">输出：[1,1,0,1,1,null,1]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>树中节点的数目在范围 [1, 200] 内</li><li>Node.val 为 0 或 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question814;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeNode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question814</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/21 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question814;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question814</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/21 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">pruneTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.left = pruneTree(root.left);</span><br><span class="line">            root.right = pruneTree(root.right);</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span> &amp;&amp; root.val == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-pruning/&quot;&gt;二叉树剪枝&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="middle" scheme="https://lyblog2022.github.io/categories/leetcode/middle/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:1260. 二维网格迁移</title>
    <link href="https://lyblog2022.github.io/2022/07/20/leetcode/easy/question1260/"/>
    <id>https://lyblog2022.github.io/2022/07/20/leetcode/easy/question1260/</id>
    <published>2022-07-20T09:32:32.000Z</published>
    <updated>2022-08-01T03:15:59.899Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二维网格迁移"><a href="#二维网格迁移" class="headerlink" title=" 二维网格迁移"></a><a href="https://leetcode.cn/problems/shift-2d-grid/"> 二维网格迁移</a></h4><span id="more"></span><h4 id="给你一个-m-行-n-列的二维网格-grid-和一个整数-k。你需要将-grid-迁移-k-次。"><a href="#给你一个-m-行-n-列的二维网格-grid-和一个整数-k。你需要将-grid-迁移-k-次。" class="headerlink" title="给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。"></a>给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。</h4><p>每次「迁移」操作将会引发下述活动：</p><ul><li><p>位于 grid [i][j] 的元素将会移动到 grid[i][j + 1]。</p></li><li><p>位于 grid[i][n - 1] 的元素将会移动到 grid[i + 1][0]。</p></li><li><p>位于 grid[m - 1][n - 1] 的元素将会移动到 grid[0][0]。</p></li><li><p>请你返回 k 次迁移操作后最终得到的 二维网格。</p></li></ul><p>示例 1：</p><img src="/2022/07/20/leetcode/easy/question1260/code1.png" class="" title="code1 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1</span><br><span class="line">输出：[[9,1,2],[3,4,5],[6,7,8]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><img src="/2022/07/20/leetcode/easy/question1260/code2.png" class="" title="code2 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4</span><br><span class="line">输出：[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9</span><br><span class="line">输出：[[1,2,3],[4,5,6],[7,8,9]]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><p>m &#x3D;&#x3D; grid.length</p></li><li><p>n &#x3D;&#x3D; grid[i].length</p></li><li><p>1 &lt;&#x3D; m &lt;&#x3D; 50</p></li><li><p>1 &lt;&#x3D; n &lt;&#x3D; 50</p></li><li><p>-1000 &lt;&#x3D; grid[i][j] &lt;&#x3D; 1000</p></li><li><p>0 &lt;&#x3D; k &lt;&#x3D; 100</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question1260;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question1260</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/20 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] grid = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().shiftGrid(grid, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">shiftGrid</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="comment">//列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (k % (m * n) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//特殊情况1，翻转次数是行*列的倍数，不需要处理</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> k % (m * n);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//特殊情况2，翻转次数是列的倍数，则行整体翻转</span></span><br><span class="line">            <span class="keyword">if</span> (rest % n == <span class="number">0</span>) &#123;</span><br><span class="line">                index = k / n;</span><br><span class="line">                System.out.println(index);</span><br><span class="line">                <span class="keyword">while</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> m - <span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span>[] tmp = grid[f];</span><br><span class="line">                    <span class="keyword">while</span> (f&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                        grid[f] = grid[f-<span class="number">1</span>];</span><br><span class="line">                        f--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    grid[<span class="number">0</span>] = tmp;</span><br><span class="line">                    index--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//数据处理</span></span><br><span class="line">                <span class="keyword">while</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//列交换</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> m-<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//最后一列备份</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp0</span> <span class="operator">=</span> grid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">                    <span class="keyword">while</span> (h&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                        tmp[h] = grid[h-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">                        h--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tmp[<span class="number">0</span>] = tmp0;</span><br><span class="line">                    h =<span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//交换</span></span><br><span class="line">                    <span class="keyword">while</span> (h&lt;m) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> (l&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                            grid[h][l] = grid[h][l-<span class="number">1</span>];</span><br><span class="line">                            l--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        grid[h][<span class="number">0</span>]=tmp[h];</span><br><span class="line">                        h++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//格式转化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                list.add(grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            resultList.add(list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;二维网格迁移&quot;&gt;&lt;a href=&quot;#二维网格迁移&quot; class=&quot;headerlink&quot; title=&quot; 二维网格迁移&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/shift-2d-grid/&quot;&gt; 二维网格迁移&lt;/a&gt;&lt;/h4&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:8. 字符串转换整数 (atoi)</title>
    <link href="https://lyblog2022.github.io/2022/07/19/leetcode/middle/question8/"/>
    <id>https://lyblog2022.github.io/2022/07/19/leetcode/middle/question8/</id>
    <published>2022-07-19T08:48:34.000Z</published>
    <updated>2022-08-01T03:16:12.648Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/string-to-integer-atoi/">请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 atoi 函数）</a>。</p><span id="more"></span><p>函数 myAtoi(string s) 的算法如下：</p><p>读入字符串并丢弃无用的前导空格<br>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。<br>返回整数作为最终结果。<br>注意：</p><p>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;42&quot;</span><br><span class="line">输出：42</span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 3 步：&quot;42&quot;（读入 &quot;42&quot;）</span><br><span class="line">           ^</span><br><span class="line">解析得到整数 42 。</span><br><span class="line">由于 &quot;42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;   -42&quot;</span><br><span class="line">输出：-42</span><br><span class="line">解释：</span><br><span class="line">第 1 步：&quot;   -42&quot;（读入前导空格，但忽视掉）</span><br><span class="line">            ^</span><br><span class="line">第 2 步：&quot;   -42&quot;（读入 &#x27;-&#x27; 字符，所以结果应该是负数）</span><br><span class="line">             ^</span><br><span class="line">第 3 步：&quot;   -42&quot;（读入 &quot;42&quot;）</span><br><span class="line">               ^</span><br><span class="line">解析得到整数 -42 。</span><br><span class="line">由于 &quot;-42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;4193 with words&quot;</span><br><span class="line">输出：4193</span><br><span class="line">解释：</span><br><span class="line">第 1 步：&quot;4193 with words&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步：&quot;4193 with words&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 3 步：&quot;4193 with words&quot;（读入 &quot;4193&quot;；由于下一个字符不是一个数字，所以读入停止）</span><br><span class="line">             ^</span><br><span class="line">解析得到整数 4193 。</span><br><span class="line">由于 &quot;4193&quot; 在范围 [-231, 231 - 1] 内，最终结果为 4193 。</span><br></pre></td></tr></table></figure><p>提示：</p><p>0 &lt;&#x3D; s.length &lt;&#x3D; 200<br>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/19 16:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().myAtoi(<span class="string">&quot;-+12&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myAtoi</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; s.length()) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(index);</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    result += c;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                    result += c;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                    result += c;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span>.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Double.parseDouble(result) &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Double.parseDouble(result) &lt; Integer.MIN_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.parseInt(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/string-to-integer-atoi/&quot;&gt;请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&amp;#x2F;C++ 中的 atoi 函数）&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="middle" scheme="https://lyblog2022.github.io/categories/leetcode/middle/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:14. 最长公共前缀</title>
    <link href="https://lyblog2022.github.io/2022/07/18/leetcode/easy/question14/"/>
    <id>https://lyblog2022.github.io/2022/07/18/leetcode/easy/question14/</id>
    <published>2022-07-18T08:40:03.000Z</published>
    <updated>2022-08-01T03:15:53.512Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串“”。</p><span id="more"></span><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; strs.length &lt;&#x3D; 200</li><li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 200</li><li>strs[i] 仅由小写英文字母组成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question14;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/18 16:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] str1 = &#123;<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;racecar&quot;</span>, <span class="string">&quot;car&quot;</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().longestCommonPrefix(str1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (strs != <span class="literal">null</span> &amp;&amp; strs.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先读取前两个字符串的公共前缀</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> strs[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; str1.length() &amp;&amp; index &lt; str2.length()) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">s1</span> <span class="operator">=</span> str1.charAt(index);</span><br><span class="line">                    <span class="type">char</span> <span class="variable">s2</span> <span class="operator">=</span> str2.charAt(index);</span><br><span class="line">                    <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                        text += s1;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (text == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(text)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> text;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    index = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">while</span> (index &lt; strs.length) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (strs[index].startsWith(text)) &#123;</span><br><span class="line">                            index++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">while</span> (text.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                text = text.substring(<span class="number">0</span>, text.length() - <span class="number">1</span>);</span><br><span class="line">                                <span class="keyword">if</span> (strs[index].startsWith(text)) &#123;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(text)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> text;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> text;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-common-prefix/&quot;&gt;最长公共前缀&lt;/a&gt;编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串“”。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:13.罗马数字转整数</title>
    <link href="https://lyblog2022.github.io/2022/07/16/leetcode/easy/question13/"/>
    <id>https://lyblog2022.github.io/2022/07/16/leetcode/easy/question13/</id>
    <published>2022-07-16T05:36:08.000Z</published>
    <updated>2022-08-23T08:42:23.543Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a></p><span id="more"></span><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/16 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().romanToInt(<span class="string">&quot;DCXXI&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//数据初始化</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;V&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;X&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">&quot;C&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;D&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;M&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        map.put(<span class="string">&quot;IV&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;IX&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">&quot;XL&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        map.put(<span class="string">&quot;XC&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CD&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CM&quot;</span>, <span class="number">900</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; s.length()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Character</span> <span class="variable">s1</span> <span class="operator">=</span> s.charAt(index);</span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> s1.toString();</span><br><span class="line">                <span class="comment">//组合字符处理</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="string">&quot;I&quot;</span>.equals(text) || <span class="string">&quot;X&quot;</span>.equals(text) || <span class="string">&quot;C&quot;</span>.equals(text)) &amp;&amp; index &lt; (s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                    text += s.charAt(++index);</span><br><span class="line">                    <span class="comment">//组合字符取值</span></span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(text)) &#123;</span><br><span class="line">                        num += map.get(text);</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//单个字符取值</span></span><br><span class="line">                        text = text.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                        num += map.get(text);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    num += map.get(text);</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                result += num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/roman-to-integer/&quot;&gt;罗马数字转整数&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>平衡树及红黑树</title>
    <link href="https://lyblog2022.github.io/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>https://lyblog2022.github.io/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2022-07-11T09:38:25.000Z</published>
    <updated>2022-08-01T13:51:17.865Z</updated>
    
    <content type="html"><![CDATA[<p>平衡二叉树及红黑树</p> <span id="more"></span><h3 id="1-平衡二叉树"><a href="#1-平衡二叉树" class="headerlink" title="1. 平衡二叉树"></a>1. 平衡二叉树</h3><p>​平衡二叉树有以下规则：</p><ul><li>规则1：每个节点最多只有两个子节点（二叉）</li><li>规则2：每个节点的值比它的左子树所有的节点大，比它的右子树所有节点小（有序）</li><li>规则3：每个节点左子树的高度与右子树高度之差的绝对值不超过1</li></ul><p>【总结】:平衡二叉树其实就是高度相对平衡的有两个子节点的有序树。</p><h3 id="2-红黑树"><a href="#2-红黑树" class="headerlink" title="2. 红黑树"></a>2. 红黑树</h3><p>​红黑树和上面的平衡二叉树类似，本质上都是为了解决排序二叉树在极端情况下退化成链表导致检索效率大大降低的问题，红黑树最早是由 Rudolf Bayer 于 1972 年发明的。</p><p>红黑树首先肯定是一个排序二叉树，它在每个节点上增加了一个存储位来表示节点的颜色，可以是 RED 或 BLACK 。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree1.png" class="" title="tree1 image"><h4 id="2-1-特性"><a href="#2-1-特性" class="headerlink" title="2.1 特性"></a>2.1 特性</h4><ol><li>每个节点要么是红色，要么是黑色。</li><li>根节点永远是黑色的。</li><li>所有的叶子节点都是空节点（即null），并且是黑色的。</li><li>每个红色节点的两个子节点都是黑色。（从每个叶子到根的路径上不会有两个连续的红色节点</li><li>从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点。</li></ol><p>红黑树的平衡通过旋转实现，任何不平衡都会在三次旋转之内解决。查找，插入，删除的时间复杂度均为O(log(N))</p><p>【说明】</p><ul><li>对于性质 1 和性质 2 ，相当于是对红黑树每个节点的约束，根节点是黑色，其他的节点要么是红色，要么是黑色。</li><li>性质 3 中指定红黑树的每个叶子节点都是空节点，而且叶子节点都是黑色，但 Java 实现的红黑树会使用 null 来代表空节点，因此我们在遍历 Java里的红黑树的时候会看不到叶子节点，而看到的是每个叶子节点都是红色的，这一点需要注意。</li><li>约束4和5，保证了红黑树的<strong>大致平衡</strong>：根到叶子的所有路径中，最长路径不会超过最短路径的2倍。</li><li>使得红黑树在最坏的情况下，也能有O(log2 N)的查找效率</li><li>红黑树在最差情况下，最长的路径都不会比最短的路径长出两倍。其实红黑树并不是真正的平衡二叉树，它只能保证大致是平衡的，因为红黑树的高度不会无限增高，在实际应用用，红黑树的统计性能要高于平衡二叉树，但极端性能略差。</li></ul><h4 id="2-2-红黑树的插入"><a href="#2-2-红黑树的插入" class="headerlink" title="2.2 红黑树的插入"></a>2.2 红黑树的插入</h4><p>​红黑树的插入和普通排序二叉树的插入基本一致，排序二叉树的要求是左子树上的所有节点都要比根节点小，右子树上的所有节点都要比跟节点大，当插入一个新的节点的时候，首先要找到当前要插入的节点适合放在排序二叉树哪个位置，然后插入当前节点即可。红黑树和排序二叉树不同的是，红黑树需要在插入节点调整树的结构来让树保持平衡。</p><p>​一般情况下，红黑树中新插入的节点都是红色的，那么，为什么说新加入到红黑树中的节点要是红色的呢？</p><p>​这个问题可以这样理解，我们从性质5中知道，当前红黑树中从根节点到每个叶子节点的黑色节点数量是一样的，此时假如新的黑色节点的话，必然破坏规则，但加入红色节点却不一定，除非其父节点就是红色节点，因此加入红色节点，破坏规则的可能性小一些。</p><p>​接下来我们重点来讲红黑树插入新节点后是如何保持平衡的。</p><p>​给定下面这样一颗红黑树：</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree2.png" class="" title="tree2 image"><p>​当插入值为66的节点的时候，示意图如下：</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree3.png" class="" title="tree3 image"><p>​很明显，这个时候结构依然遵循着上述5大特性，无需启动自动平衡机制调整节点平衡状态。</p><p>​如果再向里面插入值为51的节点，这个时候红黑树变成了这样。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree4.png" class="" title="tree4 image"><p>​这样的结构实际上是不满足性质4的，红色两个子节点必须是黑色的，而这里49这个红色节点现在有个51的红色节点与其相连。</p><p>​这个时候需要调整这个树的结构来保证红黑树的平衡。</p><p>​首先尝试将49这个节点设置为黑色，如下示意图。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree5.png" class="" title="tree5 image"><p>​这个时候黑高是不对的，其中 60-56-45-49-51-null 这条路径有 4 个黑节点，其他路径的黑色节点是 3 个。</p><p>​接着调整红黑树，再次尝试把45这个节点设置为红色的，如下图所示：</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree6.png" class="" title="tree6 image"><p>​这个时候又出现新的问题，56-45-43 都是红色节点的，出现了红色节点相连的问题。</p><p>​于是需要再把 56 和 43 设置为黑色的，如下图所示。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree7.png" class="" title="tree7 image"><p>​于是把 68 这个红色节点设置为黑色的。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree8.png" class="" title="tree8 image"><p>​对于这种红黑树插入节点的情况下，可以只需要通过变色就可以保持树的平衡了。但是并不是每次都是这么幸运的，当变色行不通的时候，需要考虑另一个手段就是旋转了。</p><p>【例如】下面这种情况，同样还是拿这颗红黑树举例。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree9.png" class="" title="tree9 image"></p><p>​现在这颗红黑树，我们现在插入节点65。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree10.png" class="" title="tree10 image"></p><p>​尝试把 66 这个节点设置为黑色，如下图所示。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree11.png" class="" title="tree11 image"></p><p>​这样操作之后黑高又出现不一致的情况了，60-68-64-null 有 3 个黑色节点，而60-68-64-66-null 这条路径有 4 个黑色节点，这样的结构是不平衡的。</p><p>​或者把 68 设置为黑色，把 64 设置为红色，如下图所示：</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree12.png" class="" title="tree12 image"></p><p>​但是，同样的问题，上面这颗红黑树的黑色高度还是不一致，60-68-64-null 和 60-68-64-66-null 这两条路径黑色高度还是不一致。</p><p>​这种情况如果只通过变色的情况是不能保持红黑树的平衡的。</p><h4 id="2-3-红黑树的旋转"><a href="#2-3-红黑树的旋转" class="headerlink" title="2.3 红黑树的旋转"></a>2.3 红黑树的旋转</h4><h5 id="2-3-1-左旋"><a href="#2-3-1-左旋" class="headerlink" title="2.3.1 左旋"></a>2.3.1 左旋</h5><p>​逆时针旋转两个节点，让一个节点被其右子节点取代，而该节点成为右子节点的左子节点。</p><p>​首先断开节点PL与右子节点G的关系，同时将其右子节点的引用指向节点C2；然后断开节点G与左子节点C2的关系，同时将G的左子节点的应用指向节点PL。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree13.png" class="" title="tree13 image"></p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree.gif" class="" title="tree image"></p><h5 id="2-3-2-右旋"><a href="#2-3-2-右旋" class="headerlink" title="2.3.2 右旋"></a>2.3.2 右旋</h5><p>​顺时针旋转两个节点，让一个节点被其左子节点取代，而该节点成为左子节点的右子节点。</p><p>​首先断开节点G与左子节点PL的关系，同时将其左子节点的引用指向节点C2；然后断开节点PL与右子节点C2的关系，同时将PL的右子节点的应用指向节点G。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree14.png" class="" title="tree14 image"></p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree2.gif" class="" title="tree2 image"></p><h4 id="2-4-红黑树的几种旋转场景"><a href="#2-4-红黑树的几种旋转场景" class="headerlink" title="2.4 红黑树的几种旋转场景"></a>2.4 红黑树的几种旋转场景</h4><h5 id="2-4-1-左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）"><a href="#2-4-1-左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）" class="headerlink" title="2.4.1 左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）"></a>2.4.1 左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）</h5><p>​如下图所示的红黑树，插入节点是65。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree15.png" class="" title="tree15 image"></p><p>​操作步骤如下可以围绕祖父节点 69 右旋，再结合变色，步骤如下所示</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree16.png" class="" title="tree16 image"></p><h5 id="2-4-2-左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）"><a href="#2-4-2-左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）" class="headerlink" title="2.4.2 左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）"></a>2.4.2 左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）</h5><p>​还是上面这颗红黑树，再插入节点 67。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree15.png" class="" title="tree15 image"></p><p>​这种情况可以这样操作，先围绕父节点 66 左旋，然后再围绕祖父节点 69 右旋，最后再将 67 设置为黑色，把 69 设置为红色，如下图所示。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree17.png" class="" title="tree17 image"></p><h5 id="2-4-3-右左节点旋转（插入节点的父节点是右节点，插入节点左节点）"><a href="#2-4-3-右左节点旋转（插入节点的父节点是右节点，插入节点左节点）" class="headerlink" title="2.4.3 右左节点旋转（插入节点的父节点是右节点，插入节点左节点）"></a>2.4.3 右左节点旋转（插入节点的父节点是右节点，插入节点左节点）</h5><p>​如下图这种情况，要插入节点68。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree18.png" class="" title="tree18 image"></p><p>​这种情况，可以先围绕父节点 69 右旋，接着再围绕祖父节点 66 左旋，最后把 68 节点设置为黑色，把 66 设置为红色，具体操作步骤如下所示。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree19.png" class="" title="tree19 image"></p><h5 id="2-4-4-右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）"><a href="#2-4-4-右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）" class="headerlink" title="2.4.4 右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）"></a>2.4.4 右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）</h5><p>​还是来上面的图来举例，在这颗红黑树上插入节点 70 。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree20.png" class="" title="tree20 image"></p><p>​可以这样操作围绕祖父节点 66 左旋，再把旋转后的根节点 69 设置为黑色，把 66 这个节点设置为红色。具体可以参看下图：</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree21.png" class="" title="tree21 image"></p><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_27098537/article/details/122796569">红黑树与平衡二叉树_百图详解红黑树</a></li><li><a href="https://blog.csdn.net/weixin_44780082/article/details/112239269">【数据结构】红黑树与平衡二叉树的区别以及原理详解（附图解）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;平衡二叉树及红黑树&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="红黑树" scheme="https://lyblog2022.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="平衡树" scheme="https://lyblog2022.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ初步学习</title>
    <link href="https://lyblog2022.github.io/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>https://lyblog2022.github.io/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-26T02:17:45.000Z</published>
    <updated>2022-09-15T03:32:16.112Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ学习及简单原理简介</p><span id="more"></span><h3 id="1、AMQP"><a href="#1、AMQP" class="headerlink" title="1、AMQP"></a>1、AMQP</h3><h4 id="1-1-AMQP"><a href="#1-1-AMQP" class="headerlink" title="1.1 AMQP"></a>1.1 AMQP</h4><p>​<code>AMQP</code>(<code>Advanced Message Queuing Protocol</code>，高级消息队列协议)是进程之间传递异步消息的网络协议。</p><h4 id="1-2-AMQP工作过程"><a href="#1-2-AMQP工作过程" class="headerlink" title="1.2 AMQP工作过程"></a>1.2 AMQP工作过程</h4><p>​发布者(Publisher)发布消息(Message)，经过交换机(Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列(Queue)，最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。</p><img src="/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/mq1.png" class="" title="mq1 image"><h4 id="1-3-队列"><a href="#1-3-队列" class="headerlink" title="1.3 队列"></a>1.3 队列</h4><p>​队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。</p><p>​MQ（消息队列）很多功能都是基于此队列结构实现的</p><p>​<img src="/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/mq2.png" class="" title="mq2 image"></p><h3 id="2、RabbitMQ"><a href="#2、RabbitMQ" class="headerlink" title="2、RabbitMQ"></a>2、RabbitMQ</h3><h4 id="2-1-RabbitMQ介绍"><a href="#2-1-RabbitMQ介绍" class="headerlink" title="2.1 RabbitMQ介绍"></a>2.1 RabbitMQ介绍</h4><p>​RabbitMQ是由Erlang语言编写的基于AMQP的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。</p><h5 id="2-1-1-解决应用耦合"><a href="#2-1-1-解决应用耦合" class="headerlink" title="2.1.1 解决应用耦合"></a>2.1.1 解决应用耦合</h5><p>​不使用MQ时</p><p>​<img src="/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/mq3.png" class="" title="mq3 image"></p><p>​使用MQ解决耦合</p><p>​<img src="/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/mq4.png" class="" title="mq4 image"></p><h4 id="2-2-RabbitMQ适用场景"><a href="#2-2-RabbitMQ适用场景" class="headerlink" title="2.2 RabbitMQ适用场景"></a>2.2 RabbitMQ适用场景</h4><ul><li>排队算法 : 使用消息队列特性</li><li>秒杀活动 : 使用消息队列特性</li><li>消息分发 : 使用消息异步特性</li><li>异步处理 : 使用消息异步特性</li><li>数据同步 : 使用消息异步特性</li><li>处理耗时任务 : 使用消息异步特性</li><li>流量销峰</li></ul><h3 id="3、RabbitMQ原理"><a href="#3、RabbitMQ原理" class="headerlink" title="3、RabbitMQ原理"></a>3、RabbitMQ原理</h3><p>​<img src="/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/mq5.png" class="" title="mq5 image"></p><ol><li><strong>Message</strong>：消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出消息可能持久性存储)等。</li><li><strong>Publisher</strong>：消息的生产者。也是一个向交换器发布消息的客户端应用程序。</li><li><strong>Consumer</strong>：消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。</li><li><strong>Exchange</strong>：交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型1. direct(发布与订阅 完全匹配)2. fanout(广播)3. topic(主题，规则匹配)</li><li><strong>Binding</strong>：绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li><li><strong>Queue</strong>：消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。</li><li><strong>Routing-key</strong>：路由键。RabbitMQ决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是key，队列是value）队列通过路由键绑定到交换器。消息发送到MQ服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞</li><li><strong>Connection</strong>：链接。指rabbit服务器和服务建立的TCP链接。</li><li><strong>Channel</strong>：信道。</li><li>Channel中文叫做信道，是TCP里面的虚拟链接。例如：电缆相当于TCP，信道是一个独立光纤束，一条TCP连接上创建多条信道是没有问题的。</li><li>TCP一旦打开，就会创建AMQP信道</li><li>无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。</li><li><strong>Virtual Host</strong>：虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是**&#x2F;**</li><li><strong>Borker</strong>：表示消息队列服务器实体。</li><li><strong>交换器和队列的关系</strong>：交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。</li><li><strong>RabbitMQ为什么需要信道？为什么不是TCP直接通信？</strong></li><li>TCP的创建和销毁开销特别大。创建需要3次握手，销毁需要4次分手</li><li>如果不用信道，那应用程序就会以TCP链接Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理TCP链接数也是有限制的，必定造成性能瓶颈</li><li>信道的原理是一条线程一条通道，多条线程多条通道同用一条TCP链接。一条TCP链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。</li></ol><h3 id="4、交换器（交换机）"><a href="#4、交换器（交换机）" class="headerlink" title="4、交换器（交换机）"></a>4、交换器（交换机）</h3><p>​交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在RabbitMQ中支持四种交换器</p><ol><li>Direct Exchange：直连交换器（默认）</li><li>Fanout Exchange：扇形交换器</li><li>Topic Exchange：主题交换器</li><li>Header Exchange：首部交换器。</li></ol><p>​在RabbitMq的Web管理界面中Exchanges选项卡就可以看见这四个交换器。</p><img src="/2022/06/26/study/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/RabbitMQ%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/mq6.png" class="" title="mq6 image"><h4 id="4-1-direct交换器"><a href="#4-1-direct交换器" class="headerlink" title="4.1 direct交换器"></a>4.1 direct交换器</h4><p>​direct交换器是RabbitMQ默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。</p><p>​代码实现</p><h5 id="4-1-1-添加依赖"><a href="#4-1-1-添加依赖" class="headerlink" title="4.1.1 添加依赖"></a>4.1.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-编写配置文件"><a href="#4-1-2-编写配置文件" class="headerlink" title="4.1.2 编写配置文件"></a>4.1.2 编写配置文件</h5><p>​新建application.yml.</p><p>​host:默认值localhost</p><p>​username默认值：guest</p><p>​password默认值：guest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.133</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ly</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">qwq</span></span><br></pre></td></tr></table></figure><h5 id="4-1-3-配置类"><a href="#4-1-3-配置类" class="headerlink" title="4.1.3 配置类"></a>4.1.3 配置类</h5><p>​队列的创建只有没有这个队列的时候需要编写。以后没有这个queue()方法也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitwqConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.rabbitmq.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/26 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitwqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">protected</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myQueue&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-4-编写测试类"><a href="#4-1-4-编写测试类" class="headerlink" title="4.1.4 编写测试类"></a>4.1.4 编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RabbitmqApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * provider</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;myQueue&quot;</span>,<span class="string">&quot;send text312312&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-5-创建consumer"><a href="#4-1-5-创建consumer" class="headerlink" title="4.1.5 创建consumer"></a>4.1.5 创建consumer</h5><p>pom文件，yml文件，config文件与provider相同</p><h5 id="4-1-6-编写监听器"><a href="#4-1-6-编写监听器" class="headerlink" title="4.1.6 编写监听器"></a>4.1.6 编写监听器</h5><p>​注意：</p><p>​类上要有@Componet，项目启动时此类生效。</p><p>​@RabbitListener 监听指定队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq.receive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReceiveDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.rabbitmq.receive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/26 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的消息：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的消息22222222：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-fanout交换器"><a href="#4-2-fanout交换器" class="headerlink" title="4.2 fanout交换器"></a>4.2 fanout交换器</h4><p>​扇形交换器，实际上做的事情就是广播，fanout会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个Consumer能收到消息。</p><p>​代码示例</p><p>pom文件、yml文件与direct示例相同</p><h5 id="4-2-1-修改配置类"><a href="#4-2-1-修改配置类" class="headerlink" title="4.2.1 修改配置类"></a>4.2.1 修改配置类</h5><p>在config配置文件内添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">createQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myfanout1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">createQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myfanout2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">getFanout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;amq.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(Queue createQueue1,FanoutExchange getFanout)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(createQueue1).to(getFanout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding2</span><span class="params">(Queue createQueue2,FanoutExchange getFanout)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(createQueue2).to(getFanout);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-编写发送方法"><a href="#4-2-2-编写发送方法" class="headerlink" title="4.2.2 编写发送方法"></a>4.2.2 编写发送方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">contextLoads2</span><span class="params">()</span> &#123;</span><br><span class="line">       amqpTemplate.convertAndSend(<span class="string">&quot;amq.fanout&quot;</span>,<span class="string">&quot;core&quot;</span>,<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-consumer"><a href="#4-2-3-consumer" class="headerlink" title="4.2.3 consumer"></a>4.2.3 consumer</h4><p>在receiveDemo下添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;myfanout1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;myfanout1:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myfanout2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo4</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;myfanout2:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-topic交换器"><a href="#4-3-topic交换器" class="headerlink" title="4.3 topic交换器"></a>4.3 topic交换器</h4><p>​允许在路由键（RoutingKey）中出现匹配规则。</p><p>​路由键的写法和包写法相同。com.xxxx.xxx格式。</p><p>​在绑定时可以带有下面特殊符号，中间可以出现:</p><p>​* : 代表一个单词（两个.之间内容）</p><p>​# : 0个或多个字符</p><p>​接收方依然是公平调度，同一个队列中内容轮换获取值。</p><p>​示例代码</p><p>pom，yml文件与以上相同</p><h5 id="4-3-1-修改配置类"><a href="#4-3-1-修改配置类" class="headerlink" title="4.3.1 修改配置类"></a>4.3.1 修改配置类</h5><p>在config文件中添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">getTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;amq.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding1</span><span class="params">(Queue topicQueue1,TopicExchange getTopic)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(getTopic).with(<span class="string">&quot;com.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding2</span><span class="params">(Queue topicQueue2,TopicExchange getTopic)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2).to(getTopic).with(<span class="string">&quot;com.#&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-发送消息"><a href="#4-3-2-发送消息" class="headerlink" title="4.3.2 发送消息"></a>4.3.2 发送消息</h5><p>​第二个参数为路由键，匹配配置类中绑定时的路由规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads3</span><span class="params">()</span> &#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;amq.topic&quot;</span>,<span class="string">&quot;com.q.w&quot;</span>,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-3-Consumer"><a href="#4-3-3-Consumer" class="headerlink" title="4.3.3 Consumer"></a>4.3.3 Consumer</h5><p>​在receiveDemo下添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo5</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;topic1:&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@RabbitListener(queues = &quot;topic2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo6</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;topic2:&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ学习及简单原理简介&lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/"/>
    
    
    <category term="中间件" scheme="https://lyblog2022.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
