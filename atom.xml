<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Note</title>
  
  <subtitle>Welcome To My World</subtitle>
  <link href="https://lyblog2022.github.io/note/atom.xml" rel="self"/>
  
  <link href="https://lyblog2022.github.io/note/"/>
  <updated>2022-06-05T01:50:44.382Z</updated>
  <id>https://lyblog2022.github.io/note/</id>
  
  <author>
    <name>ly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring</title>
    <link href="https://lyblog2022.github.io/note/2022/06/04/study/Spring/"/>
    <id>https://lyblog2022.github.io/note/2022/06/04/study/Spring/</id>
    <published>2022-06-04T08:59:55.000Z</published>
    <updated>2022-06-05T01:50:44.382Z</updated>
    
    <content type="html"><![CDATA[<p>Spring学习</p><span id="more"></span><h2 id="1、Spring框架"><a href="#1、Spring框架" class="headerlink" title="1、Spring框架"></a>1、<code>Spring</code>框架</h2><h3 id="1-1-Spring框架"><a href="#1-1-Spring框架" class="headerlink" title="1.1 Spring框架"></a>1.1 <code>Spring</code>框架</h3><p>​<code>Spring</code>框架是由于软件开发的复杂性而创建的。<code>Spring</code>使用的是基本的<code>JavaBean</code>来完成以前只可能由<code>EJB</code>完成的事情。然而，<code>Spring</code>的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分<code>Java</code>应用都可以从<code>Spring</code>中受益。</p><p>​—-百度百科</p><ul><li>目的：解决企业应用开发的复杂性</li><li>功能：使用基本的<code>JavaBean</code>代替<code>EJB</code>，并提供更对的企业应用功能</li><li>范围：任何<code>Java</code>应用</li></ul><p>​<code>Spring</code>是分层的全栈式的轻量级开发框架，以<code>IOC</code>和<code>AOP</code>为核心</p><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ol><li>方便解耦，简化开发</li></ol><p><code>Spring</code>通过容器，将对象的创建从代码中剥离出来，交给<code>Spring</code>控制，避免直接编码造成模块之间的耦合度高，用户也不必自己编码处理对象的单例和多例控制，主要关注接口功能即可，不用关注具体使用哪个实现类和实现细节问题 </p><ol start="2"><li><code>AOP</code>切面编程</li></ol><p><code>AOP</code>切面编程是程序设计的一种概念，<code>Spring</code>对该概念实现的比较好，通过切面编程我们可以在不修改原有代码的情况下实现功能的增加，通常用于事务控制、日志记录、性能检测、权限控制等等</p><ol start="3"><li>声明式事务</li></ol><p>事务的控制可以托管给<code>Spring</code>，我们通过注解或者配置文件声明事务的处理方式即可，不用我们自己去编码处理</p><ol start="4"><li>整合<code>JUNIT</code>，方便测试</li></ol><p><code>spring</code>整合<code>JUNIT</code>单元测试，对于项目的功能都可以进行轻松快速的测试，便于我们调试程序</p><ol start="5"><li>方便整合各种优秀的框架</li><li>丰富的功能封装</li></ol><p><code>spring</code>对<code>JAVAEE</code>(<code>JDBC </code>，<code>JAVAMail</code>)都进行了一系列的封装，简化我们对于<code>API</code>的使用，提高程序的开发效率</p><ol start="7"><li>规范的源码学习样本</li></ol><p><code>spring</code>的源码设计巧妙，结构清晰，大量使用了设计模式，是<code>java</code>代码规范编写的典范</p><h2 id="2、Spring模块"><a href="#2、Spring模块" class="headerlink" title="2、Spring模块"></a>2、<code>Spring</code>模块</h2><img src="/note/2022/06/04/study/Spring/Spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" class="" title="Spring体系结构 image"><h3 id="2-1-Data-Access-Integration（数据访问／集成）"><a href="#2-1-Data-Access-Integration（数据访问／集成）" class="headerlink" title="2.1 Data Access/Integration（数据访问／集成）"></a>2.1 <code>Data Access/Integration</code>（数据访问／集成）</h3><p>数据访问&#x2F;集成层包括 <code>JDBC</code>、<code>ORM</code>、<code>OXM</code>、JMS<code> </code>和 <code>Transactions </code>模块</p><ul><li><p><code>JDBC </code>模块：提供了一个 <code>JDBC </code>的抽象层，大幅度减少了在开发过程中对数据库操作的编码。</p></li><li><p><code>ORM </code>模块：对流行的对象关系映射 <code>API</code>，包括 <code>JPA</code>、<code>JDO</code>、<code>Hibernate</code>和 <code>iBatis </code>提供了的集成层。</p></li><li><p><code>OXM </code>模块：提供了一个支持对象<code>XML </code>映射的抽象层实现，如 <code>JAXB</code>、<code>Castor</code>、<code>XMLBeans</code>、<code>JiBX </code>和 <code>XStream</code>。 </p></li><li><p><code>JMS </code>模块：指<code>JAVA</code>消息服务，包含的功能为生产和消费的信息。</p></li><li><p><code>Transactions </code>事务模块：支持编程和声明式事务管理实现特殊接口类，并为所有的 <code>POJO</code>。</p></li></ul><h3 id="2-2-Web-模块"><a href="#2-2-Web-模块" class="headerlink" title="2.2  Web 模块"></a>2.2  <code>Web </code>模块</h3><p><code>Spring </code>的 <code>Web </code>层包括 <code>Web</code>、<code>Servlet</code>、<code>Struts </code>和 <code>Portlet </code>组件</p><ul><li><code>Web </code>模块：提供了基本的 <code>Web </code>开发集成特性，例如多文件上传功能、使用的 <code>Servlet </code>监听器的 <code>IoC </code>容器初始化以及 <code>Web </code>应用上下文。</li><li><code>Servlet</code>模块：包括 <code>Spring </code>模型—视图—控制器（<code>MVC</code>）实现 <code>Web</code>应用程序。</li><li><code>Struts </code>模块：包含支持类内的 <code>Spring </code>应用程序，集成了经典的 <code>Struts Web</code> 层。</li><li><code>Portlet </code>模块：提供了在 <code>Portlet </code>环境中使用 <code>MVC</code>实现，类似 <code>Web-Servlet</code> 模块的功能。</li></ul><h3 id="2-3-Core-Container（核心容器）"><a href="#2-3-Core-Container（核心容器）" class="headerlink" title="2.3 Core Container（核心容器）"></a>2.3 <code>Core Container</code>（核心容器）</h3><p><code>Spring </code>的核心容器是其他模块建立的基础，由 <code>Beans </code>模块、<code>Core </code>核心模块、<code>Context </code>上下文模块和 <code>Expression Language</code> 表达式语言模块组成</p><ul><li><code>Beans </code>模块：提供了 <code>BeanFactory</code>，是工厂模式的经典实现，<code>Spring </code>将管理对象称为 <code>Bean</code>。</li><li><code>Core </code>核心模块：提供了 <code>Spring </code>框架的基本组成部分，包括 <code>IoC </code>和 <code>DI </code>功能。</li><li><code>Context </code>上下文模块：建立在核心和 <code>Beans</code> 模块的基础之上，它是访问定义和配置任何对象的媒介。<code>ApplicationContext </code>接口是上下文模块的焦点。</li><li><code>Expression Language</code> 模块：是运行时查询和操作对象图的强大的表达式语言。</li></ul><h3 id="2-4-其他模块"><a href="#2-4-其他模块" class="headerlink" title="2.4 其他模块"></a>2.4 其他模块</h3><p><code>Spring</code>的其他模块还有 <code>AOP</code>、<code>Aspects</code>、<code>Instrumentation </code>以及 <code>Test </code>模块</p><ul><li><code>AOP </code>模块：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li><li><code>Aspects </code>模块：提供与 <code>AspectJ </code>的集成，是一个功能强大且成熟的面向切面编程（<code>AOP</code>）框架。</li><li><code>Instrumentation </code>模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li><code>Test </code>模块：支持 <code>Spring </code>组件，使用 <code>JUnit </code>或 <code>TestNG </code>框架的测试。</li></ul><h2 id="3、Spring-IOC"><a href="#3、Spring-IOC" class="headerlink" title="3、Spring_IOC"></a>3、Spring_IOC</h2><h3 id="3-1-控制反转"><a href="#3-1-控制反转" class="headerlink" title="3.1 控制反转"></a>3.1 控制反转</h3><p>​控制反转（Inversion of Control，缩写为<strong>IoC</strong>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫<strong>依赖查找</strong>（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。–【百度】</p><p>​简单来说，创建对象的权利，或者是控制的位置，由<code>Java</code>代码转移到<code>Spring</code>容器，由<code>Spring</code>的容器控制对象的创建，就是控制反转，<code>Spring</code>创建对象时，会读取配置文件中的信息，然后使用反射创建好的对象之后在容器中存储起来，当需要某个对象时，通过<code>id</code>获取对象即可，不需要自己去<code>new</code></p><h3 id="3-2-原理分析"><a href="#3-2-原理分析" class="headerlink" title="3.2 原理分析"></a>3.2 原理分析</h3><h4 id="3-2-1-XML解析"><a href="#3-2-1-XML解析" class="headerlink" title="3.2.1 XML解析"></a>3.2.1 XML解析</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dao.impl.StuDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​将上面的信息读取进入程序  对象的ID ,一个是对象的类的全路径名</p><h4 id="3-2-2-反射"><a href="#3-2-2-反射" class="headerlink" title="3.2.2 反射"></a>3.2.2 反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得类的字节码</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;com.dao.impl.StuDaoImpl&quot;</span>);</span><br><span class="line"><span class="comment">//通过字节码实例化对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span>  <span class="operator">=</span> clazz.newInstance(); </span><br><span class="line"><span class="comment">//将对象放到一个map集合中</span></span><br><span class="line">map.put(<span class="string">&quot;empDao&quot;</span>,obj)</span><br></pre></td></tr></table></figure><h4 id="3-2-3-工厂模式"><a href="#3-2-3-工厂模式" class="headerlink" title="3.2.3 工厂模式"></a>3.2.3 工厂模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span>&#123; </span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>map.get(name); </span><br><span class="line">    <span class="keyword">return</span> obj; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IOC</code>接口</p><ul><li><code>BeanFactory </code>接口：<code>IOC</code>容器基本功能接口，是<code>spring</code>内部使用的接口，我们在处理业务时一般不直接使用该接口</li><li><code>ApplicationContext </code>接口：<code>BeanFactory</code>的子接口，提供更多更强大的功能，研发人员一般使用的接口</li></ul><img src="/note/2022/06/04/study/Spring/spring2.png" class="" title="spring2 image"><h2 id="4、Spring-XML方式实现DI"><a href="#4、Spring-XML方式实现DI" class="headerlink" title="4、Spring_XML方式实现DI"></a>4、<code>Spring_XML</code>方式实现<code>DI</code></h2><p><code>spring</code>中的<code>Bean</code>的管理: </p><p><code>Bean</code>(汉译咖啡豆)，又称<code>JAVABean</code>，其实就是<code>JAVA</code>程序程序中的一个个对象，所以<code>Bean</code>的管理其实就是<code>spring</code>对于<code>JAVA</code>程序中的对象的管理</p><p>管理的内容</p><ul><li>对象的创建（<code>IOC</code>）：控制反转，就是<code>Spring</code>给我们创建对象，然后我们直接用，不用自己<code>NEW</code></li><li>属性的赋值（<code>DI</code>）：依赖注入，即创建属性时给对象属性赋值，对象功能的实现往往要依赖属性的值，由于对象属性不仅仅是基本数据类型，还可能是其他类或者引用类型，那么依赖注入将会把更多的对象之间的关系整理到一起，可以形成一个庞大的依赖关系，DI处理的是对象的属性赋值和互相依赖的关系</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过无参构造方法构造对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bean.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id:对象的id</span></span><br><span class="line"><span class="comment">class:类的全路径名</span></span><br><span class="line"><span class="comment">name:和id类似,一般不用</span></span><br><span class="line"><span class="comment">scope：控制对象单例多例和使用范围</span></span><br><span class="line"><span class="comment">singleton：作用域(scope 默认值), Spring IOC容器中只会存在一个共享的bean实例</span></span><br><span class="line"><span class="comment">prototype：作用域部署的bean，每一次获取都会产生一个新的bean实例，相当与一个new的操作</span></span><br><span class="line"><span class="comment">request：表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效</span></span><br><span class="line"><span class="comment">session：作用域表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP session内有效</span></span><br><span class="line"><span class="comment">global session：作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义</span></span><br><span class="line"><span class="comment">lazy-init：懒加载 调用getBean的时候再去实例化对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过set方法给对象属性赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bean.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abcdefg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过有参构造给对象属性赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.msb.bean.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.msb.bean.User&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--null值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--特殊符号 转译字符 &lt; &amp;lt;  &gt;&amp;gt;  &amp; &amp;amp;     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;<span class="symbol">&amp;amp;</span>xiaoming<span class="symbol">&amp;lt;</span><span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 特殊符号  &lt;![CDATA[内容]]&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&amp;&lt;123456&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、Spring-Bean生命周期"><a href="#5、Spring-Bean生命周期" class="headerlink" title="5、Spring_Bean生命周期"></a>5、<code>Spring_Bean</code>生命周期</h2><ol><li>通过构造器创建bean实例&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  执行构造器</li><li>为bean属性赋值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  执行set方法</li><li>初始化bean&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 调用bean的初始化方法,需要配置指定调用的方法</li><li>bean的获取&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 容器对象 getBean方法</li><li>容器关闭销毁bean&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 调用销毁方法,需要配置指定调用的方法</li></ol><h2 id="6、Spring注解方式管理Bean"><a href="#6、Spring注解方式管理Bean" class="headerlink" title="6、Spring注解方式管理Bean"></a>6、<code>Spring</code>注解方式管理<code>Bean</code></h2><h3 id="6-1-注解方式创建对象IOC"><a href="#6-1-注解方式创建对象IOC" class="headerlink" title="6.1 注解方式创建对象IOC"></a>6.1 注解方式创建对象<code>IOC</code></h3><ul><li>@Component：放在类上,用于标记，告诉<code>spring</code>当前类需要由容器实例化<code>bean</code>并放入容器中</li><li>@Controller：@Component子注解，用于实例化<code>controller</code>层<code>bean</code></li><li>@Service：@Component子注解，用于实例化<code>service</code>层<code>bean</code></li><li>@Repository：@Component子注解，用于实例化持久层<code>bean</code></li></ul><h3 id="6-2-注解方式依赖注入DI"><a href="#6-2-注解方式依赖注入DI" class="headerlink" title="6.2 注解方式依赖注入DI"></a>6.2 注解方式依赖注入<code>DI</code></h3><ul><li>@Autowired：根据属性数据类型自动装配</li><li>@Qualifier：根据属性名称注入依赖</li><li>@Resources：可以根据类型,也可以根据名称注入</li><li>@Value：注入普通数据类型(8+String)</li></ul><h2 id="7、Spring代理"><a href="#7、Spring代理" class="headerlink" title="7、Spring代理"></a>7、<code>Spring</code>代理</h2><h3 id="7-1-代理模式"><a href="#7-1-代理模式" class="headerlink" title="7.1 代理模式"></a>7.1 代理模式</h3><p>通过代理对象访问目标对象，可以在目标对象基础上增强额外的功能，如添加权限、访问控制等</p><img src="/note/2022/06/04/study/Spring/spring%E4%BB%A3%E7%90%86.png" class="" title="spring代理 image"><h3 id="7-2-静态代理"><a href="#7-2-静态代理" class="headerlink" title="7.2 静态代理"></a>7.2 静态代理</h3><p>​静态代理中代理类与被代理类都需要实现同一个接口，即一个静态代理类只能代理一个类，并且需要知道要代理哪个类才能编写代理类代码，如果有其他类想要使用代理类，就必须再写一个</p><p>​在实际开发中是可能有非常多的类需要被代理，并且可能并不知道要代理哪个类，所以继续使用静态代理反而会增加更多的工作量，且效率低下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>: Ly</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Court court=<span class="keyword">new</span> <span class="title class_">Lawyer</span>(person);</span><br><span class="line">court.doCourt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Court</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doCourt</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lawyer</span> <span class="keyword">implements</span> <span class="title class_">Court</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Lawyer</span><span class="params">(Person person)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.person = person;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCourt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;律师取证:视频证明张三当时正在旅游,不在案发现场&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;律师总结:张三不可能去杀人&quot;</span>);</span><br><span class="line">person.doCourt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Court</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCourt</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;说:我没有杀人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="7-3-动态代理"><a href="#7-3-动态代理" class="headerlink" title="7.3 动态代理"></a>7.3 动态代理</h3><p>​动态代理可以针对于一些不特定的类或者一些不特定的方法进行代理，可以在程序运行时动态的改变代理的规则，代理类在程序运行时才创建的代理模式，在这种情况下，代理类并不是在<code>Java</code>代码中定义好，而是在程序运行时根据在<code>Java</code>代码中的指示动态生成的</p><pre><code>+ `Proxy`动态代理：`JDK`动态代理，面向接口+ `cglib`动态代理：第三方动态代理，面向父类</code></pre><h4 id="7-3-1-Proxy动态代理"><a href="#7-3-1-Proxy动态代理" class="headerlink" title="7.3.1 Proxy动态代理"></a>7.3.1 <code>Proxy</code>动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testProxy;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Dinner dinner=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Porxy动态代理获得一个代理对象,在代理对象中,对某个方法进行增强</span></span><br><span class="line"><span class="comment">// ClassLoader loader,被代理的对象的类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> dinner.getClass().getClassLoader();</span><br><span class="line"><span class="comment">// Class&lt;?&gt;[] interfaces,被代理对象所实现的所有接口</span></span><br><span class="line">Class[] interaces= dinner.getClass().getInterfaces();</span><br><span class="line"><span class="comment">//InvocationHandler h,执行处理器对象,专门用于定义增强的规则</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line"><span class="comment">// invoke 当我们让代理对象调用任何方法时,都会触发invoke方法的执行</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//Object proxy, 代理对象</span></span><br><span class="line"><span class="comment">//Method method,被代理的方法</span></span><br><span class="line"><span class="comment">//Object[] args,被代理方法运行时的实参</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;eat&quot;</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;饭前洗手&quot;</span>);</span><br><span class="line"><span class="comment">// 让原有的eat的方法去运行</span></span><br><span class="line">res = method.invoke(dinner, args);</span><br><span class="line">System.out.println(<span class="string">&quot;饭后刷碗&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果是其他方法,那么正常执行就可以了</span></span><br><span class="line">res = method.invoke(dinner, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Dinner</span> <span class="variable">dinnerProxy</span> <span class="operator">=</span>(Dinner) Proxy.newProxyInstance(classLoader,interaces,handler);</span><br><span class="line"><span class="comment">//dinnerProxy.eat(&quot;包子&quot;);</span></span><br><span class="line">dinnerProxy.drink();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dinner</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String foodName)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Dinner</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String foodName)</span> &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;正在吃&quot;</span>+foodName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">( )</span> &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;正在喝茶&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Dinner</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String foodName)</span> &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;正在食堂吃&quot;</span>+foodName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">( )</span> &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;正在喝可乐&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​总结：</p><ul><li>在不修改原有代码的或者没有办法修改原有代码的情况下，增强对象功能使用代理对象代替原来的对象去完成功能，进而达到拓展功能的目的</li><li><code>JDK Proxy</code>动态代理是面向接口的动态代理，一定要有接口和实现类，代理对象增强的是实现类，在实现接口的方法重写方法，生成的代理对象只能转换成接口，不能转换成代理类<ul><li>生成的代理对象只能转换成接口，不能转换成被代理类</li><li>代理对象只能增强接口中定义的方法，实现类中其他和接口无关的方法是无法增强的</li><li>代理对象只能读取到接口中方法上的注解，不能读取到实现类方法上的注解</li></ul></li></ul><h4 id="7-3-2-cglib动态代理模式"><a href="#7-3-2-cglib动态代理模式" class="headerlink" title="7.3.2 cglib动态代理模式"></a>7.3.2 <code>cglib</code>动态代理模式</h4><img src="/note/2022/06/04/study/Spring/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" class="" title="cglib动态代理 image"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testCglib; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy; </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Ly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCglib</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// 获取一个Person的代理对象</span></span><br><span class="line"><span class="comment">// 1 获得一个Enhancer对象</span></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"><span class="comment">// 2 设置父类字节码</span></span><br><span class="line">enhancer.setSuperclass(person.getClass());</span><br><span class="line"><span class="comment">// 3 获取MethodIntercepter对象 用于定义增强规则</span></span><br><span class="line"><span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">/*  Object o,  生成之后的代理对象 personProxy</span></span><br><span class="line"><span class="comment">Method method,  父类中原本要执行的方法  Person&gt;&gt;&gt; eat()</span></span><br><span class="line"><span class="comment">Object[] objects, 方法在调用时传入的实参数组</span></span><br><span class="line"><span class="comment">MethodProxy methodProxy  子类中重写父类的方法 personProxy &gt;&gt;&gt; eat()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;eat&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">// 如果是eat方法 则增强并运行</span></span><br><span class="line">System.out.println(<span class="string">&quot;饭前洗手&quot;</span>);</span><br><span class="line">res = methodProxy.invokeSuper(o,objects);</span><br><span class="line">System.out.println(<span class="string">&quot;饭后刷碗&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果是其他方法 不增强运行</span></span><br><span class="line">res = methodProxy.invokeSuper(o,objects); <span class="comment">// 子类对象方法在执行,默认会调用父类对应被重写的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4 设置methodInterceptor</span></span><br><span class="line">enhancer.setCallback(methodInterceptor);</span><br><span class="line"><span class="comment">// 5 获得代理对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">personProxy</span> <span class="operator">=</span> (Person)enhancer.create();</span><br><span class="line"><span class="comment">// 6 使用代理对象完成功能</span></span><br><span class="line">personProxy.eat(<span class="string">&quot;包子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>  &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">( )</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String foodName)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;张三正在吃&quot;</span>+foodName);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring学习&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/note/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Spring" scheme="https://lyblog2022.github.io/note/categories/%E5%AD%A6%E4%B9%A0/Spring/"/>
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/note/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Spring" scheme="https://lyblog2022.github.io/note/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="https://lyblog2022.github.io/note/2022/06/04/study/Servlet/"/>
    <id>https://lyblog2022.github.io/note/2022/06/04/study/Servlet/</id>
    <published>2022-06-04T08:59:30.000Z</published>
    <updated>2022-06-04T10:16:44.166Z</updated>
    
    <content type="html"><![CDATA[<p>Servlet学习</p><span id="more"></span><h3 id="1、Servlet的继承结构"><a href="#1、Servlet的继承结构" class="headerlink" title="1、Servlet的继承结构"></a>1、Servlet的继承结构</h3><img src="/note/2022/06/04/study/Servlet/servlet%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84.png" class="" title="This is an example image"><h3 id="2、Servlet接口"><a href="#2、Servlet接口" class="headerlink" title="2、Servlet接口"></a>2、Servlet接口</h3><ul><li>init()：创建servlet对象后立即调用该方法完成其他初始化工作</li><li>service()：处理客户端请求，执行业务操作，利用响应对象响应客户端请求</li><li>destory()：再销毁servlet对象之前调用该方法，释放资源</li><li>getServletConfig()：ServletConfig 是容器向Servlet传递参数的载体</li><li>getServletInfo()：获取servlet相关信息</li></ul><h3 id="3、ServletConfig-接口"><a href="#3、ServletConfig-接口" class="headerlink" title="3、ServletConfig 接口"></a>3、ServletConfig 接口</h3><p>​Servlet运行期间，需要一些辅助信息，这些信息可以在web.xml文件中，使用一个或多个元素进行配置。当tomacat初始化一个servlet时，会将该servlet的配置信息，封装到ServletConfig对象中，通过调用init(ServletConfig servletConfig)方法，将ServletConfig对象传递给Servlet</p><h3 id="4、GenericServlet-抽象类"><a href="#4、GenericServlet-抽象类" class="headerlink" title="4、GenericServlet 抽象类"></a>4、GenericServlet 抽象类</h3><p>​GenericServlet是实现了Servlet接口的抽象类。在GenericServlet中进一步的定义了Servlet接口的具体实现，其设计的目的是为了和应用层协议解耦，再GenericServlet中包含了一个Service抽象方法，可以通过继承GenericServlet并实现Service方法实现请求的处理，但是需要将ServletRequest和ServletResponse 转化为HttpServletRequest和HttpServletResponse</p><h3 id="5、HttpServlet"><a href="#5、HttpServlet" class="headerlink" title="5、HttpServlet"></a>5、HttpServlet</h3><p>​继承自GenericServlet，针对于处理Http协议的请求定制，在HttpServlet的service()方法中已经把ServletRequest和ServletResponse 转化为HttpServletRequest和HttpServletResponse</p><h3 id="6、Servlet的生命周期"><a href="#6、Servlet的生命周期" class="headerlink" title="6、Servlet的生命周期"></a>6、Servlet的生命周期</h3><p>​servlet的生命周期是由容器管理的，分别经历4个阶段</p><table><thead><tr><th>阶段</th><th>字数</th><th>时机</th></tr></thead><tbody><tr><td>创建</td><td>1次</td><td>第一次请求之后</td></tr><tr><td>初始化</td><td>1次</td><td>实例化之后</td></tr><tr><td>执行服务</td><td>多次</td><td>每次请求</td></tr><tr><td>销毁</td><td>1次</td><td>停止服务、</td></tr></tbody></table><h3 id="7、注意事项"><a href="#7、注意事项" class="headerlink" title="7、注意事项"></a>7、注意事项</h3><ul><li>在Servlet中一般不要轻易使用成员变量，可能会造成线程安全问题</li><li>如果要使用，应尽量避免对成员变量产生修改</li><li>如果要产生修改，应注意线程安全问题</li></ul><h3 id="8、ServletContext对象和ServletConfig对象"><a href="#8、ServletContext对象和ServletConfig对象" class="headerlink" title="8、ServletContext对象和ServletConfig对象"></a>8、ServletContext对象和ServletConfig对象</h3><p>​ServletContext叫做Servlet上下文，服务器会为每一个web应用创建一个ServletContext对象，这个对象全局唯一，而且web应用中的所有Servlet都共享这个对象</p><h4 id="8-1、ServletContext对象的作用"><a href="#8-1、ServletContext对象的作用" class="headerlink" title="8.1、ServletContext对象的作用"></a>8.1、ServletContext对象的作用</h4><ul><li>相对路径转为绝对路径</li><li>获取容器的附加信息</li><li>读取配置</li><li>全局容器</li></ul><h4 id="8-2、ServletContext的生命周期"><a href="#8-2、ServletContext的生命周期" class="headerlink" title="8.2、ServletContext的生命周期"></a>8.2、ServletContext的生命周期</h4><p>​当容器启动时会创建ServletContext对象并一直缓存该对象，直到容器关闭后该对象生命周期结束，ServletContext的生命周期非常长，所以在使用全局容器时不建议存放业务数据</p><h4 id="8-3、ServletConfig对象"><a href="#8-3、ServletConfig对象" class="headerlink" title="8.3、ServletConfig对象"></a>8.3、ServletConfig对象</h4><p>​ServletConfig对象对应web.xml文件中的<Servlet>节点，当Tomcat初始化一个Servlet时，会将该Servlet的配置信息，封装到一个ServletConfig对象中，可以通过该对象读取<servlet>节点中的配置信息</p><h3 id="9、请求转发"><a href="#9、请求转发" class="headerlink" title="9、请求转发"></a>9、请求转发</h3><h4 id="9-1-forward转发"><a href="#9-1-forward转发" class="headerlink" title="9.1 forward转发"></a>9.1 forward转发</h4><h5 id="9-1-1-forward转发处理流程"><a href="#9-1-1-forward转发处理流程" class="headerlink" title="9.1.1 forward转发处理流程"></a>9.1.1 forward转发处理流程</h5><ol><li>清空response存放的正在响应正文数据缓冲区</li><li>如果目标资源为Servlet或jsp，就调用他们的service方法，把该方法产生的响应结果发送到客户端；如果目标资源是静态文件中的HTML，就读取文件中的数据把它发送到客户端</li></ol><h5 id="9-1-2-forward处理特点"><a href="#9-1-2-forward处理特点" class="headerlink" title="9.1.2 forward处理特点"></a>9.1.2 forward处理特点</h5><ol><li>由于forward()方法先清空用于存放相应正文的缓冲区，因此源Servlet生成的响应结果不会被发送到客户端，只有目标资源生成的响应结果才会被发送到客户端</li><li>如果源Servlet在进行请求转发之前，已经提交了响应结(flushBuffer()，close()方法)，那么forward()方法会抛出异常，为避免异常，不应该在源servlet中提交响应结果</li></ol><h4 id="9-2-include转发"><a href="#9-2-include转发" class="headerlink" title="9.2 include转发"></a>9.2 include转发</h4><h5 id="9-2-1-include处理流程"><a href="#9-2-1-include处理流程" class="headerlink" title="9.2.1 include处理流程"></a>9.2.1 include处理流程</h5><ol><li>如果目标资源为Servlet或者jsp，就调用他们的service方法，把该方法产生的响应正文添加到源Servlet的响应结果中；如果目标组建为HTML文档，就直接把文档的内容添加到源Servlet的响应结果中</li><li>返回到源Servlet的服务方法中，继续执行后续代码</li></ol><h5 id="9-2-2-include处理特点"><a href="#9-2-2-include处理特点" class="headerlink" title="9.2.2 include处理特点"></a>9.2.2 include处理特点</h5><ol><li>源Servlet与被包含的目标资源的输出数据都会被添加到响应结果中</li><li>在目标资源对响应状态码或者响应开头所做的修改都会被忽略</li></ol><h3 id="10、Cookie对象和HttpSession对象"><a href="#10、Cookie对象和HttpSession对象" class="headerlink" title="10、Cookie对象和HttpSession对象"></a>10、Cookie对象和HttpSession对象</h3><p>​Cookie对象和HttpSession对象的作用是维护客户端浏览器与服务端的会话状态的两个对象，二者的不同是Cookie是通过客户端浏览器实现会话的维持，而HttpSession是通过服务端来实现会话的维持</p><h4 id="10-1-区别"><a href="#10-1-区别" class="headerlink" title="10.1 区别"></a>10.1 区别</h4><ul><li>cookie数据存放在客户的浏览器或系统文件中，httpsession中的数据存放在服务器中</li><li>cookie不安全，httpSession是安全的</li><li>单个cookie保存的数据不能超过4K，httpSession无限制</li></ul><p></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Servlet学习&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/note/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="servlet" scheme="https://lyblog2022.github.io/note/categories/%E5%AD%A6%E4%B9%A0/servlet/"/>
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/note/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="servlet" scheme="https://lyblog2022.github.io/note/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://lyblog2022.github.io/note/2022/06/04/study/MyBatis/"/>
    <id>https://lyblog2022.github.io/note/2022/06/04/study/MyBatis/</id>
    <published>2022-06-04T08:59:00.000Z</published>
    <updated>2022-06-04T13:10:35.136Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis学习</p><span id="more"></span><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><code>Mybatis</code> 是一款优秀的持久层框架，支持定制化<code>SQL</code>、存储过程及高级映射，可以使用简单的<code>XML</code>或注解来配置和映射原生信息</p><p>是一款半自动的持久层的半自动<code>ORM</code>映射框架</p><h3 id="1-1-框架"><a href="#1-1-框架" class="headerlink" title="1.1 框架"></a>1.1 框架</h3><ul><li>框架是一个基本概念上的结构，用于解决或处理复杂的问题。</li><li>使用框架的优点：减少开发时间，降低开发难度，保证设计质量，降低程序员之间的沟通以及日后维护的成本</li><li>框架是一个半成品，已经对基础的代码进行了封装并提供响应的<code>API</code>，开发者再使用框架是直接调用封装好的<code>API</code>，可以省去很多代码编写，从而提升效率和开发速度</li></ul><h3 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2 ORM"></a>1.2 <code>ORM</code></h3><ul><li><code>Object-Relation Mapping</code>，对象关系映射</li><li>它的作用是在关系型数据库和对象之间做一个映射，这样在操作具体数据的时候就像操作对象一样</li></ul><h4 id="1-2-1-持久化"><a href="#1-2-1-持久化" class="headerlink" title="1.2.1 持久化"></a>1.2.1 持久化</h4><ul><li>持久：把数据保存到可永久保存的存储设备中</li><li>主要应用：将内存中的数据存储在关系型数据库中</li></ul><h4 id="1-2-2-持久层"><a href="#1-2-2-持久层" class="headerlink" title="1.2.2 持久层"></a>1.2.2 持久层</h4><ul><li>专注于实现数据持久化应用领域的某一个特定系统的一个逻辑层面，将数据使用者和数据实体想关联（<code>mapper</code>层、<code>DAO</code>层）</li></ul><h2 id="2、Mybatis配置"><a href="#2、Mybatis配置" class="headerlink" title="2、Mybatis配置"></a>2、<code>Mybatis</code>配置</h2><h3 id="2-1-事务"><a href="#2-1-事务" class="headerlink" title="2.1 事务"></a>2.1 事务</h3><p>​在<code>MyBatis</code> 核心配置文件中<code>envirment</code> 中通过<code>transactionManager</code>配置事务的处理策略</p><ul><li><code>JDBC</code>：该配置使用了<code>JDBC</code>的提交及回滚，依赖于从数据源得到的链接来管理事务范围</li><li><code>MANAGED</code>：该配置几乎无任何操作，不提交或回滚一个链接，它会让容器来管理整个生命周期（<code>Spring</code>应用服务器的上下文），默认情况下会关闭链接，但一些容器不希望如此，因此如果需要从链接中停止它，将<code>closeConnection</code>的属性值设置为<code>false</code>，<code>Mybatis</code>本身并不会处理事务，而是交给其他框架去处理</li></ul><h3 id="2-2-映射文件的加载方式"><a href="#2-2-映射文件的加载方式" class="headerlink" title="2.2 映射文件的加载方式"></a>2.2 映射文件的加载方式</h3><ol><li><code>mapper</code>的映射文件的文件路径导入，使用的是<code>mapper</code>标签的<code>resource</code>属性</li><li>网络资源路径使用的是<code>mapper</code>的<code>url</code>属性</li><li>接口的全限定名导入使用的是<code>mapper</code>标签的<code>class</code>属性—–基于接口的代理模式</li><li>包扫描形式加载所有的<code>mapper</code>映射文件，使用的<code>package</code>标签</li></ol><img src="/note/2022/06/04/study/MyBatis/mybatis-yswj.png" class="" title="mybatis 映射文件示例 image"><h2 id="3、Mybatis-开发"><a href="#3、Mybatis-开发" class="headerlink" title="3、Mybatis 开发"></a>3、<code>Mybatis</code> 开发</h2><h3 id="3-1-传递参数"><a href="#3-1-传递参数" class="headerlink" title="3.1 传递参数"></a>3.1 传递参数</h3><ul><li><p><em>${} 代表mybatis底层使用Statment语句对象,参数是以字符串拼接的形式设置</em></p></li><li><p>#{} 代表mybatis底层使用的preparedStatment语句对象,参数使用?作为占位符处理，更常用</p></li></ul><h2 id="4、MyBatis代理模式开发"><a href="#4、MyBatis代理模式开发" class="headerlink" title="4、MyBatis代理模式开发"></a>4、<code>MyBatis</code>代理模式开发</h2><p>在<code>MyBatis</code>中提供了一种称为<code>Mapper</code>代理（接口绑定）的操作方式，在实际开发中也使用该方式</p><h3 id="4-1-原理浅析"><a href="#4-1-原理浅析" class="headerlink" title="4.1 原理浅析"></a>4.1 原理浅析</h3><p>​底层使用了动态代理模式，动态创建一个<code>Mapper</code>的一个代理对象并赋给接口使用</p><h2 id="5、动态SQL"><a href="#5、动态SQL" class="headerlink" title="5、动态SQL"></a>5、动态<code>SQL</code></h2><p>​<code>MyBatis</code>在简化操作方法上提出了动态<code>SQL</code>功能，将使用<code>Java</code>代码拼接<code>SQL</code>语句，改变为在<code>XML</code>映射文件中截止标签拼接<code>SQL</code>语句。相比而言，大大减少代码量，更灵活、有利于后期维护</p><p>​<code>MyBatis</code>中动态<code>SQL</code>是编写在<code>mapper.xml</code>中的，其语法和<code>JSTL</code>类似，但是却是基于强大的<code>OGNL</code>表达式实现的</p><p>​<code>MyBatis</code>也可以在注解中配置<code>SQL</code>，但是由于注解功能受限，尤其是对于复杂的<code>SQL</code>语句，可读性很差，所以较少使用</p><h3 id="5-1-If标签"><a href="#5-1-If标签" class="headerlink" title="5.1 If标签"></a>5.1 <code>If</code>标签</h3><p>条件查询，符合<code>if</code>的条件，则补充<code>SQL</code>语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuno != null&quot;</span>&gt;</span></span><br><span class="line">            and stuno =#&#123;stuno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classname != null and classname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and classname like concat(&#x27;%&#x27;,#&#123;classname&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-Where标签"><a href="#5-2-Where标签" class="headerlink" title="5.2 Where标签"></a>5.2 <code>Where</code>标签</h3><p>用于处理<code>where</code>关键字和<code>and</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStuByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuno != null&quot;</span>&gt;</span></span><br><span class="line">            and stuno= #&#123;stuno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classname != null and classname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and classname= #&#123;classname&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-Choose标签"><a href="#5-3-Choose标签" class="headerlink" title="5.3 Choose标签"></a>5.3 <code>Choose</code>标签</h3><p>前面的<code>when</code>条件成立  后面的  <code>when</code>就不再判断了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStuByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;stuno != null&quot;</span>&gt;</span></span><br><span class="line">                and stuno= #&#123;stuno&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;classname != null and classname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and classname= #&#123;classname&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-Set标签"><a href="#5-4-Set标签" class="headerlink" title="5.4  Set标签"></a>5.4 <code> Set</code>标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStuByCondtion&quot;</span> &gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classname != null and classname != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            , classname =#&#123;classname&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuno != null &quot;</span>&gt;</span></span><br><span class="line">            , stuname =#&#123;stuname&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where stuno =#&#123;stuno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-5-Trim标签"><a href="#5-5-Trim标签" class="headerlink" title="5.5 Trim标签"></a>5.5 <code>Trim</code>标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStuByCondition&quot;</span> &gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="comment">&lt;!--prefix 要增加什么前缀</span></span><br><span class="line"><span class="comment">    prefixOverrides 要去除什么前缀</span></span><br><span class="line"><span class="comment">    suffix 要增加什么后缀</span></span><br><span class="line"><span class="comment">    suffixOverrides 要去除什么后缀</span></span><br><span class="line"><span class="comment">    set 是trim的一种特殊情况</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span>  <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;stuname != null and stuname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            stuname= #&#123;stuname&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classname != null and classname != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            classname= #&#123;classname&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where  stuno = #&#123;stuno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-Bind标签"><a href="#5-6-Bind标签" class="headerlink" title="5.6 Bind标签"></a>5.6 <code>Bind</code>标签</h3><p>一般用于处理模糊查询的模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStuByClassName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;likePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+param1+&#x27;%&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bind</span>&gt;</span></span><br><span class="line">    select * from student where classname like #&#123;classname&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、缓存"><a href="#6、缓存" class="headerlink" title="6、缓存"></a>6、缓存</h2><h3 id="6-1-一级缓存"><a href="#6-1-一级缓存" class="headerlink" title="6.1 一级缓存"></a>6.1 一级缓存</h3><p>​一级存储是<code>SqlSession</code>上的缓存，默认开启，是一种内存型缓存,不要求实体类对象实现<code>Serializable</code>接口</p><p>​缓存中的数据使用键值对形式存储数据</p><p>​<code>namespace+sqlid+args+offset&gt;&gt;&gt; hash</code>值作为键,查询出的结果作为值</p><img src="/note/2022/06/04/study/MyBatis/sqlsession.png" class="" title="sqlsession一级缓存 image"><h3 id="6-2-二级缓存"><a href="#6-2-二级缓存" class="headerlink" title="6.2 二级缓存"></a>6.2 二级缓存</h3><p>​二级缓存是以<code>namespace</code>为标记的缓存，可以是由一个<code>SqlSessionFactory</code>创建的<code>SqlSession</code>之间共享缓存数据。默认并不开启，要求实体类必须实现序列化接口</p><img src="/note/2022/06/04/study/MyBatis/sqlsession2.png" class="" title="sqlsession二级缓存 image"><p>注意：</p><p>​1、<code> MyBatis</code>的二级缓存的缓存介质有多种多样，而并不一定是在内存中，所以需要对<code>JavaBean</code>对象实现序列化接口。</p><p>​2、二级缓存是以 <code>namespace </code>为单位的，不同 <code>namespace</code> 下的操作互不影响</p><p>​3、加入<code>Cache</code>元素后，会对相应命名空间所有的<code>select</code>元素查询结果进行缓存，而其中的<code>insert</code>、<code>update</code>、<code>delete</code>在操作是会清空整个<code>namespace</code>的缓存</p><p>​4、<code>cache</code> 有一些可选的属性 <code>type</code>, <code>eviction</code>, <code>flushInterval</code>, <code>size</code>, <code>readOnly</code>, <code>blocking</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;&quot;</span> <span class="attr">eviction</span>=<span class="string">&quot;&quot;</span><span class="attr">flushInterval</span>=<span class="string">&quot;&quot;</span><span class="attr">size</span>=<span class="string">&quot;&quot;</span><span class="attr">blocking</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>自定义缓存类，要求实现org.apache.ibatis.cache.Cache接口</td><td>null</td></tr><tr><td>readOnly</td><td>是否只读  <br />true:给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。<br />false:会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全</td><td>false</td></tr><tr><td>eviction</td><td>缓存策略<br />LRU（默认） – 最近最少使用：移除最长时间不被使用的对象。<br />FIFO – 先进先出：按对象进入缓存的顺序来移除它们。<br />SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。<br />WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</td><td>LRU</td></tr><tr><td>flushInterval</td><td>刷新间隔，毫秒为单位。默认为null，也就是没有刷新间隔，只有执行update、insert、delete语句才会刷新</td><td>null</td></tr><tr><td>size</td><td>缓存对象个数</td><td>1024</td></tr><tr><td>blocking</td><td>是否使用阻塞性缓存BlockingCache<br />true：在查询缓存时锁住对应的Key，如果缓存命中了则会释放对应的锁，否则会在查询数据库以后再释放锁，保证只有一个线程到数据库中查找指定key对应的数据<br />false：不使用阻塞性缓存，性能更好</td><td>false</td></tr></tbody></table><p>​5、如果在加入<code>Cache</code>元素的前提下让个别<code>select </code>元素不使用缓存，可以使用<code>useCache</code>属性，设置为<code>false</code>。**<code>useCache</code>**控制当前sql语句是否启用缓存  <code>flushCache</code>控制当前<code>sql</code>执行一次后是否刷新缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStuByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-三方缓存"><a href="#6-3-三方缓存" class="headerlink" title="6.3 三方缓存"></a>6.3 三方缓存</h3><pre><code>+ 分布式缓存框架：我们系统为了提高系统并发和性能，一般对系统进行分布式部署（集群部署方式）不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理.`ehcache`,`redis `,`memcache`缓存框架。+ `Ehcache`：是一种广泛使用的开源`java`分布式缓存。主要面向通用缓存，`javaEE `和 轻量级容器。它具有内存和磁盘存储功能。被用于大型复杂分布式`web application`的</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;MyBatis学习&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/note/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MyBatis" scheme="https://lyblog2022.github.io/note/categories/%E5%AD%A6%E4%B9%A0/MyBatis/"/>
    
    
    <category term="MyBatis" scheme="https://lyblog2022.github.io/note/tags/MyBatis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/note/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>518总结--post请求调用接口</title>
    <link href="https://lyblog2022.github.io/note/2022/05/18/dailysummary/20220518/dailysummary/"/>
    <id>https://lyblog2022.github.io/note/2022/05/18/dailysummary/20220518/dailysummary/</id>
    <published>2022-05-18T13:06:35.000Z</published>
    <updated>2022-06-04T15:25:27.560Z</updated>
    
    <content type="html"><![CDATA[<p>使用post方式调用接口并传递参数</p> <span id="more"></span><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.summary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url：请求URL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headerParamsJson：请求header参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> paramJson：请求参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">sendData</span><span class="params">(String url, JSONObject headerParamsJson, JSONObject paramJson)</span> &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">resultJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送post请求</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">HttpPost</span> <span class="variable">httppost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"><span class="type">RequestConfig</span> <span class="variable">defaultRequestConfig</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">.setConnectionRequestTimeout(<span class="number">5000</span>).setSocketTimeout(<span class="number">15000</span>).build();</span><br><span class="line">httppost.setConfig(defaultRequestConfig);</span><br><span class="line"><span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(paramJson.toJSONString(), <span class="string">&quot;utf-8&quot;</span>);<span class="comment">// 解决中文乱码问题</span></span><br><span class="line">entity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">entity.setContentType(<span class="string">&quot;text/json&quot;</span>);</span><br><span class="line">httppost.setEntity(entity);</span><br><span class="line">httppost.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加header参数</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">headerParamsIterator</span> <span class="operator">=</span> headerParamsJson.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (headerParamsIterator.hasNext()) &#123;</span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) headerParamsIterator.next();</span><br><span class="line">httppost.setHeader(entry.getKey().toString(), entry.getValue().toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装填参数</span></span><br><span class="line">List&lt;NameValuePair&gt; nvps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;NameValuePair&gt;();</span><br><span class="line"><span class="keyword">if</span> (paramJson != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> paramJson.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iterator.next();</span><br><span class="line">nvps.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>((String) entry.getKey(), (String) entry.getValue()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UrlEncodedFormEntity</span> <span class="variable">reqEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(nvps, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">httppost.setEntity(reqEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行post请求.</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response1</span> <span class="operator">=</span> httpclient.execute(httppost);</span><br><span class="line"><span class="type">String</span> <span class="variable">resultText</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response1.getStatusLine().getStatusCode();</span><br><span class="line"><span class="keyword">if</span> (statusCode != <span class="number">200</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 响应实体</span></span><br><span class="line"><span class="type">HttpEntity</span> <span class="variable">entity2</span> <span class="operator">=</span> response1.getEntity();</span><br><span class="line"><span class="keyword">if</span> (entity2 != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 响应内容</span></span><br><span class="line">resultText = EntityUtils.toString(entity2, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">resultJson = JSONObject.parseObject(resultText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resultJson.put(<span class="string">&quot;code&quot;</span>, statusCode);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">response1.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">resultJson.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;410&quot;</span>);</span><br><span class="line">resultJson.put(<span class="string">&quot;err&quot;</span>, e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resultJson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用post方式调用接口并传递参数&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://lyblog2022.github.io/note/categories/%E6%80%BB%E7%BB%93/"/>
    
    <category term="接口调用" scheme="https://lyblog2022.github.io/note/categories/%E6%80%BB%E7%BB%93/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    
    
    <category term="接口调用" scheme="https://lyblog2022.github.io/note/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
</feed>
