<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Note</title>
  
  <subtitle>Welcome To My World</subtitle>
  <link href="https://lyblog2022.github.io/atom.xml" rel="self"/>
  
  <link href="https://lyblog2022.github.io/"/>
  <updated>2022-08-09T14:24:15.572Z</updated>
  <id>https://lyblog2022.github.io/</id>
  
  <author>
    <name>ly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>负载均衡</title>
    <link href="https://lyblog2022.github.io/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://lyblog2022.github.io/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2022-08-09T02:51:31.000Z</published>
    <updated>2022-08-09T14:24:15.572Z</updated>
    
    <content type="html"><![CDATA[<p>负载均衡及nginx负载均衡测试</p><span id="more"></span><h3 id="1、-负载均衡"><a href="#1、-负载均衡" class="headerlink" title="1、 负载均衡"></a>1、 负载均衡</h3><h4 id="1-1-什么是负载均衡"><a href="#1-1-什么是负载均衡" class="headerlink" title="1.1 什么是负载均衡"></a>1.1 什么是负载均衡</h4><p>​负载均衡（Load Balance，简称LB）是高并发、高可用系统不可少的关键组件，目标是尽力将网站流量平均分发到多个服务器上，以提高系统整体的响应速度和可用性。</p><h4 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h4><ul><li><strong>高并发</strong>：负载均衡通过算法调整负载，尽力均匀的分配应用集群中各节点的工作量，以此提高应用集群的并发处理能力（吞吐量）。</li><li><strong>伸缩性</strong>：添加或减少服务器数量，然后由负载均衡进行分发控制。这使得应用集群具备伸缩性。</li><li><strong>高可用</strong>：负载均衡器可以监控候选服务器，当服务器不可用时，自动跳过，将请求分发给可用的服务器。这使得应用集群具备高可用的特性。</li><li><strong>安全防护</strong>：有些负载均衡软件或硬件提供了安全性功能，如：黑白名单处理、防火墙，防 DDos 攻击等。</li></ul><h4 id="1-3-分类"><a href="#1-3-分类" class="headerlink" title="1.3 分类"></a>1.3 分类</h4><p>​支持负载均衡的技术很多，可以通过不同维度去进行分类。</p><h5 id="1-3-1-载体维度分类"><a href="#1-3-1-载体维度分类" class="headerlink" title="1.3.1 载体维度分类"></a>1.3.1 载体维度分类</h5><p>​从支持负载均衡的载体来看，可以将负载均衡分为两类：<strong>硬件负载均衡、软件负载均衡</strong></p><h6 id="1-3-1-1-硬件负载均衡"><a href="#1-3-1-1-硬件负载均衡" class="headerlink" title="1.3.1.1 硬件负载均衡"></a>1.3.1.1 <strong>硬件负载均衡</strong></h6><p>​硬件负载均衡，一般是在定制处理器上运行的独立负载均衡服务器，价格昂贵，土豪专属。硬件负载均衡的主流产品有:F5 和 A10。</p><ul><li><strong>硬件负载均衡的 优点：</strong><ul><li>功能强大：支持全局负载均衡并提供较全面的、复杂的负载均衡算法。</li><li>性能强悍：硬件负载均衡由于是在专用处理器上运行，因此吞吐量大，可支持单机百万以上的并发。</li><li>安全性高：往往具备防火墙，防 DDos 攻击等安全功能。</li></ul></li><li><strong>硬件负载均衡的 缺点：</strong><ul><li>成本昂贵：购买和维护硬件负载均衡的成本都很高。</li><li>扩展性差：当访问量突增时，超过限度不能动态扩容。</li></ul></li></ul><h6 id="1-3-1-2-软件负载均衡"><a href="#1-3-1-2-软件负载均衡" class="headerlink" title="1.3.1.2 软件负载均衡"></a>1.3.1.2 <strong>软件负载均衡</strong></h6><p>​软件负载均衡，应用最广泛，无论大公司还是小公司都会使用。</p><p>​软件负载均衡从软件层面实现负载均衡，一般可以在任何标准物理设备上运行。</p><p>​软件负载均衡的 主流产品 有：<strong>Nginx、HAProxy、LVS</strong>。</p><ul><li><p>LVS 可以作为四层负载均衡器。其负载均衡的性能要优于 Nginx。</p></li><li><p>HAProxy 可以作为 HTTP 和 TCP 负载均衡器。</p></li><li><p>Nginx、HAProxy 可以作为四层或七层负载均衡器。</p></li></ul><p><strong>软件负载均衡的 优点：</strong></p><ul><li>扩展性好：适应动态变化，可以通过添加软件负载均衡实例，动态扩展到超出初始容量的能力</li><li>成本低廉：软件负载均衡可以在任何标准物理设备上运行，降低了购买和运维的成本。</li></ul><p><strong>软件负载均衡的 缺点：</strong></p><ul><li>性能略差：相比于硬件负载均衡，软件负载均衡的性能要略低一些。</li></ul><h5 id="1-3-2-网络通信分类"><a href="#1-3-2-网络通信分类" class="headerlink" title="1.3.2 网络通信分类"></a>1.3.2 网络通信分类</h5><p>​软件负载均衡从通信层面来看，又可以分为四层和七层负载均衡。</p><h6 id="1-3-2-1-七层负载均衡"><a href="#1-3-2-1-七层负载均衡" class="headerlink" title="1.3.2.1 七层负载均衡"></a>1.3.2.1 <strong>七层负载均衡</strong></h6><p>​就是可以根据访问用户的 HTTP 请求头、URL 信息将请求转发到特定的主机。</p><ul><li>DNS 重定向</li><li>HTTP 重定向</li><li>反向代理</li></ul><h6 id="1-3-2-2-四层负载均衡"><a href="#1-3-2-2-四层负载均衡" class="headerlink" title="1.3.2.2 四层负载均衡"></a>1.3.2.2 <strong>四层负载均衡</strong></h6><p>​基于 IP 地址和端口进行请求的转发。</p><ul><li>修改 IP 地址</li><li>修改 MAC 地址</li></ul><h6 id="1-3-2-3-DNS-负载均衡"><a href="#1-3-2-3-DNS-负载均衡" class="headerlink" title="1.3.2.3 DNS 负载均衡"></a>1.3.2.3 <strong>DNS 负载均衡</strong></h6><p>​DNS 负载均衡一般用于互联网公司，复杂的业务系统不适合使用。大型网站一般使用 DNS 负载均衡作为 第一级负载均衡手段，然后在内部使用其它方式做第二级负载均衡。DNS 负载均衡属于七层负载均衡。</p><p>​DNS 即 域名解析服务，是 OSI 第七层网络协议。DNS 被设计为一个树形结构的分布式应用，自上而下依次为：根域名服务器，一级域名服务器，二级域名服务器，… ，本地域名服务器。显然，如果所有数据都存储在根域名服务器，那么 DNS 查询的负载和开销会非常庞大。</p><p>​因此，DNS 查询相对于 DNS 层级结构，是一个逆向的递归流程，DNS 客户端依次请求本地 DNS 服务器，上一级 DNS 服务器，上上一级 DNS 服务器，… ，根 DNS 服务器（又叫权威 DNS 服务器），一旦命中，立即返回。为了减少查询次数，每一级 DNS 服务器都会设置 DNS 查询缓存。</p><p>​DNS 负载均衡的工作原理就是：基于 DNS 查询缓存，按照负载情况返回不同服务器的 IP 地址。</p><p>​DNS 重定向的 优点：</p><ul><li>使用简单：负载均衡工作，交给 DNS 服务器处理，省掉了负载均衡服务器维护的麻烦</li><li>提高性能：可以支持基于地址的域名解析，解析成距离用户最近的服务器地址（类似 CDN 的原理），可以加快访问速度，改善性能；</li></ul><p>​DNS 重定向的 缺点：</p><ul><li>可用性差：DNS 解析是多级解析，新增&#x2F;修改 DNS 后，解析时间较长；解析过程中，用户访问网站将失败；</li><li>扩展性低：DNS 负载均衡的控制权在域名商那里，无法对其做更多的改善和扩展；</li><li>维护性差：也不能反映服务器的当前运行状态；支持的算法少；不能区分服务器的差异（不能根据系统与服务的状态来判断负载）。</li></ul><h6 id="1-3-2-4-HTTP-负载均衡"><a href="#1-3-2-4-HTTP-负载均衡" class="headerlink" title="1.3.2.4 HTTP 负载均衡"></a>1.3.2.4 <strong>HTTP 负载均衡</strong></h6><p>​HTTP 负载均衡是基于 HTTP 重定向实现的。HTTP 负载均衡属于七层负载均衡。</p><p>​HTTP 重定向原理是：根据用户的 HTTP 请求计算出一个真实的服务器地址，将该服务器地址写入 HTTP 重定向响应中，返回给浏览器，由浏览器重新进行访问。</p><img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx2.png" class="" title="nginx2 image"><p>​HTTP 重定向的优点：方案简单。</p><p>​HTTP 重定向的 缺点：</p><ul><li>性能较差：每次访问需要两次请求服务器，增加了访问的延迟。</li><li>降低搜索排名：使用重定向后，搜索引擎会视为 SEO 作弊。</li><li>如果负载均衡器宕机，就无法访问该站点。</li></ul><p>​由于其缺点比较明显，所以这种负载均衡策略实际应用较少。</p><h6 id="1-3-2-5-反向代理负载均衡"><a href="#1-3-2-5-反向代理负载均衡" class="headerlink" title="1.3.2.5 反向代理负载均衡"></a>1.3.2.5 <strong>反向代理负载均衡</strong></h6><p>​反向代理（Reverse Proxy）方式是指以 代理服务器 来接受网络请求，然后 将请求转发给内网中的服务器，并将从内网中的服务器上得到的结果返回给网络请求的客户端。反向代理负载均衡属于七层负载均衡。</p><p>​反向代理服务的主流产品：<strong>Nginx、Apache</strong>。</p><p>​正向代理与反向代理有什么区别？</p><ul><li><strong>正向代理</strong>：发生在 客户端，是由用户主动发起的。翻墙软件就是典型的正向代理，客户端通过主动访问代理服务器，让代理服务器获得需要的外网数据，然后转发回客户端。</li><li><strong>反向代理</strong>：发生在 服务端，用户不知道代理的存在。</li></ul><img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx3.png" class="" title="nginx3 image"><p>反向代理的实现</p><p>​<img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx4.png" class="" title="nginx4 image"></p><p>​首先，在代理服务器上设定好负载均衡规则。然后，当收到客户端请求，反向代理服务器拦截指定的域名或 IP 请求，根据负载均衡算法，将请求分发到候选服务器上。其次，如果某台候选服务器宕机，反向代理服务器会有容错处理，比如分发请求失败 3 次以上，将请求分发到其他候选服务器上。</p><p>​反向代理的 优点：</p><ul><li>多种负载均衡算法：支持多种负载均衡算法，以应对不同的场景需求。</li><li>可以监控服务器：基于 HTTP 协议，可以监控转发服务器的状态，如：系统负载、响应时间、是否可用、连接数、流量等，从而根据这些数据调整负载均衡的策略。</li></ul><p>​反向代理的 缺点：</p><ul><li><p>额外的转发开销：反向代理的转发操作本身是有性能开销的，可能会包括创建连接，等待连接响应，分析响应结果等操作。</p></li><li><p>增加系统复杂度：反向代理常用于做分布式应用的水平扩展，但反向代理服务存在以下问题，为了解决以下问题会给系统整体增加额外的复杂度和运维成本：</p><ul><li>反向代理服务如果自身宕机，就无法访问站点，所以需要有 高可用 方案，常见的方案有：主备模式（一主一备）、双主模式（互为主备）。</li><li>反向代理服务自身也存在性能瓶颈，随着需要转发的请求量不断攀升，需要有 可扩展 方案。</li></ul></li></ul><h6 id="1-3-2-6-IP负载均衡"><a href="#1-3-2-6-IP负载均衡" class="headerlink" title="1.3.2.6 IP负载均衡"></a>1.3.2.6 IP负载均衡</h6><p>​IP 负载均衡是在网络层通过修改请求目的地址进行负载均衡。</p><p>​<img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx5.png" class="" title="nginx5 image"></p><p>​如上图所示，IP 均衡处理流程大致为：</p><ol><li>客户端请求 192.168.137.10，由负载均衡服务器接收到报文。</li><li>负载均衡服务器根据算法选出一个服务节点 192.168.0.1，然后将报文请求地址改为该节点的 IP。</li><li>真实服务节点收到请求报文，处理后，返回响应数据到负载均衡服务器。</li><li>负载均衡服务器将响应数据的源地址改负载均衡服务器地址，返回给客户端。</li></ol><p>​IP 负载均衡在内核进程完成数据分发，较反向代理负载均衡有更好的从处理性能。但是，由于所有请求响应都要经过负载均衡服务器，集群的吞吐量受制于负载均衡服务器的带宽。</p><h6 id="1-3-2-7-数据链路层负载均衡"><a href="#1-3-2-7-数据链路层负载均衡" class="headerlink" title="1.3.2.7 数据链路层负载均衡"></a>1.3.2.7 <strong>数据链路层负载均衡</strong></h6><p>​数据链路层负载均衡是指在通信协议的数据链路层修改 mac 地址进行负载均衡。</p><p>​<img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx6.png" class="" title="nginx6 image"></p><p>​在 Linux 平台上最好的链路层负载均衡开源产品是 LVS (Linux Virtual Server)。LVS 是基于 Linux 内核中 netfilter 框架实现的负载均衡系统。netfilter 是内核态的 Linux 防火墙机制，可以在数据包流经过程中，根据规则设置若干个关卡（hook 函数）来执行相关的操作。</p><p>​LVS 的工作流程大致如下：</p><ol><li>当用户访问 <a href="http://www.sina.com.cn/">www.sina.com.cn</a> 时，用户数据通过层层网络，最后通过交换机进入 LVS 服务器网卡，并进入内核网络层。</li><li>进入 PREROUTING 后经过路由查找，确定访问的目的 VIP 是本机 IP 地址，所以数据包进入到 INPUT 链上</li><li>IPVS 是工作在 INPUT 链上，会根据访问的 <strong>vip+port</strong> 判断请求是否 IPVS 服务，如果是则调用注册的 IPVS HOOK 函数，进行 IPVS 相关主流程，强行修改数据包的相关数据，并将数据包发往 POSTROUTING 链上。</li><li>POSTROUTING 上收到数据包后，根据目标 IP 地址（后端服务器），通过路由选路，将数据包最终发往后端的服务器上。</li></ol><p>​开源 LVS 版本有 3 种工作模式，每种模式工作原理截然不同，说各种模式都有自己的优缺点，分别适合不同的应用场景，不过最终本质的功能都是能实现均衡的流量调度和良好的扩展性。主要包括三种模式：DR 模式、NAT 模式、Tunnel 模式。</p><h3 id="2、负载均衡算法"><a href="#2、负载均衡算法" class="headerlink" title="2、负载均衡算法"></a>2、负载均衡算法</h3><p>​负载均衡器的实现可以分为两个部分：</p><ol><li>根据负载均衡算法在候选服务器列表选出一个服务器;</li><li>将请求数据发送到该服务器上。</li></ol><p>​负载均衡算法是负载均衡服务核心中的核心。负载均衡产品多种多样，但是各种负载均衡算法原理是共性的。负载均衡算法有很多种，分别适用于不同的应用场景，本文仅介绍最为常见的负载均衡算法的特性及原理：<strong>轮询、随机、最小活跃数、源地址哈希、一致性哈希</strong>。</p><h4 id="2-1-轮循-Round-Robin"><a href="#2-1-轮循-Round-Robin" class="headerlink" title="2.1 轮循(Round Robin)"></a>2.1 轮循(Round Robin)</h4><ul><li>将收到的请求循环分配到服务器集群中的每台机器，即有效服务器</li><li>使用这种方式，所有的标记进入虚拟服务的服务器应该有相近的资源容量以及负载形同的应用程序</li><li>如果所有的服务器有相同或者相近的性能那么选择这种方式会使服务器负载形同</li><li>基于这个前提，轮循调度是一个简单而有效的分配请求的方式</li><li>对于服务器不同的情况，选择这种方式就意味着能力比较弱的服务器也会在下一轮循环中接受轮循，即使这个服务器已经不能再处理当前这个请求了。这可能导致能力较弱的服务器超载。</li></ul><h4 id="2-2-加权轮循-Weighted-Round-Robin"><a href="#2-2-加权轮循-Weighted-Round-Robin" class="headerlink" title="2.2 加权轮循(Weighted Round Robin)"></a>2.2 加权轮循(Weighted Round Robin)</h4><p>​这种算法解决了简单轮循调度算法的缺点：传入的请求按顺序被分配到集群中服务器，但是会考虑提前为每台服务器分配的权重。管理员只是简单的通过服务器的处理能力来定义各台服务器的权重。例如，能力最强的服务器A给的权重是100，同时能力最低的服务器给的权重是50。这意味着在服务器B接收到第一个请求之前前，服务器A会连续的接受到2个请求，以此类推。</p><h4 id="2-3-最少连接数-Least-Connection"><a href="#2-3-最少连接数-Least-Connection" class="headerlink" title="2.3 最少连接数(Least Connection)"></a>2.3 最少连接数(Least Connection)</h4><ul><li>以上两种方法都没有考虑的是系统不能识别在给定的时间里保持了多少连接。因此可能发生，服务器B服务器收到的连接比服务器A少但是它已经超载，因为服务器B上的用户打开连接持续的时间更长。这就是说连接数即服务器的负载是累加的。这种潜在的问题可以通过”最少连接数”算法来避免</li><li>传入的请求是根据每台服务器当前所打开的连接数来分配的。即活跃连接数最少的服务器会自动接收下一个传入的请求</li><li>和简单轮询的原则相同：所有拥有虚拟服务的服务器资源容量应该相近</li><li>值得注意的是，在流量率低的配置环境中，各服务器的流量并不是相同的，会优先考虑第一台服务器。这是因为，如果所有的服务器是相同的，那么第一个服务器优先，直到第一台服务器有连续的活跃流量，否则总是会优先选择第一台服务器。</li></ul><h4 id="2-4-源IP哈希-Source-IP-Hash"><a href="#2-4-源IP哈希-Source-IP-Hash" class="headerlink" title="2.4 源IP哈希(Source IP Hash)"></a>2.4 源IP哈希(Source IP Hash)</h4><ul><li>这种方式通过生成请求源IP的哈希值，并通过这个哈希值来找到正确的真实服务器，这意味着对于同一主机来说他对应的服务器总是相同</li><li>使用这种方式，你不需要保存任何源IP。但是需要注意，这种方式可能导致服务器负载不平衡。</li></ul><h3 id="3、负载均衡测试"><a href="#3、负载均衡测试" class="headerlink" title="3、负载均衡测试"></a>3、负载均衡测试</h3><h4 id="3-1-目的"><a href="#3-1-目的" class="headerlink" title="3.1 目的"></a>3.1 目的</h4><ol><li>通过浏览器多次访问一个地址（<a href="http://www.ly.com/city%EF%BC%89">http://www.ly.com/city）</a></li><li>nginx接受上面的请求，并进行转发。</li><li>那么每个请求的响应，是来自于不同的tomcat提供的。（2台tomcat，端口：8081，8082）。两台tomcat，不同的响应内容：“8081”和“8082”。</li></ol><h4 id="3-2-步骤"><a href="#3-2-步骤" class="headerlink" title="3.2 步骤"></a>3.2 步骤</h4><ol><li><p>准备2个tomcat，并做好响应的页面，启动，测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# cd /usr/local/tomcatb/tomcat8082/webapps/city</span><br><span class="line">[root@192 city]# cat index.html</span><br><span class="line">this is 8082</span><br><span class="line">[root@192 city]# pwd</span><br><span class="line">/usr/local/tomcatb/tomcat8082/webapps/city</span><br><span class="line">[root@192 sbin]# cd /usr/local/tomcatb/tomcat8081/webapps/city</span><br><span class="line">[root@192 city]# cat index.html</span><br><span class="line">this is 8081</span><br><span class="line">[root@192 city]# pwd</span><br><span class="line">/usr/local/tomcatb/tomcat8081/webapps/city</span><br></pre></td></tr></table></figure></li><li><p>访问测试：</p><ul><li><a href="http://192.168.213.143:8081/city/">http://192.168.213.143:8081/city/</a></li></ul><p>​<img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx7.png" class="" title="nginx7 image"></p><ul><li><p><a href="http://192.168.213.143:8082/city/">http://192.168.213.143:8082/city/</a></p><img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx8.png" class="" title="nginx8 image"></li></ul></li><li><p>修改nginx.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # server list</span></span><br><span class="line">    <span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">        <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">        <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/&#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">9001;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /beijing/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8081;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /shanghai/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8082;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">9002;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://myServers;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重新加载nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问测试：<a href="http://www.ly.com:9002/city/">http://www.ly.com:9002/city/</a></p></li></ol><h3 id="4、负载均衡算法应用"><a href="#4、负载均衡算法应用" class="headerlink" title="4、负载均衡算法应用"></a>4、负载均衡算法应用</h3><h4 id="4-1-Round-Robin轮询"><a href="#4-1-Round-Robin轮询" class="headerlink" title="4.1 Round Robin轮询"></a>4.1 Round Robin轮询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-Least-Connections"><a href="#4-2-Least-Connections" class="headerlink" title="4.2 Least Connections"></a>4.2 Least Connections</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">least_conn;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-IP-Hash"><a href="#4-3-IP-Hash" class="headerlink" title="4.3 IP Hash"></a>4.3 IP Hash</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">ip_hash;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>调用则会显示8082</p><img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx8.png" class="" title="nginx8 image"><p>将8082标记为down</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">ip_hash;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082 down;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>再次访问则会显示回8081</p><img src="/2022/08/09/study/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/nginx7.png" class="" title="nginx7 image"><h4 id="4-4-Generic-Hash"><a href="#4-4-Generic-Hash" class="headerlink" title="4.4 Generic Hash"></a>4.4 Generic Hash</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">hash</span> <span class="string">$request_uri consistent;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-5-Random"><a href="#4-5-Random" class="headerlink" title="4.5 Random"></a>4.5 Random</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">random</span> <span class="string">two least_conn;;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-服务权重"><a href="#4-6-服务权重" class="headerlink" title="4.6 服务权重"></a>4.6 服务权重</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server list</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">myServers&#123;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8081 weight=2;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">localhost:8082 weight=8;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>参考自：<a href="https://blog.csdn.net/wanghangzhen/article/details/118554304">什么是负载均衡，看完文章秒懂</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;负载均衡及nginx负载均衡测试&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/nginx/"/>
    
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理</title>
    <link href="https://lyblog2022.github.io/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://lyblog2022.github.io/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2022-08-08T12:48:36.000Z</published>
    <updated>2022-08-08T15:13:10.916Z</updated>
    
    <content type="html"><![CDATA[<p>nginx反向代理</p><span id="more"></span><h3 id="1、单台代理"><a href="#1、单台代理" class="headerlink" title="1、单台代理"></a>1、单台代理</h3><h4 id="1-1-目的："><a href="#1-1-目的：" class="headerlink" title="1.1 目的："></a>1.1 目的：</h4><ol><li>在浏览器访问一个地址：<a href="http://www.ly.com/">www.ly.com</a></li><li>Nginx接受上面的请求。</li><li>转发请求到tomcat。</li><li>tomcat响应一个页面，页面中有：”tomcat hello !!!”。</li></ol><h4 id="1-2-操作"><a href="#1-2-操作" class="headerlink" title="1.2 操作"></a>1.2 操作</h4><ol><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# ps -ef | grep nginx</span><br><span class="line">root        2290       1  0 08:20 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nginx       2320    2290  0 08:23 ?        00:00:00 nginx: worker process</span><br><span class="line">root        2667    2175  0 09:02 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://192.168.213.143/">http://192.168.213.143/</a></p><img src="/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx.png" class="" title="nginx image"></li><li><p>准备一个tomcat。</p><p>查看服务器上是否有tomcat？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 nginx]# systemctl status tomcat</span><br><span class="line">Unit tomcat.service could not be found.</span><br></pre></td></tr></table></figure><p>tomcat安装</p><p>在tomcat下创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@192 tomcat]# ll</span><br><span class="line">总用量 136</span><br><span class="line">drwxr-xr-x. 2 root root  4096 8月   8 09:25 bin</span><br><span class="line">-rw-r--r--. 1 root root 19992 8月   8 09:26 BUILDING.txt</span><br><span class="line">drwxr-xr-x. 3 root root  4096 8月   8 09:32 conf</span><br><span class="line">-rw-r--r--. 1 root root  6210 8月   8 09:26 CONTRIBUTING.md</span><br><span class="line">drwxr-xr-x. 2 root root  4096 8月   8 09:25 lib</span><br><span class="line">-rw-r--r--. 1 root root 57092 8月   8 09:26 LICENSE</span><br><span class="line">drwxr-xr-x. 2 root root  4096 8月   8 09:32 logs</span><br><span class="line">-rw-r--r--. 1 root root  2333 8月   8 09:26 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3398 8月   8 09:26 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6901 8月   8 09:26 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16505 8月   8 09:26 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root    30 8月   8 09:25 temp</span><br><span class="line">drwxr-xr-x. 7 root root    81 8月   8 09:26 webapps</span><br><span class="line">drwxr-xr-x. 3 root root    22 8月   8 09:32 work</span><br><span class="line">[root@192 tomcat]# cd webapps</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 09:25 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 09:26 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 09:26 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 09:26 manager</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 09:25 ROOT</span><br><span class="line">[root@192 webapps]# mkdir root</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 09:25 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 09:26 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 09:26 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 09:26 manager</span><br><span class="line">drwxr-xr-x.  2 root root    6 8月   8 09:34 root</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 09:25 ROOT</span><br><span class="line">[root@192 webapps]# cd root</span><br><span class="line">[root@192 root]# vi index.html</span><br><span class="line">[root@192 root]# cat index.html</span><br><span class="line">tomcat hello !!!</span><br><span class="line">[root@192 root]# curl localhost:8080/root/index.html</span><br><span class="line">tomcat hello !!!</span><br></pre></td></tr></table></figure><p>tomcat启动测试：<a href="http://192.168.213.143:8080/root/index.html">http://192.168.213.143:8080/root/index.html</a></p><img src="/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx2.png" class="" title="nginx2 image"></li><li><p>修改nginx配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/&#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>重新加载配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>访问测试：</p><p><a href="http://www.ly.com/root/index.html">http://www.ly.com/root/index.html</a></p><img src="/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx2.png" class="" title="nginx2 image"></li></ol><h3 id="2、多台代理"><a href="#2、多台代理" class="headerlink" title="2、多台代理"></a>2、多台代理</h3><h4 id="2-1-目的"><a href="#2-1-目的" class="headerlink" title="2.1 目的"></a>2.1 目的</h4><ol><li>浏览器访问：（<a href="http://www.ly.com/beijing%EF%BC%89%EF%BC%8C%E9%80%9A%E8%BF%87nginx%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%80%E4%B8%AAtomcat%E4%B8%8A%EF%BC%88http://localhost:8081%EF%BC%89%EF%BC%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E6%98%BE%E7%A4%BA%EF%BC%9Abeijing%E3%80%82">http://www.ly.com/beijing），通过nginx，跳转到一个tomcat上（http://localhost:8081），在浏览器上显示：beijing。</a></li><li>浏览器访问：（<a href="http://www.ly.com/shanghai%EF%BC%89%EF%BC%8C%E9%80%9A%E8%BF%87nginx%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%80%E4%B8%AAtomcat%E4%B8%8A%EF%BC%88http://localhost:8082%EF%BC%89%EF%BC%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E6%98%BE%E7%A4%BA%EF%BC%9Ashanghai%E3%80%82">http://www.ly.com/shanghai），通过nginx，跳转到一个tomcat上（http://localhost:8082），在浏览器上显示：shanghai。</a></li></ol><h4 id="2-2-操作"><a href="#2-2-操作" class="headerlink" title="2.2 操作"></a>2.2 操作</h4><ol><li><p>复制一个tomcat，一个为8081，另一个为8082</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port=&quot;8015&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">&lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>准备文件</p><p>8081&#x2F;webapps&#x2F;ROOT下添加index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is BEIJING</span><br></pre></td></tr></table></figure><p>8082&#x2F;webapps&#x2F;ROOT下添加index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is SHANGHAI</span><br></pre></td></tr></table></figure></li><li><p>创建文件，拷贝文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@192 tomcat8081]# cd webapps</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 10:15 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 10:16 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 10:16 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 10:16 manager</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 10:48 ROOT</span><br><span class="line">[root@192 webapps]# mkdir beijing</span><br><span class="line">[root@192 webapps]# cp ROOT/index.html beijing/</span><br><span class="line">[root@192 tomcat8082]# cd webapps</span><br><span class="line">[root@192 webapps]# ll</span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 15 root root 4096 8月   8 10:16 docs</span><br><span class="line">drwxr-xr-x.  7 root root   99 8月   8 10:16 examples</span><br><span class="line">drwxr-xr-x.  6 root root   79 8月   8 10:16 host-manager</span><br><span class="line">drwxr-xr-x.  6 root root  114 8月   8 10:16 manager</span><br><span class="line">drwxr-xr-x.  3 root root 4096 8月   8 10:48 ROOT</span><br><span class="line">[root@192 webapps]# mkdir shanghai</span><br><span class="line">[root@192 webapps]# cp ROOT/index.html shanghai/</span><br></pre></td></tr></table></figure></li><li><p>服务器端访问测试</p></li><li><p>修改nginx配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">include</span>       <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line">    <span class="attr">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">log_format</span>  <span class="string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_log</span>  <span class="string">/var/log/nginx/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sendfile</span>        <span class="string">on;</span></span><br><span class="line"><span class="comment">    #tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">keepalive_timeout</span>  <span class="string">65;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/&#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8080;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span> <span class="string">9001;</span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.ly.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /beijing/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8081;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">~ /shanghai/ &#123;</span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://localhost:8082;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问测试</p><p><a href="http://www.ly.com:9001/shanghai/">http://www.ly.com:9001/shanghai/</a></p><img src="/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx3.png" class="" title="nginx3 image"><p><a href="http://www.ly.com:9001/beijing/">http://www.ly.com:9001/beijing/</a></p><img src="/2022/08/08/study/nginx/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/nginx4.png" class="" title="nginx4 image"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx反向代理&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/nginx/"/>
    
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>nginx常用命令及配置文件</title>
    <link href="https://lyblog2022.github.io/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://lyblog2022.github.io/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-08-08T12:17:04.000Z</published>
    <updated>2022-08-08T12:48:51.805Z</updated>
    
    <content type="html"><![CDATA[<p>nginx常用命令及配置文件</p><span id="more"></span><h3 id="1、nginx常用命令"><a href="#1、nginx常用命令" class="headerlink" title="1、nginx常用命令"></a>1、nginx常用命令</h3><h4 id="1-1-查看nginx版本号"><a href="#1-1-查看nginx版本号" class="headerlink" title="1.1  查看nginx版本号"></a>1.1  查看nginx版本号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/1.22.0</span><br></pre></td></tr></table></figure><h4 id="1-2-关闭nginx"><a href="#1-2-关闭nginx" class="headerlink" title="1.2 关闭nginx"></a>1.2 关闭nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2222       1  0 08:14 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nginx       2223    2222  0 08:14 ?        00:00:00 nginx: worker process</span><br><span class="line">root        2276    2175  0 08:19 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@192 sbin]# ./nginx -s stop</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2280    2175  0 08:19 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="1-3-启动nginx"><a href="#1-3-启动nginx" class="headerlink" title="1.3 启动nginx"></a>1.3 启动nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2280    2175  0 08:19 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line">[root@192 sbin]# ./nginx</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root        2290       1  0 08:20 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nginx       2291    2290  0 08:20 ?        00:00:00 nginx: worker process</span><br><span class="line">root        2293    2175  0 08:20 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="1-4-重载配置文件"><a href="#1-4-重载配置文件" class="headerlink" title="1.4 重载配置文件"></a>1.4 重载配置文件</h4><p>配置文件位置：&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="2、配置文件介绍"><a href="#2、配置文件介绍" class="headerlink" title="2、配置文件介绍"></a>2、配置文件介绍</h3><h4 id="2-1-配置文件位置："><a href="#2-1-配置文件位置：" class="headerlink" title="2.1 配置文件位置："></a>2.1 配置文件位置：</h4><img src="/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/nginx.png" class="" title="nginx image"><h4 id="2-2-指令"><a href="#2-2-指令" class="headerlink" title="2.2 指令"></a>2.2 指令</h4><h5 id="2-2-1-简单指令："><a href="#2-2-1-简单指令：" class="headerlink" title="2.2.1 简单指令："></a>2.2.1 简单指令：</h5><ul><li>名称+参数组成</li><li><img src="/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/nginx2.png" class="" title="nginx2 image"></li></ul><h5 id="2-2-2-块指令："><a href="#2-2-2-块指令：" class="headerlink" title="2.2.2 块指令："></a>2.2.2 块指令：</h5><img src="/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/nginx3.png" class="" title="nginx3 image"><h4 id="2-3-整体分类"><a href="#2-3-整体分类" class="headerlink" title="2.3 整体分类"></a>2.3 整体分类</h4><h5 id="2-3-1-全局块"><a href="#2-3-1-全局块" class="headerlink" title="2.3.1 全局块"></a>2.3.1 全局块</h5><ul><li>从配置文件开始到events</li><li>配置一些影响nginx服务器整体运行的一些指令</li></ul><h5 id="2-3-2-events块"><a href="#2-3-2-events块" class="headerlink" title="2.3.2 events块"></a>2.3.2 events块</h5><ul><li>配置服务器与用户的网络链接相关的</li><li><img src="/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/nginx4.png" class="" title="nginx4 image"></li></ul><h5 id="2-3-3-http块"><a href="#2-3-3-http块" class="headerlink" title="2.3.3 http块"></a>2.3.3 http块</h5><ul><li>修改最频繁部分</li><li>配置文件引入、日志格式等等</li><li><img src="/2022/08/08/study/nginx/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/nginx5.png" class="" title="nginx5 image"></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx常用命令及配置文件&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/nginx/"/>
    
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://lyblog2022.github.io/2022/08/01/algorithm/tree/tree/"/>
    <id>https://lyblog2022.github.io/2022/08/01/algorithm/tree/tree/</id>
    <published>2022-08-01T06:04:23.000Z</published>
    <updated>2022-08-01T07:26:46.659Z</updated>
    
    <content type="html"><![CDATA[<p>树的基本概念及二叉树的概念和遍历，转自<a href="https://blog.csdn.net/Real_Fool_/article/details/113930623">数据结构：树(Tree)【详解】</a></p><span id="more"></span><h3 id="1-树的基本概念"><a href="#1-树的基本概念" class="headerlink" title="1. 树的基本概念"></a>1. 树的基本概念</h3><h4 id="1-1-树的定义"><a href="#1-1-树的定义" class="headerlink" title="1.1 树的定义"></a>1.1 树的定义</h4><p>​树是n（n&gt;&#x3D;0）个结点的有限集。当n &#x3D; 0时，称为空树。在任意一棵非空树中应满足：</p><ol><li>有且仅有一个特定的称为根的结点。</li><li>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一棵树，并且称为根的子树。</li></ol><p>​显然，树的定义是递归的，即在树的定义中又用到了自身，树是一种递归的数据结构。树作为一种逻辑结构，同时也是一种分层结构，具有以下两个特点：</p><ol><li>树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。</li><li>树中所有结点可以有零个或多个后继。</li></ol><p>​因此n个结点的树中有n-1条边。</p><h4 id="1-2-基本术语"><a href="#1-2-基本术语" class="headerlink" title="1.2 基本术语"></a>1.2 基本术语</h4><p>​下面结合图示来说明一下树的一些基本术语和概念。</p><img src="/2022/08/01/algorithm/tree/tree/tree1.png" class="" title="tree1 image"><ol><li>考虑结点K。根A到结点K的唯一路径上的任意结点,称为结点K的<strong>祖先</strong>。如结点B是结点K的祖先,而结点K是结点B的<strong>子孙</strong>。路径上最接近结点K的结点E称为K的<strong>双亲</strong>,而K为结点E的<strong>孩子</strong>。根A是树中唯一没有双亲的结点。有相同双亲的结点称为<strong>兄弟</strong>,如结点K和结点L有相同的双亲E,即K和L为兄弟。</li><li>树中一个结点的孩子个数称为该<strong>结点的度</strong>,树中结点的最大度数称为<strong>树的度</strong>。如结点B的度为2,结点D的度为3,树的度为3。</li><li>度大于0的结点称为<strong>分支结点</strong>(又称<strong>非终端结点</strong>);度为0(没有子女结点)的结点称为<strong>叶子结点</strong>(又称<strong>终端结点</strong>)。在分支结点中,每个结点的分支数就是该结点的度。</li><li>结点的深度、高度和层次。<ol><li><strong>结点的层次</strong>从树根开始定义,根结点为第1层,它的子结点为第2层,以此类推。双亲在同一层的结点互为<strong>堂兄弟</strong>,图中结点G与E,F,H,I,J互为堂兄弟。</li><li><strong>结点的深度</strong>是从根结点开始自顶向下逐层累加的。</li><li><strong>结点的高度</strong>是从叶结点开始自底向上逐层累加的。</li><li><strong>树的高度</strong>(或<strong>深度</strong>)是树中结点的最大层数。图中树的高度为4。</li></ol></li><li>有序树和无序树。树中结点的各子树从左到右是有次序的,不能互换,称该树为<strong>有序树</strong>,否则称为<strong>无序树</strong>。假设图为有序树,若将子结点位置互换,则变成一棵不同的树。</li><li>路径和路径长度。树中两个结点之间的<strong>路径</strong>是由这两个结点之间所经过的结点序列构成的,而<strong>路径长度</strong>是路径上所经过的边的个数。<br>注意:由于树中的分支是有向的,即从双亲指向孩子,所以树中的路径是从上向下的,同一双亲的两个孩子之间不存在路径。</li><li>森林。<strong>森林</strong>是m (m≥0)棵互不相交的树的集合。森林的概念与树的概念十分相近，因为只要把树的根结点删去就成了森林。反之，只要给m棵独立的树加上一个结点，并把这m棵树作为该结点的子树，则森林就变成了树。</li></ol><h4 id="1-3-树的性质"><a href="#1-3-树的性质" class="headerlink" title="1.3 树的性质"></a>1.3 树的性质</h4><p>​树具有如下最基本的性质：</p><ol><li>树中的结点数等于所有结点的度数加1.</li><li>度为m的树中，第i层上至多有m^(i-1)个节点（i&gt;&#x3D;1）</li><li>高度为h的m叉树至多有(m^h-1)&#x2F;(m-1)个节点</li><li>具有n个节点的m叉树的最小高度为[logm(n(m-1)+1)]</li></ol><h3 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2. 二叉树"></a>2. 二叉树</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><p>​二叉树是另一种树形结构，其特点是每个结点至多只有两棵子树( 即二叉树中不存在度大于2的结点)，并且二叉树的子树有左右之分，其次序不能任意颠倒。<br>​与树相似，二叉树也以递归的形式定义。二叉树是n (n≥0) 个结点的有限集合:</p><p>​二叉树是有序树，若将其左、右子树颠倒，则成为另一棵不同的二叉树。即使树中结点只有一棵子树，也要区分它是左子树还是右子树。二叉树的5种基本形态如图所示。</p><img src="/2022/08/01/algorithm/tree/tree/tree2.png" class="" title="tree2 image"><h4 id="2-2-特殊的二叉树"><a href="#2-2-特殊的二叉树" class="headerlink" title="2.2 特殊的二叉树"></a>2.2 特殊的二叉树</h4><h5 id="2-2-1-斜树"><a href="#2-2-1-斜树" class="headerlink" title="2.2.1 斜树"></a>2.2.1 斜树</h5><p>​所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p><h5 id="2-2-2-满二叉树"><a href="#2-2-2-满二叉树" class="headerlink" title="2.2.2 满二叉树"></a>2.2.2 满二叉树</h5><p>​一颗高度为h，且含有2^h-1个节点的二叉树称为满二叉树，即树中的每层都含有最多的节点。满二叉树的叶子结点都集中在二叉树的最下一层，并且出叶子结点之外的每个节点度数均为2。可以对满二叉树按层序编号：约定编号从根节点(根节点编号为1)起，自上而下，自左而右。这样，每个节点对应一个编号，对于编号为i的节点，若有双亲，则其双亲为i&#x2F;2，若有左孩子，则左孩子为2i；若有右孩子，则右孩子为2i+1</p><img src="/2022/08/01/algorithm/tree/tree/tree3.png" class="" title="tree3 image"><h5 id="2-2-3-完全二叉树"><a href="#2-2-3-完全二叉树" class="headerlink" title="2.2.3 完全二叉树"></a>2.2.3 完全二叉树</h5><p>​高度为h，有n个节点的二叉树，当且仅当其每个节点都与高度为h的满二叉树中编号为1~n的节点一一对应时，称为完全二叉树，其特点为：</p><ol><li>若i&lt;&#x3D;n&#x2F;2，则节点i为分支节点，否则为叶子节点</li><li>叶子结点只可能在层次最大的两层上出现。对于最大层次中的叶子结点，都依次排列在该层最左边的位置上。</li><li>若有度为1 的结点，则只可能有一个，且该结点只有左孩子而无右孩子(<strong>重要特征</strong>)。</li><li>按层序编号后，一旦出现某结点(编号为i)为叶子节点或只有左孩子，则编号大于i的节点均为叶子节点</li><li>若n为奇数，则每个分支节点都有左孩子和右孩子；若n为偶数，则编号最大的分支节点(编号为n&#x2F;2)只有左孩子，没有右孩子，其余分支节点左右孩子都有</li></ol><h5 id="2-2-4-二叉排序树"><a href="#2-2-4-二叉排序树" class="headerlink" title="2.2.4 二叉排序树"></a>2.2.4 二叉排序树</h5><p>​左子树上所有结点的关键字均小于根结点的关键字;右子树上的所有结点的关键字均大于根结点的关键字;左子树和右子树又各是一棵二叉排序树。</p><h5 id="2-2-5-平衡二叉树"><a href="#2-2-5-平衡二叉树" class="headerlink" title="2.2.5 平衡二叉树"></a>2.2.5 平衡二叉树</h5><p>​树上任一结点的左子树和右子树的深度之差不超过1。</p><h4 id="2-3-二叉树的性质"><a href="#2-3-二叉树的性质" class="headerlink" title="2.3 二叉树的性质"></a>2.3 二叉树的性质</h4><ol><li>任意一棵树，若节点数量为n，则边的数量为n-1</li><li>非空二叉树上的叶子节点树等于度为2的节点数+1</li><li>非空二叉树上第k层上至多有2^(k-1)个节点（k&gt;&#x3D;1）</li><li>高度为h的二叉树至多有2^h-1个节点（k&gt;&#x3D;1）</li><li>对完全二叉树按从上到下、从左到右的顺序依次编号1,2..n，则有以下关系<ol><li>i&gt;1时，节点i的双亲的编号为i&#x2F;2，即当i为偶数时，它是双亲的左孩子；当i为奇数时，它是双亲的右孩子</li><li>当2i&lt;&#x3D;n时，节点i的左孩子编号为2i，否则无左孩子</li><li>当2i+1&lt;&#x3D;n时，节点i的右孩子编号为2i+1，否则无右孩子</li><li>节点i所在的层次（深度）为{log2 i} +1</li></ol></li><li>具有n个（n&gt;0）节点的完全二叉树的高度为{log2 n}+1</li></ol><h4 id="2-4-二叉排序树"><a href="#2-4-二叉排序树" class="headerlink" title="2.4 二叉排序树"></a>2.4 二叉排序树</h4><p>​二叉排序树(也称二叉查找树)或者是一棵空树，或者是具有下列特性的二叉树:</p><ol><li>若左子树非空，则左子树上所有结点的值均小于根结点的值。</li><li>若右子树非空，则右子树上所有结点的值均大于根结点的值。</li><li>左、右子树也分别是一棵二叉排序树。</li></ol><h4 id="2-5-平衡二叉树"><a href="#2-5-平衡二叉树" class="headerlink" title="2.5 平衡二叉树"></a>2.5 平衡二叉树</h4><p>​平衡二叉树是一种儿茶排序树，其中每一个节点的左子树和右子树的高度差至多等于1</p><p>​它是一种高度平衡的二叉排序树。它要么是一棵空树， 要么它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;树的基本概念及二叉树的概念和遍历，转自&lt;a href=&quot;https://blog.csdn.net/Real_Fool_/article/details/113930623&quot;&gt;数据结构：树(Tree)【详解】&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:814. 二叉树剪枝</title>
    <link href="https://lyblog2022.github.io/2022/07/21/leetcode/middle/question814/"/>
    <id>https://lyblog2022.github.io/2022/07/21/leetcode/middle/question814/</id>
    <published>2022-07-21T09:06:19.000Z</published>
    <updated>2022-08-01T03:16:17.096Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/binary-tree-pruning/">二叉树剪枝</a></p><span id="more"></span><p>给你二叉树的根结点 root ，此外树的每个结点的值要么是 0 ，要么是 1 。</p><p>返回移除了所有不包含 1 的子树的原二叉树。</p><p>节点 node 的子树为 node 本身加上所有 node 的后代。</p><p>示例 1：</p><img src="/2022/07/21/leetcode/middle/question814/code1.png" class="" title="code1 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,null,0,0,1]</span><br><span class="line">输出：[1,null,0,null,1]</span><br><span class="line">解释：</span><br><span class="line">只有红色节点满足条件“所有不包含 1 的子树”。 右图为返回的答案。</span><br></pre></td></tr></table></figure><p>示例 2：</p><img src="/2022/07/21/leetcode/middle/question814/code2.png" class="" title="code2 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,0,1,0,0,0,1]</span><br><span class="line">输出：[1,null,1,null,1]</span><br></pre></td></tr></table></figure><p>示例 3：</p><img src="/2022/07/21/leetcode/middle/question814/code3.png" class="" title="code3 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,1,0,1,1,0,1,0]</span><br><span class="line">输出：[1,1,0,1,1,null,1]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>树中节点的数目在范围 [1, 200] 内</li><li>Node.val 为 0 或 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question814;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeNode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question814</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/21 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question814;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question814</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/21 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">pruneTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.left = pruneTree(root.left);</span><br><span class="line">            root.right = pruneTree(root.right);</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span> &amp;&amp; root.val == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-pruning/&quot;&gt;二叉树剪枝&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="middle" scheme="https://lyblog2022.github.io/categories/leetcode/middle/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:1260. 二维网格迁移</title>
    <link href="https://lyblog2022.github.io/2022/07/20/leetcode/easy/question1260/"/>
    <id>https://lyblog2022.github.io/2022/07/20/leetcode/easy/question1260/</id>
    <published>2022-07-20T09:32:32.000Z</published>
    <updated>2022-08-01T03:15:59.899Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二维网格迁移"><a href="#二维网格迁移" class="headerlink" title=" 二维网格迁移"></a><a href="https://leetcode.cn/problems/shift-2d-grid/"> 二维网格迁移</a></h4><span id="more"></span><h4 id="给你一个-m-行-n-列的二维网格-grid-和一个整数-k。你需要将-grid-迁移-k-次。"><a href="#给你一个-m-行-n-列的二维网格-grid-和一个整数-k。你需要将-grid-迁移-k-次。" class="headerlink" title="给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。"></a>给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。</h4><p>每次「迁移」操作将会引发下述活动：</p><ul><li><p>位于 grid [i][j] 的元素将会移动到 grid[i][j + 1]。</p></li><li><p>位于 grid[i][n - 1] 的元素将会移动到 grid[i + 1][0]。</p></li><li><p>位于 grid[m - 1][n - 1] 的元素将会移动到 grid[0][0]。</p></li><li><p>请你返回 k 次迁移操作后最终得到的 二维网格。</p></li></ul><p>示例 1：</p><img src="/2022/07/20/leetcode/easy/question1260/code1.png" class="" title="code1 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1</span><br><span class="line">输出：[[9,1,2],[3,4,5],[6,7,8]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><img src="/2022/07/20/leetcode/easy/question1260/code2.png" class="" title="code2 image"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4</span><br><span class="line">输出：[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9</span><br><span class="line">输出：[[1,2,3],[4,5,6],[7,8,9]]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><p>m &#x3D;&#x3D; grid.length</p></li><li><p>n &#x3D;&#x3D; grid[i].length</p></li><li><p>1 &lt;&#x3D; m &lt;&#x3D; 50</p></li><li><p>1 &lt;&#x3D; n &lt;&#x3D; 50</p></li><li><p>-1000 &lt;&#x3D; grid[i][j] &lt;&#x3D; 1000</p></li><li><p>0 &lt;&#x3D; k &lt;&#x3D; 100</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question1260;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question1260</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/20 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] grid = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().shiftGrid(grid, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">shiftGrid</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="comment">//列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (k % (m * n) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//特殊情况1，翻转次数是行*列的倍数，不需要处理</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> k % (m * n);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//特殊情况2，翻转次数是列的倍数，则行整体翻转</span></span><br><span class="line">            <span class="keyword">if</span> (rest % n == <span class="number">0</span>) &#123;</span><br><span class="line">                index = k / n;</span><br><span class="line">                System.out.println(index);</span><br><span class="line">                <span class="keyword">while</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> m - <span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span>[] tmp = grid[f];</span><br><span class="line">                    <span class="keyword">while</span> (f&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                        grid[f] = grid[f-<span class="number">1</span>];</span><br><span class="line">                        f--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    grid[<span class="number">0</span>] = tmp;</span><br><span class="line">                    index--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//数据处理</span></span><br><span class="line">                <span class="keyword">while</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//列交换</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> m-<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//最后一列备份</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp0</span> <span class="operator">=</span> grid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">                    <span class="keyword">while</span> (h&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                        tmp[h] = grid[h-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">                        h--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tmp[<span class="number">0</span>] = tmp0;</span><br><span class="line">                    h =<span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//交换</span></span><br><span class="line">                    <span class="keyword">while</span> (h&lt;m) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span> (l&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                            grid[h][l] = grid[h][l-<span class="number">1</span>];</span><br><span class="line">                            l--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        grid[h][<span class="number">0</span>]=tmp[h];</span><br><span class="line">                        h++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//格式转化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                list.add(grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            resultList.add(list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;二维网格迁移&quot;&gt;&lt;a href=&quot;#二维网格迁移&quot; class=&quot;headerlink&quot; title=&quot; 二维网格迁移&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/shift-2d-grid/&quot;&gt; 二维网格迁移&lt;/a&gt;&lt;/h4&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:8. 字符串转换整数 (atoi)</title>
    <link href="https://lyblog2022.github.io/2022/07/19/leetcode/middle/question8/"/>
    <id>https://lyblog2022.github.io/2022/07/19/leetcode/middle/question8/</id>
    <published>2022-07-19T08:48:34.000Z</published>
    <updated>2022-08-01T03:16:12.648Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/string-to-integer-atoi/">请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 atoi 函数）</a>。</p><span id="more"></span><p>函数 myAtoi(string s) 的算法如下：</p><p>读入字符串并丢弃无用的前导空格<br>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。<br>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。<br>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。<br>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。<br>返回整数作为最终结果。<br>注意：</p><p>本题中的空白字符只包括空格字符 ‘ ‘ 。<br>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;42&quot;</span><br><span class="line">输出：42</span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 3 步：&quot;42&quot;（读入 &quot;42&quot;）</span><br><span class="line">           ^</span><br><span class="line">解析得到整数 42 。</span><br><span class="line">由于 &quot;42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;   -42&quot;</span><br><span class="line">输出：-42</span><br><span class="line">解释：</span><br><span class="line">第 1 步：&quot;   -42&quot;（读入前导空格，但忽视掉）</span><br><span class="line">            ^</span><br><span class="line">第 2 步：&quot;   -42&quot;（读入 &#x27;-&#x27; 字符，所以结果应该是负数）</span><br><span class="line">             ^</span><br><span class="line">第 3 步：&quot;   -42&quot;（读入 &quot;42&quot;）</span><br><span class="line">               ^</span><br><span class="line">解析得到整数 -42 。</span><br><span class="line">由于 &quot;-42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;4193 with words&quot;</span><br><span class="line">输出：4193</span><br><span class="line">解释：</span><br><span class="line">第 1 步：&quot;4193 with words&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         ^</span><br><span class="line">第 2 步：&quot;4193 with words&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         ^</span><br><span class="line">第 3 步：&quot;4193 with words&quot;（读入 &quot;4193&quot;；由于下一个字符不是一个数字，所以读入停止）</span><br><span class="line">             ^</span><br><span class="line">解析得到整数 4193 。</span><br><span class="line">由于 &quot;4193&quot; 在范围 [-231, 231 - 1] 内，最终结果为 4193 。</span><br></pre></td></tr></table></figure><p>提示：</p><p>0 &lt;&#x3D; s.length &lt;&#x3D; 200<br>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/19 16:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().myAtoi(<span class="string">&quot;-+12&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myAtoi</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; s.length()) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(index);</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    result += c;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                    result += c;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                    result += c;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span>.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Double.parseDouble(result) &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Double.parseDouble(result) &lt; Integer.MIN_VALUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.parseInt(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/string-to-integer-atoi/&quot;&gt;请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&amp;#x2F;C++ 中的 atoi 函数）&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="middle" scheme="https://lyblog2022.github.io/categories/leetcode/middle/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:14. 最长公共前缀</title>
    <link href="https://lyblog2022.github.io/2022/07/18/leetcode/easy/question14/"/>
    <id>https://lyblog2022.github.io/2022/07/18/leetcode/easy/question14/</id>
    <published>2022-07-18T08:40:03.000Z</published>
    <updated>2022-08-01T03:15:53.512Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-common-prefix/">最长公共前缀</a>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串“”。</p><span id="more"></span><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; strs.length &lt;&#x3D; 200</li><li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 200</li><li>strs[i] 仅由小写英文字母组成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question14;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/18 16:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] str1 = &#123;<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;racecar&quot;</span>, <span class="string">&quot;car&quot;</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().longestCommonPrefix(str1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (strs != <span class="literal">null</span> &amp;&amp; strs.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//先读取前两个字符串的公共前缀</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> strs[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; str1.length() &amp;&amp; index &lt; str2.length()) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">s1</span> <span class="operator">=</span> str1.charAt(index);</span><br><span class="line">                    <span class="type">char</span> <span class="variable">s2</span> <span class="operator">=</span> str2.charAt(index);</span><br><span class="line">                    <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                        text += s1;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (text == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(text)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> text;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    index = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">while</span> (index &lt; strs.length) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (strs[index].startsWith(text)) &#123;</span><br><span class="line">                            index++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">while</span> (text.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                text = text.substring(<span class="number">0</span>, text.length() - <span class="number">1</span>);</span><br><span class="line">                                <span class="keyword">if</span> (strs[index].startsWith(text)) &#123;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(text)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> text;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> text;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-common-prefix/&quot;&gt;最长公共前缀&lt;/a&gt;编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串“”。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode:13.罗马数字转整数</title>
    <link href="https://lyblog2022.github.io/2022/07/16/leetcode/easy/question13/"/>
    <id>https://lyblog2022.github.io/2022/07/16/leetcode/easy/question13/</id>
    <published>2022-07-16T05:36:08.000Z</published>
    <updated>2022-08-01T03:15:48.421Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/roman-to-integer/">罗马数字转整数</a>难度简单1965收藏分享切换为英文接收动态反馈</p><span id="more"></span><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.question13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.question13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/16 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Solution</span>().romanToInt(<span class="string">&quot;DCXXI&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//数据初始化</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;V&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;X&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">&quot;C&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;D&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;M&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        map.put(<span class="string">&quot;IV&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&quot;IX&quot;</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="string">&quot;XL&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        map.put(<span class="string">&quot;XC&quot;</span>, <span class="number">90</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CD&quot;</span>, <span class="number">400</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CM&quot;</span>, <span class="number">900</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; s.length()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">Character</span> <span class="variable">s1</span> <span class="operator">=</span> s.charAt(index);</span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> s1.toString();</span><br><span class="line">                <span class="comment">//组合字符处理</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="string">&quot;I&quot;</span>.equals(text) || <span class="string">&quot;X&quot;</span>.equals(text) || <span class="string">&quot;C&quot;</span>.equals(text)) &amp;&amp; index &lt; (s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                    text += s.charAt(++index);</span><br><span class="line">                    <span class="comment">//组合字符取值</span></span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(text)) &#123;</span><br><span class="line">                        num += map.get(text);</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//单个字符取值</span></span><br><span class="line">                        text = text.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                        num += map.get(text);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    num += map.get(text);</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                result += num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/roman-to-integer/&quot;&gt;罗马数字转整数&lt;/a&gt;难度简单1965收藏分享切换为英文接收动态反馈&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/categories/leetcode/"/>
    
    <category term="easy" scheme="https://lyblog2022.github.io/categories/leetcode/easy/"/>
    
    
    <category term="leetcode" scheme="https://lyblog2022.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>平衡树及红黑树</title>
    <link href="https://lyblog2022.github.io/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>https://lyblog2022.github.io/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2022-07-11T09:38:25.000Z</published>
    <updated>2022-08-01T13:51:17.865Z</updated>
    
    <content type="html"><![CDATA[<p>平衡二叉树及红黑树</p> <span id="more"></span><h3 id="1-平衡二叉树"><a href="#1-平衡二叉树" class="headerlink" title="1. 平衡二叉树"></a>1. 平衡二叉树</h3><p>​平衡二叉树有以下规则：</p><ul><li>规则1：每个节点最多只有两个子节点（二叉）</li><li>规则2：每个节点的值比它的左子树所有的节点大，比它的右子树所有节点小（有序）</li><li>规则3：每个节点左子树的高度与右子树高度之差的绝对值不超过1</li></ul><p>【总结】:平衡二叉树其实就是高度相对平衡的有两个子节点的有序树。</p><h3 id="2-红黑树"><a href="#2-红黑树" class="headerlink" title="2. 红黑树"></a>2. 红黑树</h3><p>​红黑树和上面的平衡二叉树类似，本质上都是为了解决排序二叉树在极端情况下退化成链表导致检索效率大大降低的问题，红黑树最早是由 Rudolf Bayer 于 1972 年发明的。</p><p>红黑树首先肯定是一个排序二叉树，它在每个节点上增加了一个存储位来表示节点的颜色，可以是 RED 或 BLACK 。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree1.png" class="" title="tree1 image"><h4 id="2-1-特性"><a href="#2-1-特性" class="headerlink" title="2.1 特性"></a>2.1 特性</h4><ol><li>每个节点要么是红色，要么是黑色。</li><li>根节点永远是黑色的。</li><li>所有的叶子节点都是空节点（即null），并且是黑色的。</li><li>每个红色节点的两个子节点都是黑色。（从每个叶子到根的路径上不会有两个连续的红色节点</li><li>从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点。</li></ol><p>红黑树的平衡通过旋转实现，任何不平衡都会在三次旋转之内解决。查找，插入，删除的时间复杂度均为O(log(N))</p><p>【说明】</p><ul><li>对于性质 1 和性质 2 ，相当于是对红黑树每个节点的约束，根节点是黑色，其他的节点要么是红色，要么是黑色。</li><li>性质 3 中指定红黑树的每个叶子节点都是空节点，而且叶子节点都是黑色，但 Java 实现的红黑树会使用 null 来代表空节点，因此我们在遍历 Java里的红黑树的时候会看不到叶子节点，而看到的是每个叶子节点都是红色的，这一点需要注意。</li><li>约束4和5，保证了红黑树的<strong>大致平衡</strong>：根到叶子的所有路径中，最长路径不会超过最短路径的2倍。</li><li>使得红黑树在最坏的情况下，也能有O(log2 N)的查找效率</li><li>红黑树在最差情况下，最长的路径都不会比最短的路径长出两倍。其实红黑树并不是真正的平衡二叉树，它只能保证大致是平衡的，因为红黑树的高度不会无限增高，在实际应用用，红黑树的统计性能要高于平衡二叉树，但极端性能略差。</li></ul><h4 id="2-2-红黑树的插入"><a href="#2-2-红黑树的插入" class="headerlink" title="2.2 红黑树的插入"></a>2.2 红黑树的插入</h4><p>​红黑树的插入和普通排序二叉树的插入基本一致，排序二叉树的要求是左子树上的所有节点都要比根节点小，右子树上的所有节点都要比跟节点大，当插入一个新的节点的时候，首先要找到当前要插入的节点适合放在排序二叉树哪个位置，然后插入当前节点即可。红黑树和排序二叉树不同的是，红黑树需要在插入节点调整树的结构来让树保持平衡。</p><p>​一般情况下，红黑树中新插入的节点都是红色的，那么，为什么说新加入到红黑树中的节点要是红色的呢？</p><p>​这个问题可以这样理解，我们从性质5中知道，当前红黑树中从根节点到每个叶子节点的黑色节点数量是一样的，此时假如新的黑色节点的话，必然破坏规则，但加入红色节点却不一定，除非其父节点就是红色节点，因此加入红色节点，破坏规则的可能性小一些。</p><p>​接下来我们重点来讲红黑树插入新节点后是如何保持平衡的。</p><p>​给定下面这样一颗红黑树：</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree2.png" class="" title="tree2 image"><p>​当插入值为66的节点的时候，示意图如下：</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree3.png" class="" title="tree3 image"><p>​很明显，这个时候结构依然遵循着上述5大特性，无需启动自动平衡机制调整节点平衡状态。</p><p>​如果再向里面插入值为51的节点，这个时候红黑树变成了这样。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree4.png" class="" title="tree4 image"><p>​这样的结构实际上是不满足性质4的，红色两个子节点必须是黑色的，而这里49这个红色节点现在有个51的红色节点与其相连。</p><p>​这个时候需要调整这个树的结构来保证红黑树的平衡。</p><p>​首先尝试将49这个节点设置为黑色，如下示意图。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree5.png" class="" title="tree5 image"><p>​这个时候黑高是不对的，其中 60-56-45-49-51-null 这条路径有 4 个黑节点，其他路径的黑色节点是 3 个。</p><p>​接着调整红黑树，再次尝试把45这个节点设置为红色的，如下图所示：</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree6.png" class="" title="tree6 image"><p>​这个时候又出现新的问题，56-45-43 都是红色节点的，出现了红色节点相连的问题。</p><p>​于是需要再把 56 和 43 设置为黑色的，如下图所示。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree7.png" class="" title="tree7 image"><p>​于是把 68 这个红色节点设置为黑色的。</p><img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree8.png" class="" title="tree8 image"><p>​对于这种红黑树插入节点的情况下，可以只需要通过变色就可以保持树的平衡了。但是并不是每次都是这么幸运的，当变色行不通的时候，需要考虑另一个手段就是旋转了。</p><p>【例如】下面这种情况，同样还是拿这颗红黑树举例。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree9.png" class="" title="tree9 image"></p><p>​现在这颗红黑树，我们现在插入节点65。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree10.png" class="" title="tree10 image"></p><p>​尝试把 66 这个节点设置为黑色，如下图所示。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree11.png" class="" title="tree11 image"></p><p>​这样操作之后黑高又出现不一致的情况了，60-68-64-null 有 3 个黑色节点，而60-68-64-66-null 这条路径有 4 个黑色节点，这样的结构是不平衡的。</p><p>​或者把 68 设置为黑色，把 64 设置为红色，如下图所示：</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree12.png" class="" title="tree12 image"></p><p>​但是，同样的问题，上面这颗红黑树的黑色高度还是不一致，60-68-64-null 和 60-68-64-66-null 这两条路径黑色高度还是不一致。</p><p>​这种情况如果只通过变色的情况是不能保持红黑树的平衡的。</p><h4 id="2-3-红黑树的旋转"><a href="#2-3-红黑树的旋转" class="headerlink" title="2.3 红黑树的旋转"></a>2.3 红黑树的旋转</h4><h5 id="2-3-1-左旋"><a href="#2-3-1-左旋" class="headerlink" title="2.3.1 左旋"></a>2.3.1 左旋</h5><p>​逆时针旋转两个节点，让一个节点被其右子节点取代，而该节点成为右子节点的左子节点。</p><p>​首先断开节点PL与右子节点G的关系，同时将其右子节点的引用指向节点C2；然后断开节点G与左子节点C2的关系，同时将G的左子节点的应用指向节点PL。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree13.png" class="" title="tree13 image"></p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree.gif" class="" title="tree image"></p><h5 id="2-3-2-右旋"><a href="#2-3-2-右旋" class="headerlink" title="2.3.2 右旋"></a>2.3.2 右旋</h5><p>​顺时针旋转两个节点，让一个节点被其左子节点取代，而该节点成为左子节点的右子节点。</p><p>​首先断开节点G与左子节点PL的关系，同时将其左子节点的引用指向节点C2；然后断开节点PL与右子节点C2的关系，同时将PL的右子节点的应用指向节点G。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree14.png" class="" title="tree14 image"></p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree2.gif" class="" title="tree2 image"></p><h4 id="2-4-红黑树的几种旋转场景"><a href="#2-4-红黑树的几种旋转场景" class="headerlink" title="2.4 红黑树的几种旋转场景"></a>2.4 红黑树的几种旋转场景</h4><h5 id="2-4-1-左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）"><a href="#2-4-1-左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）" class="headerlink" title="2.4.1 左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）"></a>2.4.1 左左节点旋转（插入节点的父节点是左节点，插入节点也是左节点）</h5><p>​如下图所示的红黑树，插入节点是65。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree15.png" class="" title="tree15 image"></p><p>​操作步骤如下可以围绕祖父节点 69 右旋，再结合变色，步骤如下所示</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree16.png" class="" title="tree16 image"></p><h5 id="2-4-2-左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）"><a href="#2-4-2-左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）" class="headerlink" title="2.4.2 左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）"></a>2.4.2 左右节点旋转（插入节点的父节点是左节点，插入节点是右节点）</h5><p>​还是上面这颗红黑树，再插入节点 67。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree15.png" class="" title="tree15 image"></p><p>​这种情况可以这样操作，先围绕父节点 66 左旋，然后再围绕祖父节点 69 右旋，最后再将 67 设置为黑色，把 69 设置为红色，如下图所示。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree17.png" class="" title="tree17 image"></p><h5 id="2-4-3-右左节点旋转（插入节点的父节点是右节点，插入节点左节点）"><a href="#2-4-3-右左节点旋转（插入节点的父节点是右节点，插入节点左节点）" class="headerlink" title="2.4.3 右左节点旋转（插入节点的父节点是右节点，插入节点左节点）"></a>2.4.3 右左节点旋转（插入节点的父节点是右节点，插入节点左节点）</h5><p>​如下图这种情况，要插入节点68。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree18.png" class="" title="tree18 image"></p><p>​这种情况，可以先围绕父节点 69 右旋，接着再围绕祖父节点 66 左旋，最后把 68 节点设置为黑色，把 66 设置为红色，具体操作步骤如下所示。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree19.png" class="" title="tree19 image"></p><h5 id="2-4-4-右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）"><a href="#2-4-4-右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）" class="headerlink" title="2.4.4 右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）"></a>2.4.4 右右节点旋转（插入节点的父节点是右节点，插入节点也是右节点）</h5><p>​还是来上面的图来举例，在这颗红黑树上插入节点 70 。</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree20.png" class="" title="tree20 image"></p><p>​可以这样操作围绕祖父节点 66 左旋，再把旋转后的根节点 69 设置为黑色，把 66 这个节点设置为红色。具体可以参看下图：</p><p>​<img src="/2022/07/11/algorithm/tree/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%8F%8A%E7%BA%A2%E9%BB%91%E6%A0%91/tree21.png" class="" title="tree21 image"></p><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_27098537/article/details/122796569">红黑树与平衡二叉树_百图详解红黑树</a></li><li><a href="https://blog.csdn.net/weixin_44780082/article/details/112239269">【数据结构】红黑树与平衡二叉树的区别以及原理详解（附图解）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;平衡二叉树及红黑树&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://lyblog2022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="数据结构" scheme="https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="红黑树" scheme="https://lyblog2022.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
    <category term="平衡树" scheme="https://lyblog2022.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ初步学习</title>
    <link href="https://lyblog2022.github.io/2022/06/26/study/rabbitMq/rabbitMQ1/"/>
    <id>https://lyblog2022.github.io/2022/06/26/study/rabbitMq/rabbitMQ1/</id>
    <published>2022-06-26T02:17:45.000Z</published>
    <updated>2022-06-26T04:55:21.021Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ学习及简单原理简介</p><span id="more"></span><h3 id="1、AMQP"><a href="#1、AMQP" class="headerlink" title="1、AMQP"></a>1、AMQP</h3><h4 id="1-1-AMQP"><a href="#1-1-AMQP" class="headerlink" title="1.1 AMQP"></a>1.1 AMQP</h4><p>​<code>AMQP</code>(<code>Advanced Message Queuing Protocol</code>，高级消息队列协议)是进程之间传递异步消息的网络协议。</p><h4 id="1-2-AMQP工作过程"><a href="#1-2-AMQP工作过程" class="headerlink" title="1.2 AMQP工作过程"></a>1.2 AMQP工作过程</h4><p>​发布者(Publisher)发布消息(Message)，经过交换机(Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列(Queue)，最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。</p><img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq1.png" class="" title="mq1 image"><h4 id="1-3-队列"><a href="#1-3-队列" class="headerlink" title="1.3 队列"></a>1.3 队列</h4><p>​队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。</p><p>​MQ（消息队列）很多功能都是基于此队列结构实现的</p><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq2.png" class="" title="mq2 image"></p><h3 id="2、RabbitMQ"><a href="#2、RabbitMQ" class="headerlink" title="2、RabbitMQ"></a>2、RabbitMQ</h3><h4 id="2-1-RabbitMQ介绍"><a href="#2-1-RabbitMQ介绍" class="headerlink" title="2.1 RabbitMQ介绍"></a>2.1 RabbitMQ介绍</h4><p>​RabbitMQ是由Erlang语言编写的基于AMQP的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。</p><h5 id="2-1-1-解决应用耦合"><a href="#2-1-1-解决应用耦合" class="headerlink" title="2.1.1 解决应用耦合"></a>2.1.1 解决应用耦合</h5><p>​不使用MQ时</p><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq3.png" class="" title="mq3 image"></p><p>​使用MQ解决耦合</p><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq4.png" class="" title="mq4 image"></p><h4 id="2-2-RabbitMQ适用场景"><a href="#2-2-RabbitMQ适用场景" class="headerlink" title="2.2 RabbitMQ适用场景"></a>2.2 RabbitMQ适用场景</h4><ul><li>排队算法 : 使用消息队列特性</li><li>秒杀活动 : 使用消息队列特性</li><li>消息分发 : 使用消息异步特性</li><li>异步处理 : 使用消息异步特性</li><li>数据同步 : 使用消息异步特性</li><li>处理耗时任务 : 使用消息异步特性</li><li>流量销峰</li></ul><h3 id="3、RabbitMQ原理"><a href="#3、RabbitMQ原理" class="headerlink" title="3、RabbitMQ原理"></a>3、RabbitMQ原理</h3><p>​<img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq5.png" class="" title="mq5 image"></p><ol><li><strong>Message</strong>：消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出消息可能持久性存储)等。</li><li><strong>Publisher</strong>：消息的生产者。也是一个向交换器发布消息的客户端应用程序。</li><li><strong>Consumer</strong>：消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。</li><li><strong>Exchange</strong>：交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型1. direct(发布与订阅 完全匹配)2. fanout(广播)3. topic(主题，规则匹配)</li><li><strong>Binding</strong>：绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li><li><strong>Queue</strong>：消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。</li><li><strong>Routing-key</strong>：路由键。RabbitMQ决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是key，队列是value）队列通过路由键绑定到交换器。消息发送到MQ服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞</li><li><strong>Connection</strong>：链接。指rabbit服务器和服务建立的TCP链接。</li><li><strong>Channel</strong>：信道。<ol><li>Channel中文叫做信道，是TCP里面的虚拟链接。例如：电缆相当于TCP，信道是一个独立光纤束，一条TCP连接上创建多条信道是没有问题的。</li><li>TCP一旦打开，就会创建AMQP信道</li><li>无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。</li></ol></li><li><strong>Virtual Host</strong>：虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是**&#x2F;**</li><li><strong>Borker</strong>：表示消息队列服务器实体。</li><li><strong>交换器和队列的关系</strong>：交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。</li><li><strong>RabbitMQ为什么需要信道？为什么不是TCP直接通信？</strong><ol><li>TCP的创建和销毁开销特别大。创建需要3次握手，销毁需要4次分手</li><li>如果不用信道，那应用程序就会以TCP链接Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理TCP链接数也是有限制的，必定造成性能瓶颈</li><li>信道的原理是一条线程一条通道，多条线程多条通道同用一条TCP链接。一条TCP链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。</li></ol></li></ol><h3 id="4、交换器（交换机）"><a href="#4、交换器（交换机）" class="headerlink" title="4、交换器（交换机）"></a>4、交换器（交换机）</h3><p>​交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在RabbitMQ中支持四种交换器</p><ol><li>Direct Exchange：直连交换器（默认）</li><li>Fanout Exchange：扇形交换器</li><li>Topic Exchange：主题交换器</li><li>Header Exchange：首部交换器。</li></ol><p>​在RabbitMq的Web管理界面中Exchanges选项卡就可以看见这四个交换器。</p><img src="/2022/06/26/study/rabbitMq/rabbitMQ1/mq6.png" class="" title="mq6 image"><h4 id="4-1-direct交换器"><a href="#4-1-direct交换器" class="headerlink" title="4.1 direct交换器"></a>4.1 direct交换器</h4><p>​direct交换器是RabbitMQ默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。</p><p>​代码实现</p><h5 id="4-1-1-添加依赖"><a href="#4-1-1-添加依赖" class="headerlink" title="4.1.1 添加依赖"></a>4.1.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-2-编写配置文件"><a href="#4-1-2-编写配置文件" class="headerlink" title="4.1.2 编写配置文件"></a>4.1.2 编写配置文件</h5><p>​新建application.yml.</p><p>​host:默认值localhost</p><p>​username默认值：guest</p><p>​password默认值：guest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.133</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">ly</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">qwq</span></span><br></pre></td></tr></table></figure><h5 id="4-1-3-配置类"><a href="#4-1-3-配置类" class="headerlink" title="4.1.3 配置类"></a>4.1.3 配置类</h5><p>​队列的创建只有没有这个队列的时候需要编写。以后没有这个queue()方法也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitwqConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.rabbitmq.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/26 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitwqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">protected</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myQueue&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-4-编写测试类"><a href="#4-1-4-编写测试类" class="headerlink" title="4.1.4 编写测试类"></a>4.1.4 编写测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RabbitmqApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * provider</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;myQueue&quot;</span>,<span class="string">&quot;send text312312&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-5-创建consumer"><a href="#4-1-5-创建consumer" class="headerlink" title="4.1.5 创建consumer"></a>4.1.5 创建consumer</h5><p>pom文件，yml文件，config文件与provider相同</p><h5 id="4-1-6-编写监听器"><a href="#4-1-6-编写监听器" class="headerlink" title="4.1.6 编写监听器"></a>4.1.6 编写监听器</h5><p>​注意：</p><p>​类上要有@Componet，项目启动时此类生效。</p><p>​@RabbitListener 监听指定队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rabbitmq.receive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReceiveDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.rabbitmq.receive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/26 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的消息：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的消息22222222：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-fanout交换器"><a href="#4-2-fanout交换器" class="headerlink" title="4.2 fanout交换器"></a>4.2 fanout交换器</h4><p>​扇形交换器，实际上做的事情就是广播，fanout会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个Consumer能收到消息。</p><p>​代码示例</p><p>pom文件、yml文件与direct示例相同</p><h5 id="4-2-1-修改配置类"><a href="#4-2-1-修改配置类" class="headerlink" title="4.2.1 修改配置类"></a>4.2.1 修改配置类</h5><p>在config配置文件内添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">createQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myfanout1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">createQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;myfanout2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">getFanout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;amq.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(Queue createQueue1,FanoutExchange getFanout)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(createQueue1).to(getFanout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding2</span><span class="params">(Queue createQueue2,FanoutExchange getFanout)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(createQueue2).to(getFanout);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-编写发送方法"><a href="#4-2-2-编写发送方法" class="headerlink" title="4.2.2 编写发送方法"></a>4.2.2 编写发送方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">contextLoads2</span><span class="params">()</span> &#123;</span><br><span class="line">       amqpTemplate.convertAndSend(<span class="string">&quot;amq.fanout&quot;</span>,<span class="string">&quot;core&quot;</span>,<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-consumer"><a href="#4-2-3-consumer" class="headerlink" title="4.2.3 consumer"></a>4.2.3 consumer</h4><p>在receiveDemo下添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;myfanout1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;myfanout1:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myfanout2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo4</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;myfanout2:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-topic交换器"><a href="#4-3-topic交换器" class="headerlink" title="4.3 topic交换器"></a>4.3 topic交换器</h4><p>​允许在路由键（RoutingKey）中出现匹配规则。</p><p>​路由键的写法和包写法相同。com.xxxx.xxx格式。</p><p>​在绑定时可以带有下面特殊符号，中间可以出现:</p><p>​* : 代表一个单词（两个.之间内容）</p><p>​# : 0个或多个字符</p><p>​接收方依然是公平调度，同一个队列中内容轮换获取值。</p><p>​示例代码</p><p>pom，yml文件与以上相同</p><h5 id="4-3-1-修改配置类"><a href="#4-3-1-修改配置类" class="headerlink" title="4.3.1 修改配置类"></a>4.3.1 修改配置类</h5><p>在config文件中添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">getTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;amq.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding1</span><span class="params">(Queue topicQueue1,TopicExchange getTopic)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(getTopic).with(<span class="string">&quot;com.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding2</span><span class="params">(Queue topicQueue2,TopicExchange getTopic)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2).to(getTopic).with(<span class="string">&quot;com.#&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-发送消息"><a href="#4-3-2-发送消息" class="headerlink" title="4.3.2 发送消息"></a>4.3.2 发送消息</h5><p>​第二个参数为路由键，匹配配置类中绑定时的路由规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads3</span><span class="params">()</span> &#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;amq.topic&quot;</span>,<span class="string">&quot;com.q.w&quot;</span>,<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-3-Consumer"><a href="#4-3-3-Consumer" class="headerlink" title="4.3.3 Consumer"></a>4.3.3 Consumer</h5><p>​在receiveDemo下添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo5</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;topic1:&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@RabbitListener(queues = &quot;topic2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo6</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;topic2:&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ学习及简单原理简介&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/RabbitMQ/"/>
    
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/tags/RabbitMQ/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ安装</title>
    <link href="https://lyblog2022.github.io/2022/06/25/software/rabbitMq/"/>
    <id>https://lyblog2022.github.io/2022/06/25/software/rabbitMq/</id>
    <published>2022-06-25T05:16:19.000Z</published>
    <updated>2022-06-25T06:13:32.255Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装RabbitMQ</p><span id="more"></span><h4 id="1、Erlang安装"><a href="#1、Erlang安装" class="headerlink" title="1、Erlang安装"></a>1、Erlang安装</h4><p>​RabbitMQ是使用Erlang语言编写的，所以需要先配置Erlang</p><h5 id="1-1-修改主机名"><a href="#1-1-修改主机名" class="headerlink" title="1.1 修改主机名"></a>1.1 修改主机名</h5><p>​RabbitMQ是通过主机名进行访问的，必须指定能访问的主机名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NETWORKING</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">HOSTNAME</span>=<span class="string">ly</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>​新添加了一行，前面为服务器ip，空格后面添加计算机主机名</p><img src="/2022/06/25/software/rabbitMq/mq1.png" class="" title="mq1 image"><h4 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2 安装依赖"></a>1.2 安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel</span><br></pre></td></tr></table></figure><h4 id="1-3-上传并解压"><a href="#1-3-上传并解压" class="headerlink" title="1.3 上传并解压"></a>1.3 上传并解压</h4><p>​上传otp_src_22.0.tar.gz到&#x2F;usr&#x2F;local&#x2F;tmp目录中，进入目录并解压</p><p>​解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar xf otp_src_22.0.tar.gz</span><br></pre></td></tr></table></figure><h4 id="1-4-配置参数"><a href="#1-4-配置参数" class="headerlink" title="1.4 配置参数"></a>1.4 配置参数</h4><p>​先新建&#x2F;usr&#x2F;local&#x2F;erlang文件夹，作为安装文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/erlang</span><br></pre></td></tr></table></figure><p>​进入文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd otp_src_22.0</span><br></pre></td></tr></table></figure><p>​配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac</span><br></pre></td></tr></table></figure><h4 id="1-5-编译并安装"><a href="#1-5-编译并安装" class="headerlink" title="1.5 编译并安装"></a>1.5 编译并安装</h4><p>​编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>​安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="1-6-修改环境变量"><a href="#1-6-修改环境变量" class="headerlink" title="1.6 修改环境变量"></a>1.6 修改环境变量</h4><p>​修改&#x2F;etc&#x2F;profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>​在文件中添加下面代码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:/usr/local/erlang/bin</span></span><br></pre></td></tr></table></figure><p>​运行文件，让修改内容生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="1-7-查看配置是否成功"><a href="#1-7-查看配置是否成功" class="headerlink" title="1.7 查看配置是否成功"></a>1.7 查看配置是否成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -version</span><br></pre></td></tr></table></figure><img src="/2022/06/25/software/rabbitMq/mq2.png" class="" title="mq2 image"><h3 id="2、安装RabbitMQ"><a href="#2、安装RabbitMQ" class="headerlink" title="2、安装RabbitMQ"></a>2、安装RabbitMQ</h3><h4 id="2-1-上传并解压"><a href="#2-1-上传并解压" class="headerlink" title="2.1 上传并解压"></a>2.1 上传并解压</h4><p>​上传rabbitmq-server-generic-unix-3.7.18.tar.xz到&#x2F;usr&#x2F;loca&#x2F;tmp中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz</span><br></pre></td></tr></table></figure><h4 id="2-2-复制到local下"><a href="#2-2-复制到local下" class="headerlink" title="2.2 复制到local下"></a>2.2 复制到local下</h4><p>​复制解压文件到&#x2F;usr&#x2F;local下，命名为rabbitmq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq</span><br></pre></td></tr></table></figure><h4 id="2-3-配置环境变量"><a href="#2-3-配置环境变量" class="headerlink" title="2.3 配置环境变量"></a>2.3 配置环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>​在文件中添加 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:/usr/local/rabbitmq/sbin</span></span><br></pre></td></tr></table></figure><p>​解析文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="2-4-开启web管理插件"><a href="#2-4-开启web管理插件" class="headerlink" title="2.4 开启web管理插件"></a>2.4 开启web管理插件</h4><p>​进入rabbitmq&#x2F;sbin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/rabbitmq/sbin</span><br></pre></td></tr></table></figure><p>​查看插件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p>​生效管理插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><h4 id="2-5-后台运行"><a href="#2-5-后台运行" class="headerlink" title="2.5 后台运行"></a>2.5 后台运行</h4><p>​启动rabbitmq。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>​停止命令，如果无法停止，使用kill -9 进程号进行关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><h4 id="2-6-查看web管理界面"><a href="#2-6-查看web管理界面" class="headerlink" title="2.6 查看web管理界面"></a>2.6 查看web管理界面</h4><p>​默认可以在安装rabbitmq的电脑上通过用户名：guest密码guest进行访问web管理界面</p><p>​端口号：15672（放行端口，或关闭防火墙）</p><p>​在虚拟机浏览器中输入：<a href="http://localhost:15672/#/">http://localhost:15672/#/</a></p><img src="/2022/06/25/software/rabbitMq/mq3.png" class="" title="mq3 image"><h3 id="3、RabbitMq账户管理"><a href="#3、RabbitMq账户管理" class="headerlink" title="3、RabbitMq账户管理"></a>3、RabbitMq账户管理</h3><h4 id="3-1-创建账户"><a href="#3-1-创建账户" class="headerlink" title="3.1 创建账户"></a>3.1 创建账户</h4><p>​语法：.&#x2F;rabbitmqctl add_user username password</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/rabbitmq/sbin</span><br><span class="line">./rabbitmqctl add_user ly qwq</span><br></pre></td></tr></table></figure><h4 id="3-2-给用户授予管理员角色"><a href="#3-2-给用户授予管理员角色" class="headerlink" title="3.2 给用户授予管理员角色"></a>3.2 给用户授予管理员角色</h4><p>​其中ly为新建用户的用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmqctl set_user_tags ly administrator</span><br></pre></td></tr></table></figure><h4 id="3-3-给用户授权"><a href="#3-3-给用户授权" class="headerlink" title="3.3 给用户授权"></a>3.3 给用户授权</h4><p>​“&#x2F;” 表示虚拟机</p><p>​ly 表示用户名</p><p>​“.<em>“ “.</em>“ “.*” 表示完整权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rabbitmqctl set_permissions -p &quot;/&quot; ly &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h4 id="3-4-登录"><a href="#3-4-登录" class="headerlink" title="3.4 登录"></a>3.4 登录</h4><p>​使用新建账户和密码在windows中访问rabbitmq并登录</p><p>​在浏览器地址栏输入：<a href="http://192.168.213.133:15672/#/">http://192.168.213.133:15672/#/</a></p><p>​用户名：ly</p><p>​密码：qwq</p><img src="/2022/06/25/software/rabbitMq/mq4.png" class="" title="mq4 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装RabbitMQ&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/categories/CentOs-8/RabbitMQ/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/CentOs-8/RabbitMQ/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
    <category term="RabbitMQ" scheme="https://lyblog2022.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合redis</title>
    <link href="https://lyblog2022.github.io/2022/06/25/study/redis/redis4/"/>
    <id>https://lyblog2022.github.io/2022/06/25/study/redis/redis4/</id>
    <published>2022-06-25T04:54:39.000Z</published>
    <updated>2022-06-25T08:43:02.144Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot整合SpringDataRedis操作redis</p><span id="more"></span><p>​Spring Data是Spring公司的顶级项目，里面包含了N多个二级子项目，这些子项目都是相对独立的项目。每个子项目是对不同API的封装。</p><p>​所有Spring Boot整合Spring Data xxxx的启动器都叫做spring-boot-starter-data-xxxx</p><p>​Spring Data 好处很方便操作对象类型。</p><p>​把Redis不同值得类型放到一个opsForXXX方法中。</p><ul><li>opsForValue : String值</li><li>opsForList : 列表List</li><li>opsForHash: 哈希表Hash</li><li>opsForZSet: 有序集合Sorted Set</li><li>opsForSet : 集合</li></ul><h4 id="1、SpringBoot整合Redis"><a href="#1、SpringBoot整合Redis" class="headerlink" title="1、SpringBoot整合Redis"></a>1、SpringBoot整合Redis</h4><h5 id="1-1-创建mysql数据库"><a href="#1-1-创建mysql数据库" class="headerlink" title="1.1 创建mysql数据库"></a>1.1 创建mysql数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80029</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : study</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80029</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 25/06/2022 16:23:52</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for product</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `product`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `product`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="1-2-创建-redis配置文件"><a href="#1-2-创建-redis配置文件" class="headerlink" title="1.2 创建 redis配置文件"></a>1.2 创建 redis配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RedisConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 16:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String ,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;String , Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String , Object&gt;();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(Object.class));</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-创建pojo"><a href="#1-3-创建pojo" class="headerlink" title="1.3 创建pojo"></a>1.3 创建pojo</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.pojo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-创建mapper及配置文件"><a href="#1-4-创建mapper及配置文件" class="headerlink" title="1.4 创建mapper及配置文件"></a>1.4 创建mapper及配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pojo.Product&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select id, name, price</span><br><span class="line">        from product</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-创建service接口及实现类"><a href="#1-5-创建service接口及实现类" class="headerlink" title="1.5 创建service接口及实现类"></a>1.5 创建service接口及实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductById</span><span class="params">(Integer id)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductServiceImpl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;product:&quot;</span> +id;</span><br><span class="line">        <span class="comment">//先从redis中获取数据</span></span><br><span class="line">        <span class="keyword">if</span>(redisTemplate.hasKey(key))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行缓存&quot;</span>);</span><br><span class="line">            redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Product&gt;(Product.class));</span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> (Product) redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行mysql&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findProductById(id);</span><br><span class="line">        redisTemplate.opsForValue().set(key, product);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-6-创建控制类"><a href="#1-6-创建控制类" class="headerlink" title="1.6 创建控制类"></a>1.6 创建控制类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> com.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">select</span><span class="params">(Integer id , Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findProductById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;product&quot;</span> , product);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-7-创建启动器"><a href="#1-7-创建启动器" class="headerlink" title="1.7 创建启动器"></a>1.7 创建启动器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductApplication</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/25 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProductApplication.class , args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-创建配置文件"><a href="#1-8-创建配置文件" class="headerlink" title="1.8 创建配置文件"></a>1.8 创建配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/study?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">liuyong</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.133</span><span class="string">:7001,192.168.213.133:7002,192.168.213.133:7003,192.168.213.133:7004,192.168.213.133:7005,192.168.213.133:7006</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/mapper/*.xml</span></span><br></pre></td></tr></table></figure><h5 id="1-9-创建视图"><a href="#1-9-创建视图" class="headerlink" title="1.9 创建视图"></a>1.9 创建视图</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.price&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-10-运行"><a href="#1-10-运行" class="headerlink" title="1.10 运行"></a>1.10 运行</h5><p>​第一次运行</p><img src="/2022/06/25/study/redis/redis4/redis1.png" class="" title="redis1 image"><p>​第二次运行</p><img src="/2022/06/25/study/redis/redis4/redis2.png" class="" title="redis2 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringBoot整合SpringDataRedis操作redis&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="springboot" scheme="https://lyblog2022.github.io/tags/springboot/"/>
    
    <category term="centos8" scheme="https://lyblog2022.github.io/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>redis哨兵及集群</title>
    <link href="https://lyblog2022.github.io/2022/06/23/study/redis/redis3/"/>
    <id>https://lyblog2022.github.io/2022/06/23/study/redis/redis3/</id>
    <published>2022-06-23T12:15:01.000Z</published>
    <updated>2022-06-25T08:42:51.496Z</updated>
    
    <content type="html"><![CDATA[<p>redis哨兵及集群配置及学习</p><span id="more"></span><h3 id="1、哨兵（Sentinel）"><a href="#1、哨兵（Sentinel）" class="headerlink" title="1、哨兵（Sentinel）"></a>1、哨兵（Sentinel）</h3><p>​在redis主从默认是只有主具备写的能力，而从只能读。如果主宕机，整个节点不具备写能力。但是如果这是让一个从变成主，整个节点就可以继续工作。即使之前的主恢复过来也当做这个节点的从即可。</p><p>​Redis的哨兵就是帮助监控整个节点的，当节点主宕机等情况下，帮助重新选取主。</p><p>​Redis中哨兵支持单哨兵和多哨兵。单哨兵是只要这个哨兵发现master宕机了，就直接选取另一个master。而多哨兵是根据我们设定，达到一定数量哨兵认为master宕机后才会进行重新选取主。</p><h4 id="1-1-没有哨兵下主从效果"><a href="#1-1-没有哨兵下主从效果" class="headerlink" title="1.1 没有哨兵下主从效果"></a>1.1 没有哨兵下主从效果</h4><p>​只要杀掉主，整个节点无法在写数据，从身份不会变化，主的信息还是以前的信息。</p><h4 id="1-2-搭建多哨兵"><a href="#1-2-搭建多哨兵" class="headerlink" title="1.2 搭建多哨兵"></a>1.2 搭建多哨兵</h4><p>​前提：安装了单机的redis</p><h5 id="1-2-1-新建目录"><a href="#1-2-1-新建目录" class="headerlink" title="1.2.1 新建目录"></a>1.2.1 新建目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/sentinel</span><br></pre></td></tr></table></figure><h5 id="1-2-2-复制redis"><a href="#1-2-2-复制redis" class="headerlink" title="1.2.2 复制redis"></a>1.2.2 复制redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/local/redis/bin/* /usr/local/sentinel</span><br></pre></td></tr></table></figure><h5 id="1-2-3-复制配置文件"><a href="#1-2-3-复制配置文件" class="headerlink" title="1.2.3 复制配置文件"></a>1.2.3 复制配置文件</h5><p>​从redis解压目录中复制sentinel配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp/redis-5.0.5/</span><br><span class="line">cp sentinel.conf /usr/local/sentinel/</span><br></pre></td></tr></table></figure><h5 id="1-2-4-修改配置文件"><a href="#1-2-4-修改配置文件" class="headerlink" title="1.2.4 修改配置文件"></a>1.2.4 修改配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/sentinel</span><br><span class="line">vim sentinel.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">“/usr/local/sentinel/26379.log”</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.93.10 6379 2</span></span><br></pre></td></tr></table></figure><p>​复制sentinel.conf，命名为sentinel-26380.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp sentinel.conf sentinel-26380.conf</span><br><span class="line">vim sentinel-26380.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26380</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">“/usr/local/sentinel/26380.log”</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.93.10 6379 2</span></span><br></pre></td></tr></table></figure><p>​复制sentinel.conf，命名为sentinel-26381.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp sentinel.conf sentinel-26381.conf</span><br><span class="line">vim sentinel-26381.conf</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">26381</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">“/usr/local/sentinel/26381.log”</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.93.10 6379 2</span></span><br></pre></td></tr></table></figure><h5 id="1-2-5-启动主从"><a href="#1-2-5-启动主从" class="headerlink" title="1.2.5 启动主从"></a>1.2.5 启动主从</h5><p>​如果已经启动状态，忽略下面命令。如果启动部分，全部kill后重新启动。</p><p>​使用kill杀死全部redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><p>​启动redis主从</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis1.png" class="" title="redis1 image"><h5 id="1-2-6-启动三个哨兵"><a href="#1-2-6-启动三个哨兵" class="headerlink" title="1.2.6 启动三个哨兵"></a>1.2.6 启动三个哨兵</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/sentinel</span><br><span class="line">./redis-sentinel sentinel.conf</span><br><span class="line">./redis-sentinel sentinel-26380.conf</span><br><span class="line">./redis-sentinel sentinel-26381.conf</span><br></pre></td></tr></table></figure><h5 id="1-2-7-查看日志"><a href="#1-2-7-查看日志" class="headerlink" title="1.2.7 查看日志"></a>1.2.7 查看日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 26379.log</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis2.png" class="" title="redis2 image"><h6 id="1-2-8-测试宕机"><a href="#1-2-8-测试宕机" class="headerlink" title="1.2.8 测试宕机"></a>1.2.8 测试宕机</h6><p>​查看redis进程号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure><p>​杀死主进程号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure><p>​查看日志，短暂延迟后会发现，出现新的主。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 26379.log</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis3.png" class="" title="redis3 image"><h3 id="2、集群（Cluster）"><a href="#2、集群（Cluster）" class="headerlink" title="2、集群（Cluster）"></a>2、集群（Cluster）</h3><p>​前提：已经安装好redis单机版。</p><p>​当集群中超过或等于1&#x2F;2节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。</p><h4 id="2-1-复制redis配置文件"><a href="#2-1-复制redis配置文件" class="headerlink" title="2.1 复制redis配置文件"></a>2.1 复制redis配置文件</h4><p>​从&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin下把redis.conf复制到当前目录中，命名为redis-7001.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf</span><br></pre></td></tr></table></figure><h4 id="2-2-修改redis-7001-conf"><a href="#2-2-修改redis-7001-conf" class="headerlink" title="2.2 修改redis-7001.conf"></a>2.2 修改redis-7001.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis/bin</span><br><span class="line">vim redis-7001.conf</span><br></pre></td></tr></table></figure><p>​需要修改如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">7001</span></span><br><span class="line"><span class="attr">cluster-enabled</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">cluster-config-file</span> <span class="string">nodes-7001.conf</span></span><br><span class="line"><span class="attr">cluster-node-timeout</span> <span class="string">15000</span></span><br><span class="line"><span class="comment"># appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_7001.pid</span></span><br></pre></td></tr></table></figure><h4 id="2-3-复制配置文件，并修改内容"><a href="#2-3-复制配置文件，并修改内容" class="headerlink" title="2.3 复制配置文件，并修改内容"></a>2.3 复制配置文件，并修改内容</h4><p>​把redis-7001.conf 复制5份，分别叫做redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp redis-7001.conf redis-7002.conf</span><br><span class="line">cp redis-7001.conf redis-7003.conf</span><br><span class="line">cp redis-7001.conf redis-7004.conf</span><br><span class="line">cp redis-7001.conf redis-7005.conf</span><br><span class="line">cp redis-7001.conf redis-7006.conf</span><br></pre></td></tr></table></figure><p>​新复制的5个配置文件都需要需改三处。</p><p>​例如nodes-7002.conf中需要把所有7001都换成7002。</p><p>​可以使用 :%s&#x2F;7001&#x2F;7002&#x2F;g 进行全局修改。 </p><h4 id="2-4-启动6个redis"><a href="#2-4-启动6个redis" class="headerlink" title="2.4 启动6个redis"></a>2.4 启动6个redis</h4><p>​可以使用redis-server结合6个配置文件进行启动6个实例。</p><p>​执行之前一定要先删除dump.rdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f dump.rdb</span><br><span class="line">vim startup.sh</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7001.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7002.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7003.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7004.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7005.conf</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis-7006.conf</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x startup.sh</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis4.png" class="" title="redis4 image"><h4 id="2-5-查看启动状态"><a href="#2-5-查看启动状态" class="headerlink" title="2.5 查看启动状态"></a>2.5 查看启动状态</h4><h4 id="2-6-建立集群"><a href="#2-6-建立集群" class="headerlink" title="2.6 建立集群"></a>2.6 建立集群</h4><p>​在redis3的时候需要借助ruby脚本实现集群。在redis5中可以使用自带的redis-cli实现集群功能，比redis3的时候更加方便了。</p><p>​建议配置静态ip，ip改变集群失效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli --cluster create 192.168.213.133:7001 192.168.213.133:7002 192.168.213.133:7003 192.168.213.133:7004 192.168.213.133:7005 192.168.213.133:7006 --cluster-replicas 1</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis5.png" class="" title="redis5 image"><h4 id="2-7-测试"><a href="#2-7-测试" class="headerlink" title="2.7 测试"></a>2.7 测试</h4><p>​集群测试时，千万不要忘记最后一个-c参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -p 7001 -c</span><br><span class="line">127.0.0.1:7001&gt; set age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; </span><br></pre></td></tr></table></figure><h4 id="2-8-编写关闭脚本"><a href="#2-8-编写关闭脚本" class="headerlink" title="2.8 编写关闭脚本"></a>2.8 编写关闭脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim stop.sh</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7001 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7002 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7003 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7004 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7005 shutdown</span></span><br><span class="line"><span class="attr">./redis-cli</span> <span class="string">-p 7006 shutdown</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x stop.sh</span><br><span class="line">./stop.sh</span><br></pre></td></tr></table></figure><h3 id="3、Jedis"><a href="#3、Jedis" class="headerlink" title="3、Jedis"></a>3、Jedis</h3><p>​Redis给Java语言提供了客户端API，称之为Jedis。</p><p>​Jedis API和Redis 命令几乎是一样的。</p><p>​例如：Redis对String值新增时set命令，Jedis中也是set方法。</p><p>​Jedis API特别简单，基本上都是创建对象调用方法即可。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!--版本号可根据实际情况填写2.9.0--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-单机版"><a href="#3-1-单机版" class="headerlink" title="3.1 单机版"></a>3.1 单机版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.jedis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7001</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;text&quot;</span>,<span class="string">&quot;hello jedis&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis3/redis6.png" class="" title="redis6 image"><h4 id="3-2-带有连接池"><a href="#3-2-带有连接池" class="headerlink" title="3.2 带有连接池"></a>3.2 带有连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PoolDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.jedis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">20</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">3</span>);</span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig,<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7001</span>);</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        jedis.set(<span class="string">&quot;jedisdemo&quot;</span>,<span class="string">&quot;pool1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;jedisdemo&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-集群"><a href="#3-3-集群" class="headerlink" title="3.3 集群"></a>3.3 集群</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClusterDemo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> com.jedis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClusterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;HostAndPort&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7002</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.213.133&quot;</span>,<span class="number">7003</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.93.10&quot;</span>,<span class="number">7004</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.93.10&quot;</span>,<span class="number">7005</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.93.10&quot;</span>,<span class="number">7006</span>));</span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">jedisCluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(set);</span><br><span class="line">        jedisCluster.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bjmsb&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedisCluster.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: <span class="string">&quot;7002@17002&quot;</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Integer.parseInt(Integer.java:<span class="number">580</span>)</span><br><span class="line">at java.lang.Integer.valueOf(Integer.java:<span class="number">766</span>)</span><br><span class="line">at redis.clients.util.ClusterNodeInformationParser.getHostAndPortFromNodeLine(ClusterNodeInformationParser.java:<span class="number">38</span>)</span><br><span class="line">at redis.clients.util.ClusterNodeInformationParser.parse(ClusterNodeInformationParser.java:<span class="number">14</span>)</span><br><span class="line">at redis.clients.jedis.JedisClusterInfoCache.discoverClusterNodesAndSlots(JedisClusterInfoCache.java:<span class="number">43</span>)</span><br><span class="line">at redis.clients.jedis.JedisClusterConnectionHandler.initializeSlotsCache(JedisClusterConnectionHandler.java:<span class="number">52</span>)</span><br><span class="line">at redis.clients.jedis.JedisClusterConnectionHandler.&lt;init&gt;(JedisClusterConnectionHandler.java:<span class="number">37</span>)</span><br><span class="line">at redis.clients.jedis.JedisSlotBasedConnectionHandler.&lt;init&gt;(JedisSlotBasedConnectionHandler.java:<span class="number">16</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">48</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">35</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">27</span>)</span><br><span class="line">at redis.clients.jedis.JedisCluster.&lt;init&gt;(JedisCluster.java:<span class="number">31</span>)</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>将redis依赖调高</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;redis哨兵及集群配置及学习&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="centos8" scheme="https://lyblog2022.github.io/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>redis持久化及主从复制</title>
    <link href="https://lyblog2022.github.io/2022/06/23/study/redis/redis2/"/>
    <id>https://lyblog2022.github.io/2022/06/23/study/redis/redis2/</id>
    <published>2022-06-23T04:46:55.000Z</published>
    <updated>2022-06-25T08:51:00.174Z</updated>
    
    <content type="html"><![CDATA[<p>Redis持久化策略及主从复制</p><span id="more"></span><h4 id="1、Redis持久化策略"><a href="#1、Redis持久化策略" class="headerlink" title="1、Redis持久化策略"></a>1、Redis持久化策略</h4><p>​Redis不仅仅是一个内存型数据库，还具备持久化能力。</p><h4 id="1-1-RDB"><a href="#1-1-RDB" class="headerlink" title="1.1 RDB"></a>1.1 RDB</h4><p>​rdb模式是默认模式，可以在指定的时间间隔内生成数据快照（snapshot），默认保存到dump.rdb文件中。当redis重启后会自动加载dump.rdb文件中内容到内存中。</p><p>​用户可以使用SAVE（同步）或BGSAVE（异步）手动保存数据。</p><p>​可以设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令，可以通过save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行BGSAVE命令。</p><p>​例如：</p><p>​save 900 1<br>　　save 300 10<br>　　save 60 10000</p><p>​那么只要满足以下三个条件中的任意一个，BGSAVE命令就会被执行</p><p>　　服务器在900秒之内，对数据库进行了至少1次修改<br>　　服务器在300秒之内，对数据库进行了至少10次修改<br>　　服务器在60秒之内，对数据库进行了至少10000次修改</p><h5 id="1-1-1-优点"><a href="#1-1-1-优点" class="headerlink" title="1.1.1 优点"></a>1.1.1 优点</h5><ul><li>rdb文件是一个紧凑文件，直接使用rdb文件就可以还原数据。</li><li>数据保存会由一个子进程进行保存，不影响父进程。</li><li>恢复数据的效率要高于aof</li></ul><h5 id="1-1-2-缺点"><a href="#1-1-2-缺点" class="headerlink" title="1.1.2 缺点"></a>1.1.2 缺点</h5><ul><li>每次保存点之间导致redis不可意料的关闭，可能会丢失数据。</li><li>由于每次保存数据都需要fork()子进程，在数据量比较大时可能会比较耗费性能。</li></ul><h4 id="1-2-AOF"><a href="#1-2-AOF" class="headerlink" title="1.2 AOF"></a>1.2 AOF</h4><p>​AOF默认是关闭的，需要在配置文件中开启AOF。Redis支持AOF和RDB同时生效，如果同时存在，AOF优先级高于RDB（Redis重新启动时会使用AOF进行数据恢复）</p><p>​监听执行的命令，如果发现执行了修改数据的操作，同时直接同步到数据库文件中。</p><h5 id="1-2-1-优点"><a href="#1-2-1-优点" class="headerlink" title="1.2.1 优点"></a>1.2.1 优点</h5><p>​相对RDB数据更加安全。</p><h5 id="1-2-2-缺点"><a href="#1-2-2-缺点" class="headerlink" title="1.2.2 缺点"></a>1.2.2 缺点</h5><ul><li>相同数据集AOF要大于RDB。</li><li>相对RDB可能会慢一些。</li></ul><h5 id="1-2-3-开启办法"><a href="#1-2-3-开启办法" class="headerlink" title="1.2.3 开启办法"></a>1.2.3 开启办法</h5><p>​修改redis.conf文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># aof文件名</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、主从复制"><a href="#2、主从复制" class="headerlink" title="2、主从复制"></a>2、主从复制</h3><p>​Redis支持集群功能。为了保证单一节点可用性，redis支持主从复制功能。每个节点有N个复制品（replica），其中一个复制品是主（master），另外N-1个复制品是从（Slave），也就是说Redis支持一主多从。</p><p>​一个主可有多个从，而一个从又可以看成主，它还可以有多个从。</p><img src="/2022/06/23/study/redis/redis2/redis1.png" class="" title="redis1 image"><h4 id="2-1-主从优点"><a href="#2-1-主从优点" class="headerlink" title="2.1 主从优点"></a>2.1 主从优点</h4><ul><li>增加单一节点的健壮性，从而提升整个集群的稳定性。（Redis中当超过1&#x2F;2节点不可用时，整个集群不可用）</li><li>从节点可以对主节点数据备份，提升容灾能力。</li><li>读写分离。在redis主从中，主节点一般用作写（具备读的能力），从节点只能读，利用这个特性实现读写分离，写用主，读用从。</li></ul><h4 id="2-2-一主多从搭建"><a href="#2-2-一主多从搭建" class="headerlink" title="2.2 一主多从搭建"></a>2.2 一主多从搭建</h4><p>​在已经搭建的单机版redis基础上进行操作。</p><p>​并且关闭redis单机版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure><h5 id="2-2-1-新建目录"><a href="#2-2-1-新建目录" class="headerlink" title="2.2.1 新建目录"></a>2.2.1 新建目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/replica</span><br></pre></td></tr></table></figure><h5 id="2-2-2-复制目录"><a href="#2-2-2-复制目录" class="headerlink" title="2.2.2 复制目录"></a>2.2.2 复制目录</h5><p>把之前安装的redis单机版中bin目录复制三份，分别叫做：master、slave1、slave2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r /usr/local/redis/bin /usr/local/replica/master</span><br><span class="line">cp -r /usr/local/redis/bin /usr/local/replica/slave1</span><br><span class="line">cp -r /usr/local/redis/bin /usr/local/replica/slave2</span><br></pre></td></tr></table></figure><h5 id="2-2-3-修改从的配置文件"><a href="#2-2-3-修改从的配置文件" class="headerlink" title="2.2.3 修改从的配置文件"></a>2.2.3 修改从的配置文件</h5><p>​修改2个从的redis.conf，指定主节点ip和端口。并修改自身端口号防止和其他redis冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/replica/slave1/redis.conf</span><br></pre></td></tr></table></figure><p>​指定主节点ip和端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicaof</span> <span class="string">192.168.93.10 6379</span></span><br></pre></td></tr></table></figure><p>​修改自己端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6380</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/replica/slave2/redis.conf</span><br></pre></td></tr></table></figure><p>​指定主节点ip和端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">replicaof</span> <span class="string">192.168.93.10 6379</span></span><br></pre></td></tr></table></figure><p>​修改自己端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">6381</span></span><br></pre></td></tr></table></figure><h5 id="2-2-4-启动三个redis实例"><a href="#2-2-4-启动三个redis实例" class="headerlink" title="2.2.4 启动三个redis实例"></a>2.2.4 启动三个redis实例</h5><p>​注意：一定要关闭单机的redis，否则端口冲突。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica</span><br><span class="line">vim startup.sh</span><br></pre></td></tr></table></figure><p>​在文件中添加下面内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/usr/local/replica/master/</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis.conf</span></span><br><span class="line">  <span class="attr">cd</span> <span class="string">/usr/local/replica/slave1</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis.conf</span></span><br><span class="line">  <span class="attr">cd</span> <span class="string">/usr/local/replica/slave2</span></span><br><span class="line"><span class="attr">./redis-server</span> <span class="string">redis.conf</span></span><br></pre></td></tr></table></figure><p>​赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x startup.sh</span><br></pre></td></tr></table></figure><p>​开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis2.png" class="" title="redis2 image"><h5 id="2-2-5-查看启动状态"><a href="#2-2-5-查看启动状态" class="headerlink" title="2.2.5 查看启动状态"></a>2.2.5 查看启动状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis3.png" class="" title="redis3 image"><h5 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6 测试"></a>2.2.6 测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica/master/</span><br><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis4.png" class="" title="redis4 image"><p>在客户端命令行模式下，添加一条数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set demo1 &quot;ly&quot;</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis5.png" class="" title="redis5 image"><p>进去slave查看数据是否同步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/replica/slave1</span><br><span class="line">./redis-cli -p 6380</span><br></pre></td></tr></table></figure><img src="/2022/06/23/study/redis/redis2/redis6.png" class="" title="redis6 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis持久化策略及主从复制&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="centos8" scheme="https://lyblog2022.github.io/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>redis初步使用</title>
    <link href="https://lyblog2022.github.io/2022/06/22/study/redis/redis1/"/>
    <id>https://lyblog2022.github.io/2022/06/22/study/redis/redis1/</id>
    <published>2022-06-22T05:13:45.000Z</published>
    <updated>2022-06-25T08:40:46.054Z</updated>
    
    <content type="html"><![CDATA[<p>Redis初步学习及使用</p><span id="more"></span><h3 id="1、Redis简介"><a href="#1、Redis简介" class="headerlink" title="1、Redis简介"></a>1、Redis简介</h3><h4 id="1-1-NoSQL简介"><a href="#1-1-NoSQL简介" class="headerlink" title="1.1 NoSQL简介"></a>1.1 NoSQL简介</h4><p>​目前市场主流数据存储都是使用关系型数据库。每次操作关系型数据库时都是I&#x2F;O操作，I&#x2F;O操作是主要影响程序执行性能原因之一，连接数据库关闭数据库都是消耗性能的过程。尽量减少对数据库的操作，能够明显的提升程序运行效率。</p><p>​针对上面的问题，市场上就出现了各种NoSQL(Not Only SQL,不仅仅可以使用关系型数据库)数据库，它们的宣传口号：不是什么样的场景都必须使用关系型数据库，一些特定的场景使用NoSQL数据库更好。</p><p>​常见NoSQL数据库：</p><ul><li>memcached ：键值对，内存型数据库，所有数据都在内存中。</li><li>Redis：和Memcached类似，还具备持久化能力。</li><li>HBase：以列作为存储。</li><li>MongoDB：以Document做存储。</li></ul><h4 id="1-2-Redis简介"><a href="#1-2-Redis简介" class="headerlink" title="1.2 Redis简介"></a>1.2 Redis简介</h4><ul><li>Redis是以Key-Value形式进行存储的NoSQL数据库。</li><li>Redis是使用C语言进行编写的。</li><li>平时操作的数据都在内存中，效率特高，读的效率110000&#x2F;s，写81000&#x2F;s，所以多把Redis当做缓存工具使用。</li><li>Redis以solt（槽）作为数据存储单元，每个槽中可以存储N多个键值对。Redis中固定具有16384。理论上可以实现一个槽是一个Redis。每个向Redis存储数据的key都会进行crc16算法得出一个值后对16384取余就是这个key存放的solt位置。</li><li>同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</li></ul><h3 id="2、常用的五大类型"><a href="#2、常用的五大类型" class="headerlink" title="2、常用的五大类型"></a>2、常用的五大类型</h3><p>​Redis不仅仅支持简单的k&#x2F;v类型的数据，同时还提供list，set，zset，hash等数据结构的存储，它还支持数据的备份，即master-slave模式的数据备份，同样Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p><p>​Redis支持的五大数据类型包括String（字符串  用法： 键  值），Hash（哈希 类似Java中的 map  用法： 键  键值对），List（列表  用法：键 集合 不可以重复），Set（集合 用法：键 集合 可以重复），Zset（sorted set 有序集合    用法： 键  值 值）</p><h4 id="2-1-String（字符串）"><a href="#2-1-String（字符串）" class="headerlink" title="2.1 String（字符串）"></a>2.1 String（字符串）</h4><ul><li>string 是 redis 最基本的类型</li><li>可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value</li><li>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据</li><li>是 Redis 最基本的数据类型</li><li>最大能存储 512MB。</li><li>应用场景<ul><li>String是最常用的一种数据类型，普通的key&#x2F;value存储都可以归为此类，value其实不仅是String， 也可以是数字：比如想知道什么时候封锁一个IP地址(访问超过几次)。</li></ul></li></ul><h4 id="2-2-Hash（哈希）"><a href="#2-2-Hash（哈希）" class="headerlink" title="2.2 Hash（哈希）"></a>2.2 Hash（哈希）</h4><ul><li><p>Redis hash 是一个键值(key&#x3D;&gt;value)对集合。</p></li><li><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p></li><li><p>使用场景：</p><ul><li>存储、读取、修改用户属性</li><li>如我们要存储一个用户信息对象数据，包含以下信息：    用户ID，为查找的key，存储的value用户对象包含姓名name，年龄age，生日birthday 等信息，  如果用普通的key&#x2F;value结构来存储，主要有以下2种存储方式：  <ul><li>第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，<ul><li>如：set u001 “李三,18,20010101”  </li><li>这种方式的缺点是，增加了序列化&#x2F;反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。</li></ul></li><li>第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，  <ul><li>​如：mset user:001:name “李三 “user:001:age18 user:001:birthday “20010101” </li><li>虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。</li></ul></li></ul></li><li>Redis提供的Hash很好的解决了这个问题。</li></ul></li></ul><h4 id="2-3-List（列表）"><a href="#2-3-List（列表）" class="headerlink" title="2.3 List（列表）"></a>2.3 List（列表）</h4><ul><li><p>Redis 列表是简单的字符串列表，按照插入顺序排序</p></li><li><p>可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p></li><li><p>应用场景：</p><ul><li>Redis list的应用场景非常多，也是Redis最重要的数据结构之一。</li><li>Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。</li></ul></li></ul><h4 id="2-4-Set（集合）"><a href="#2-4-Set（集合）" class="headerlink" title="2.4 Set（集合）"></a>2.4 Set（集合）</h4><ul><li>Redis的Set是string类型的无序集合</li><li>使用场景<ul><li>共同好友、二度好友 </li><li>利用唯一性，可以统计访问网站的所有独立 IP</li></ul></li><li>与list区别：Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。 比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。  </li><li>Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实  </li><li>set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</li></ul><h4 id="2-5-zset-sorted-set：有序集合"><a href="#2-5-zset-sorted-set：有序集合" class="headerlink" title="2.5 zset(sorted set：有序集合)"></a>2.5 zset(sorted set：有序集合)</h4><ul><li><p>与set区别及联系：Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p></li><li><p>使用场景</p><ul><li>带有权重的元素，比如一个游戏的用户得分排行榜 </li><li>比较复杂的数据结构，一般用到的场景不算太多</li></ul></li></ul><h3 id="3、常用命令"><a href="#3、常用命令" class="headerlink" title="3、常用命令"></a>3、常用命令</h3><p><a href="https://www.redis.net.cn/order/">Redis命令手册</a></p><p><a href="http://doc.redisfans.com/">Redis命令参考</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis初步学习及使用&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/redis/"/>
    
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>redis单机版安装</title>
    <link href="https://lyblog2022.github.io/2022/06/22/software/redis/"/>
    <id>https://lyblog2022.github.io/2022/06/22/software/redis/</id>
    <published>2022-06-22T03:16:38.000Z</published>
    <updated>2022-06-22T03:32:31.869Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS8安装Redis单机版</p><span id="more"></span><h4 id="1、安装C语言依赖环境"><a href="#1、安装C语言依赖环境" class="headerlink" title="1、安装C语言依赖环境"></a>1、安装C语言依赖环境</h4><p>​redis使用C语言编写，所以需要安装C语言库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++ automake autoconf libtool make tcl </span><br></pre></td></tr></table></figure><h4 id="2、上传并解压"><a href="#2、上传并解压" class="headerlink" title="2、上传并解压"></a>2、上传并解压</h4><p>​把<code>redis-5.0.5.tar.gz</code>上传到<code>/usr/local/tmp</code>中</p><p>​解压文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar zxf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure><h4 id="3、编译并安装"><a href="#3、编译并安装" class="headerlink" title="3、编译并安装"></a>3、编译并安装</h4><p>​进入解压文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp/redis-5.0.5/</span><br></pre></td></tr></table></figure><p>​编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>​安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><h4 id="4、开启守护进程"><a href="#4、开启守护进程" class="headerlink" title="4、开启守护进程"></a>4、开启守护进程</h4><p>复制<code>/usr/local/tmp/redis-5.0.5/</code>中<code>redis.conf</code>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /usr/local/redis/bin/</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis/bin/</span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>把<code>daemonize</code>的值由<code>no</code>修改为<code>yes</code></p><img src="/2022/06/22/software/redis/redis1.png" class="" title="redis1 image"><h4 id="5、修改外部访问"><a href="#5、修改外部访问" class="headerlink" title="5、修改外部访问"></a>5、修改外部访问</h4><p>在redis5中需要修改配置文件redis.conf允许外部访问。需要修改两处。</p><p>注释掉<code>bind 127.0.0.1</code></p><img src="/2022/06/22/software/redis/redis2.png" class="" title="redis2 image"><p><code>protected-mode</code> <code>yes</code> 改成 <code>no</code></p><img src="/2022/06/22/software/redis/redis3.png" class="" title="redis3 image"><h4 id="6、启动并测试"><a href="#6、启动并测试" class="headerlink" title="6、启动并测试"></a>6、启动并测试</h4><h5 id="6-1-启动redis"><a href="#6-1-启动redis" class="headerlink" title="6.1 启动redis"></a>6.1 启动redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure><img src="/2022/06/22/software/redis/redis4.png" class="" title="redis4 image"><h5 id="6-2-启动客户端工具"><a href="#6-2-启动客户端工具" class="headerlink" title="6.2 启动客户端工具"></a>6.2 启动客户端工具</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><img src="/2022/06/22/software/redis/redis5.png" class="" title="redis5 image"><h5 id="6-3-关闭redis"><a href="#6-3-关闭redis" class="headerlink" title="6.3 关闭redis"></a>6.3 关闭redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure><img src="/2022/06/22/software/redis/redis6.png" class="" title="redis6 image">]]></content>
    
    
    <summary type="html">&lt;p&gt;CentOS8安装Redis单机版&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="software" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/redis/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
    <category term="redis" scheme="https://lyblog2022.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>nginx初步学习</title>
    <link href="https://lyblog2022.github.io/2022/06/21/study/nginx/nginx1/"/>
    <id>https://lyblog2022.github.io/2022/06/21/study/nginx/nginx1/</id>
    <published>2022-06-21T13:44:31.000Z</published>
    <updated>2022-06-25T08:49:37.745Z</updated>
    
    <content type="html"><![CDATA[<p>nginx简介及常用命令</p><span id="more"></span><h3 id="1、nginx简介"><a href="#1、nginx简介" class="headerlink" title="1、nginx简介"></a>1、nginx简介</h3><p>​Nginx是一个高性能的Web服务器和反向代理的软件</p><p>​Web服务器：就是运行我们web服务的容器，提供web功能，还有tomcat也提供类似的功能。</p><p>​代理是软件架构和网络设计中，非常重要的一个概念。有两种代理：正向代理和反向代理。</p><h4 id="1-1-正向代理"><a href="#1-1-正向代理" class="headerlink" title="1.1 正向代理"></a>1.1 正向代理</h4><p>​用户端设置代理服务器。</p><p>​所有的请求都由代理服务器发出，无法判断代理了多少用户端，叫正向代理</p><h4 id="1-2-反向代理"><a href="#1-2-反向代理" class="headerlink" title="1.2 反向代理"></a>1.2 反向代理</h4><p>​和正向代理相反：在服务端设置代理，所有请求，由服务端接受，然后再由代理服务器发到后方的服务器。</p><p>​这么一来，所有请求，都由一个服务器接收，无法判断代理了多少服务端。这就是反向代 理。 </p><p>​利用反向代理，就可以将请求分发到系统内部的多个节点上，从而减少每个节点的并发数。</p><p>​而这些节点在外界看来，就是一个系统，表现出唯一的ip，也就是代理服务器的IP。 </p><h4 id="1-3-发展历程"><a href="#1-3-发展历程" class="headerlink" title="1.3 发展历程"></a>1.3 发展历程</h4><p>​最初是由一个俄罗斯人（Igor Sysoev：伊戈尔 塞索耶夫）开发的。</p><p>​Nginx的第一个版本发布于 2004年，因其系统资源消耗低、运行稳定，且具有高性能的并发处理能力等特性，Nginx在互联网 企业中得到广泛应用。</p><p>​Nginx是互联网上最受欢迎的开源Web服务器之一，Netcraft公司2019年7月 的统计数据表明，Nginx为全球最繁忙网站中的25.42%提供了服务或代理。得益于近几年云计算和 微服务的快速发展，Nginx因在其中发挥了自身优势而得到广泛应用，且有望在未来占有更多的市场 份额。 </p><p>​2019年3月，著名硬件负载均衡厂商F5宣布收购Nginx，Nginx成为F5的一部分。</p><h3 id="2、nginx启动及验证"><a href="#2、nginx启动及验证" class="headerlink" title="2、nginx启动及验证"></a>2、nginx启动及验证</h3><h4 id="2-1-找到命令目录"><a href="#2-1-找到命令目录" class="headerlink" title="2.1 找到命令目录"></a>2.1 找到命令目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# pwd</span><br><span class="line">/usr/local/nginx/sbin</span><br></pre></td></tr></table></figure><h4 id="2-2-启动"><a href="#2-2-启动" class="headerlink" title="2.2 启动"></a>2.2 启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx</span><br><span class="line">ngx_http_fastdfs_set pid=13620</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13621       1  0 10:01 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root       13622   13621  0 10:01 ?        00:00:00 nginx: worker process</span><br><span class="line">root       13628    3146  0 10:01 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="2-3-启动验证"><a href="#2-3-启动验证" class="headerlink" title="2.3 启动验证"></a>2.3 启动验证</h4><img src="/2022/06/21/study/nginx/nginx1/nginx2.png" class="" title="nginx2 image"><p>本机访问：<a href="http://192.168.213.133:8888/">Welcome to nginx!</a></p><img src="/2022/06/21/study/nginx/nginx1/nginx3.png" class="" title="nginx3 image"><h4 id="2-4-关闭"><a href="#2-4-关闭" class="headerlink" title="2.4 关闭"></a>2.4 关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s quit</span><br><span class="line">ngx_http_fastdfs_set pid=13727</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13729    3146  0 10:07 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h3 id="3、nginx常用命令"><a href="#3、nginx常用命令" class="headerlink" title="3、nginx常用命令"></a>3、nginx常用命令</h3><h4 id="3-1-查看版本号"><a href="#3-1-查看版本号" class="headerlink" title="3.1 查看版本号"></a>3.1 查看版本号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/1.16.1</span><br></pre></td></tr></table></figure><h4 id="3-2-关闭nginx"><a href="#3-2-关闭nginx" class="headerlink" title="3.2 关闭nginx"></a>3.2 关闭nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s quit</span><br><span class="line">[root@192 sbin]# ./nginx -s stop</span><br><span class="line">ngx_http_fastdfs_set pid=13727</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13729    3146  0 10:07 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-3-启动Nginx命令"><a href="#3-3-启动Nginx命令" class="headerlink" title="3.3 启动Nginx命令"></a>3.3 启动Nginx命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx</span><br><span class="line">ngx_http_fastdfs_set pid=13620</span><br><span class="line">[root@192 sbin]# ps -ef | grep nginx</span><br><span class="line">root       13621       1  0 10:01 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">root       13622   13621  0 10:01 ?        00:00:00 nginx: worker process</span><br><span class="line">root       13628    3146  0 10:01 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><h4 id="3-4-重新加载配置文件"><a href="#3-4-重新加载配置文件" class="headerlink" title="3.4 重新加载配置文件"></a>3.4 重新加载配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 sbin]# ./nginx -s reload</span><br><span class="line">ngx_http_fastdfs_set pid=13917</span><br></pre></td></tr></table></figure><h3 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h3><p>找到nginx配置文件：&#x2F;etc&#x2F;nginx</p><p>指令种类：</p><ul><li>简单指令：</li><li>块指令：</li></ul><p>全局块：就是最开始的简单指令。从配置文件开始到events</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span> <span class="string">nginx;</span></span><br><span class="line"><span class="attr">worker_processes</span> <span class="string">auto;</span></span><br><span class="line"><span class="attr">error_log</span> <span class="string">/var/log/nginx/error.log notice;</span></span><br><span class="line"><span class="attr">pid</span> <span class="string">/var/run/nginx.pid;</span></span><br></pre></td></tr></table></figure><p>events块：配置服务器和用户网络连接相关的参数。</p><p>http块：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span> <span class="string">&#123;</span></span><br><span class="line"> <span class="attr">include</span> <span class="string">/etc/nginx/mime.types;</span></span><br><span class="line"> <span class="attr">default_type</span> <span class="string">application/octet-stream;</span></span><br><span class="line"> <span class="attr">log_format</span> <span class="string">main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line"> <span class="attr">&#x27;$status</span> <span class="string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line"> <span class="attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="string">&quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"> <span class="attr">access_log</span> <span class="string">/var/log/nginx/access.log main;</span></span><br><span class="line"> <span class="attr">sendfile</span> <span class="string">on;</span></span><br><span class="line"><span class="comment"> #tcp_nopush on;</span></span><br><span class="line"> <span class="attr">keepalive_timeout</span> <span class="string">65;</span></span><br><span class="line"><span class="comment"> #gzip on;</span></span><br><span class="line"> <span class="attr">include</span> <span class="string">/etc/nginx/conf.d/*.conf;</span></span><br><span class="line"><span class="comment"> # server块可以是 多个</span></span><br><span class="line"> <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line"> <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line"><span class="comment"> # server_name 127.0.0.1;</span></span><br><span class="line"> <span class="attr">server_name</span> <span class="string">www.cpf.com;</span></span><br><span class="line"><span class="comment"> # location 块可以是 多 个</span></span><br><span class="line"> <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line"> <span class="attr">proxy_pass</span> <span class="string">http://127.0.0.1:8080;</span></span><br><span class="line"> <span class="attr">&#125;</span></span><br><span class="line"> <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;nginx简介及常用命令&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/%E5%AD%A6%E4%B9%A0/nginx/"/>
    
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
    <category term="学习" scheme="https://lyblog2022.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>高并发场景下的 httpClient 优化使用</title>
    <link href="https://lyblog2022.github.io/2022/06/21/summary/High-concurrency/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84httpClient%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/"/>
    <id>https://lyblog2022.github.io/2022/06/21/summary/High-concurrency/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84httpClient%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-21T01:59:25.000Z</published>
    <updated>2022-06-21T13:36:39.706Z</updated>
    
    <content type="html"><![CDATA[<p>高并发场景下的 httpClient 优化使用，参考自：<a href="https://blog.csdn.net/u010285974/article/details/85696239">仰望星空的尘埃</a></p><span id="more"></span><h4 id="1、HttpClient优化思路"><a href="#1、HttpClient优化思路" class="headerlink" title="1、HttpClient优化思路"></a>1、<code>HttpClient</code>优化思路</h4><ol><li>池化</li><li>长链接</li><li><code>httpclient</code>和<code>httpget</code>复用</li><li>合理的配置参数（最大并发请求数、各种超时时间、重试次数）</li><li>异步</li><li>源码</li></ol><h4 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h4><p>​原始的使用比较简单，即每次请求时初始化一个<code>httpclient</code>，生成一个<code>httppost</code>对象，执行，然后从返回结果中取出<code>entity</code>，保存成一个字符串，最后显示关闭<code>response</code>和<code>client</code></p><h5 id="2-1-httpclient反复创建开销"><a href="#2-1-httpclient反复创建开销" class="headerlink" title="2.1 httpclient反复创建开销"></a>2.1 <code>httpclient</code>反复创建开销</h5><p>​<code>httpclient</code>是一个线程安全的类，没有必要由每个线程在每次使用时创建，全局保留一个即可</p><h5 id="2-2-反复创建tcp连接的开销"><a href="#2-2-反复创建tcp连接的开销" class="headerlink" title="2.2 反复创建tcp连接的开销"></a>2.2 反复创建<code>tcp</code>连接的开销</h5><p>​<code>tcp</code>的三次握手四次挥手两大过程，对于高频词的请求来说，消耗过大，如果每次请求需要花费5ms用于协商过程，那么对于<code>qps</code>为100的单系统，1秒钟就要花费500ms用于握手和挥手，<code>so</code>改成<code>keep alive</code>的方式实现连接复用</p><h4 id="2-3-重复缓存entity的开销"><a href="#2-3-重复缓存entity的开销" class="headerlink" title="2.3 重复缓存entity的开销"></a>2.3 重复缓存<code>entity</code>的开销</h4><p>​一般情况下，使用了以下的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resultString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>​这里相当于额外复制了一份<code>content</code>到一个字符串内，而原本的<code>httpResponse</code>仍然保留了一份<code>content</code>，需要被<code>consume</code>掉，在高并发且<code>content</code>非常大的情况下，会消耗大量内存，并且需要显示的关闭链接</p><h4 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h4><p>按照上面的分析，主要完成三件事：</p><ul><li>单例的<code>client</code></li><li>缓存的保持链接</li><li>更好的处理返回结果</li></ul><p>提到连接缓存，很容易想到数据库连接池。<code>httpclient4</code>提供了一个<code>PoolngHttpClientConnectionManager</code>作为连接池。通过以下步骤进行优化</p><h5 id="3-1-定义一个keep-alive-strategy"><a href="#3-1-定义一个keep-alive-strategy" class="headerlink" title="3.1 定义一个keep alive strategy"></a>3.1 定义一个<code>keep alive strategy</code></h5><p>​是否使用<code>keep-alive</code>要根据业务情况来定，其并不是灵丹妙药，而且<code>keep-alive</code>和<code>time_wait/close_wait</code>之间也有不少故事</p><p>​在本业务场景下，相当于有少数固定的客户端，长时间高频次的访问服务器，启用<code>keep-alive</code>非常合适</p><p>​【注意】 <code>http</code>的<code>keep-alive</code>与<code>tcp</code>的<code>KEEPALIVE</code>不是一个东西</p><p>定义一个<code>strategy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConnectionKeepAliveStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionKeepAliveStrategy</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getKeepAliveDuration</span><span class="params">(HttpResponse response, HttpContext context)</span> &#123;</span><br><span class="line">        <span class="type">HeaderElementIterator</span> <span class="variable">iterator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicHeaderElementIterator</span>(response.headerIterator(HTTP.CONN_KEEP_ALIVE));</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">HeaderElement</span> <span class="variable">element</span> <span class="operator">=</span> iterator.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> element.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> element.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; param.equalsIgnoreCase(<span class="string">&quot;timeout&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Long.parseLong(value) * <span class="number">1000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认时长为60s</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="3-2-配置一个PoolingHttpClientConnectionManager"><a href="#3-2-配置一个PoolingHttpClientConnectionManager" class="headerlink" title="3.2 配置一个PoolingHttpClientConnectionManager"></a>3.2 配置一个<code>PoolingHttpClientConnectionManager</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PoolingHttpClientConnectionManager</span> <span class="variable">connectionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line">connectionManager.setMaxTotal(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//默认每个路由最高50并发，也可以针对每个路由设置并发数。</span></span><br><span class="line">connectionManager.setDefaultMaxPerRoute(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><h5 id="3-3-生成httpclient"><a href="#3-3-生成httpclient" class="headerlink" title="3.3 生成httpclient"></a>3.3 生成<code>httpclient</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpClientBuilder</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom();</span><br><span class="line">httpClient.setConnectionManager(connectionManager);</span><br><span class="line">httpClient.setKeepAliveStrategy(strategy);</span><br><span class="line">httpClient.setDefaultRequestConfig(RequestConfig.custom().setStaleConnectionCheckEnabled(<span class="literal">true</span>).build());</span><br></pre></td></tr></table></figure><p>【注意】：使用<code>setStaleConnectionCheckEnabled</code>方法来逐出已被关闭的链接不被推荐。更好的方式是手动启用一个线程，定时运行<code>closeExpiredConnections </code>和<code>closeIdleConnections</code>方法，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IdleConnectionMonitorThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpClientConnectionManager manager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> shutdown;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IdleConnectionMonitorThread</span><span class="params">(HttpClientConnectionManager manager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.manager = manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!shutdown)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                    wait(<span class="number">5000</span>);</span><br><span class="line">                    manager.closeExpiredConnections();</span><br><span class="line">                    manager.closeIdleConnections(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        shutdown = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-使用httpclient执行method时降低开销"><a href="#3-4-使用httpclient执行method时降低开销" class="headerlink" title="3.4 使用httpclient执行method时降低开销"></a>3.4 使用<code>httpclient</code>执行<code>method</code>时降低开销</h5><p>这里要注意的是，不要关闭<code>connection</code>。</p><p>一种可行的获取内容的方式类似于，把<code>entity</code>里的东西复制一份：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">EntityUtils.consume(response1.getEntity());</span><br></pre></td></tr></table></figure><p>但是，更推荐的方式是定义一个<code>ResponseHandler</code>，其相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(<span class="keyword">final</span> HttpHost target, <span class="keyword">final</span> HttpRequest request,</span></span><br><span class="line"><span class="params">           <span class="keyword">final</span> ResponseHandler&lt;? extends T&gt; responseHandler, <span class="keyword">final</span> HttpContext context)</span></span><br><span class="line">           <span class="keyword">throws</span> IOException, ClientProtocolException &#123;</span><br><span class="line">       Args.notNull(responseHandler, <span class="string">&quot;Response handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> execute(target, request, context);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> T result;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           result = responseHandler.handleResponse(response);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception t) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               EntityUtils.consume(entity);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception t2) &#123;</span><br><span class="line">               <span class="comment">// Log this exception. The original exception is more</span></span><br><span class="line">               <span class="comment">// important and will be thrown to the caller.</span></span><br><span class="line">               <span class="built_in">this</span>.log.warn(<span class="string">&quot;Error consuming content after an exception.&quot;</span>, t2);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (t <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">               <span class="keyword">throw</span> (IOException) t;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(t);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Handling the response was successful. Ensure that the content has</span></span><br><span class="line">       <span class="comment">// been fully consumed.</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       EntityUtils.consume(entity);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​可以看到，如果我们使用<code>resultHandler</code>执行<code>execute</code>方法，会最终自动调用<code>consume</code>方法，而这个<code>consume</code>方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">(<span class="keyword">final</span> HttpEntity entity)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="keyword">if</span> (entity == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (entity.isStreaming()) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">instream</span> <span class="operator">=</span> entity.getContent();</span><br><span class="line">           <span class="keyword">if</span> (instream != <span class="literal">null</span>) &#123;</span><br><span class="line">               instream.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​可以看到最终它关闭了输入流。</p><h4 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h4><p>​通过以上步骤，基本就完成了一个支持高并发的<code>httpclient</code>的写法，下面是一些额外的配置和提醒：</p><h5 id="4-1-httpclient的一些超时配置"><a href="#4-1-httpclient的一些超时配置" class="headerlink" title="4.1 httpclient的一些超时配置"></a>4.1 <code>httpclient</code>的一些超时配置</h5><p>​<code>CONNECTION_TIMEOUT</code>是连接超时时间，<code>SO_TIMEOUT</code>是<code>socket</code>超时时间，这两者是不同的。连接超时时间是发起请求前的等待时间；<code>socket</code>超时时间是等待数据的超时时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicHttpParams</span>();</span><br><span class="line"><span class="comment">//设置连接超时时间</span></span><br><span class="line"><span class="comment">//设置请求超时2秒钟 根据业务调整</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">CONNECTION_TIMEOUT</span> <span class="operator">=</span> <span class="number">2</span> * <span class="number">1000</span>; </span><br><span class="line"><span class="comment">//设置等待数据超时时间2秒钟 根据业务调整</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">SO_TIMEOUT</span> <span class="operator">=</span> <span class="number">2</span> * <span class="number">1000</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义了当从ClientConnectionManager中检索ManagedClientConnection实例时使用的毫秒级的超时时间</span></span><br><span class="line"><span class="comment">//这个参数期望得到一个java.lang.Long类型的值。如果这个参数没有被设置，默认等于CONNECTION_TIMEOUT，因此一定要设置。</span></span><br><span class="line"><span class="comment">//在httpclient4.2.3中我记得它被改成了一个对象导致直接用long会报错，后来又改回来了</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">CONN_MANAGER_TIMEOUT</span> <span class="operator">=</span> <span class="number">500L</span>; </span><br><span class="line"> </span><br><span class="line">params.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, CONNECTION_TIMEOUT);</span><br><span class="line">params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT, SO_TIMEOUT);</span><br><span class="line">params.setLongParameter(ClientPNames.CONN_MANAGER_TIMEOUT, CONN_MANAGER_TIMEOUT);</span><br><span class="line"><span class="comment">//在提交请求之前 测试连接是否可用</span></span><br><span class="line">params.setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//另外设置http client的重试次数，默认是3次；当前是禁用掉（如果项目量不到，这个默认即可）</span></span><br><span class="line">httpClient.setHttpRequestRetryHandler(<span class="keyword">new</span> <span class="title class_">DefaultHttpRequestRetryHandler</span>(<span class="number">0</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><h5 id="4-2-如果配置了nginx的话，nginx也要设置面向两端的keep-alive"><a href="#4-2-如果配置了nginx的话，nginx也要设置面向两端的keep-alive" class="headerlink" title="4.2 如果配置了nginx的话，nginx也要设置面向两端的keep-alive"></a>4.2 如果配置了<code>nginx</code>的话，<code>nginx</code>也要设置面向两端的<code>keep-alive</code></h5><p>​现在的业务里，没有<code>nginx</code>的情况反而比较稀少。<code>nginx</code>默认和<code>client</code>端打开长连接而和<code>server</code>端使用短链接。注意<code>client</code>端的<code>keepalive_timeout</code>和<code>keepalive_requests</code>参数，以及<code>upstream</code>端的<code>keepalive</code>参数设置</p><p>​依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Basic认证</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CredentialsProvider</span> <span class="variable">credsProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCredentialsProvider</span>();</span><br><span class="line"><span class="comment">//httpClient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CloseableHttpClient httpclient;</span><br><span class="line"><span class="comment">//httpGet方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpGet httpget;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestConfig reqestConfig;</span><br><span class="line"><span class="comment">//响应处理器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResponseHandler&lt;String&gt; responseHandler;</span><br><span class="line"><span class="comment">//jackson解析工具</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;http.maxConnections&quot;</span>,<span class="string">&quot;50&quot;</span>);</span><br><span class="line">    System.setProperty(<span class="string">&quot;http.keepAlive&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="comment">//设置basic校验</span></span><br><span class="line">    credsProvider.setCredentials(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AuthScope</span>(AuthScope.ANY_HOST, AuthScope.ANY_PORT, AuthScope.ANY_REALM),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="comment">//创建http客户端</span></span><br><span class="line">    httpclient = HttpClients.custom()</span><br><span class="line">            .useSystemProperties()</span><br><span class="line">            .setRetryHandler(<span class="keyword">new</span> <span class="title class_">DefaultHttpRequestRetryHandler</span>(<span class="number">3</span>,<span class="literal">true</span>))</span><br><span class="line">            .setDefaultCredentialsProvider(credsProvider)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//初始化httpGet</span></span><br><span class="line">    httpget = <span class="keyword">new</span> <span class="title class_">HttpGet</span>();</span><br><span class="line">    <span class="comment">//初始化HTTP请求配置</span></span><br><span class="line">    reqestConfig = RequestConfig.custom()</span><br><span class="line">            .setContentCompressionEnabled(<span class="literal">true</span>)</span><br><span class="line">            .setSocketTimeout(<span class="number">100</span>)</span><br><span class="line">            .setAuthenticationEnabled(<span class="literal">true</span>)</span><br><span class="line">            .setConnectionRequestTimeout(<span class="number">100</span>)</span><br><span class="line">            .setConnectTimeout(<span class="number">100</span>).build();</span><br><span class="line">    httpget.setConfig(reqestConfig);</span><br><span class="line">    <span class="comment">//初始化response解析器</span></span><br><span class="line">    responseHandler = <span class="keyword">new</span> <span class="title class_">BasicResponseHandler</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：返回响应</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2019/1/3 上午11:19</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return org.apache.http.client.methods.CloseableHttpResponse</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getResponse</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">    <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(get,responseHandler);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：发送http请求，并用net.sf.json工具解析</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2018/8/15 下午2:21</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return org.json.JSONObject</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">getUrl</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpget.setURI(URI.create(url));</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget,responseHandler);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.fromObject(response);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：发送http请求，并用jackson工具解析</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2018/12/24 下午2:58</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return com.fasterxml.jackson.databind.JsonNode</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JsonNode <span class="title function_">getUrl2</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpget.setURI(URI.create(url));</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget,responseHandler);</span><br><span class="line">        <span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> mapper.readTree(response);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：发送http请求，并用fastjson工具解析</span></span><br><span class="line"><span class="comment"> * @author zhangdaquan</span></span><br><span class="line"><span class="comment"> * @date 2018/12/24 下午2:58</span></span><br><span class="line"><span class="comment"> * @param [url]</span></span><br><span class="line"><span class="comment"> * @return com.fasterxml.jackson.databind.JsonNode</span></span><br><span class="line"><span class="comment"> * @exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> com.alibaba.fastjson.JSONObject <span class="title function_">getUrl3</span><span class="params">(String url)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpget.setURI(URI.create(url));</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget,responseHandler);</span><br><span class="line">        com.alibaba.fastjson.<span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> com.alibaba.fastjson.JSONObject.parseObject(response);</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;高并发场景下的 httpClient 优化使用，参考自：&lt;a href=&quot;https://blog.csdn.net/u010285974/article/details/85696239&quot;&gt;仰望星空的尘埃&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="那些代码那些总结" scheme="https://lyblog2022.github.io/categories/%E9%82%A3%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%82%A3%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    
    <category term="高并发" scheme="https://lyblog2022.github.io/categories/%E9%82%A3%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%82%A3%E4%BA%9B%E6%80%BB%E7%BB%93/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="httpClient" scheme="https://lyblog2022.github.io/tags/httpClient/"/>
    
    <category term="那些代码那些总结" scheme="https://lyblog2022.github.io/tags/%E9%82%A3%E4%BA%9B%E4%BB%A3%E7%A0%81%E9%82%A3%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    
    <category term="接口调用" scheme="https://lyblog2022.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    
    <category term="高并发" scheme="https://lyblog2022.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>nginx安装</title>
    <link href="https://lyblog2022.github.io/2022/06/20/software/nginx/"/>
    <id>https://lyblog2022.github.io/2022/06/20/software/nginx/</id>
    <published>2022-06-20T08:31:29.000Z</published>
    <updated>2022-06-21T14:41:07.003Z</updated>
    
    <content type="html"><![CDATA[<p>centos8安装nginx</p><span id="more"></span><h4 id="1、上传并安装fastdfs-nginx-module"><a href="#1、上传并安装fastdfs-nginx-module" class="headerlink" title="1、上传并安装fastdfs-nginx-module"></a>1、上传并安装fastdfs-nginx-module</h4><p>​上传  &#x2F;fastdfs-nginx-model_v1.16.tar.gz  到 &#x2F;usr&#x2F;local&#x2F;tmp 中</p><p>​进入 tmp 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br></pre></td></tr></table></figure><p>​解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h4><p>​进入解压目录中src目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​编辑config文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure><p>​修改配置文件中第四行，把路径中local去掉。参数是用于配置安装nginx中的FastDFS组件的时候，在什么位置查找FastDFS核心代码。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CORE_INCS</span>=<span class="string">&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3、安装nginx的依赖"><a href="#3、安装nginx的依赖" class="headerlink" title="3、安装nginx的依赖"></a>3、安装nginx的依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="4、上传Nginx-并解压"><a href="#4、上传Nginx-并解压" class="headerlink" title="4、上传Nginx 并解压"></a>4、上传Nginx 并解压</h4><p>​上传nginx-1.16.1.tar.gz 到&#x2F;usr&#x2F;local&#x2F;tmp中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tmp</span><br><span class="line">tar zxf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure><h4 id="5、修改Nginx配置"><a href="#5、修改Nginx配置" class="headerlink" title="5、修改Nginx配置"></a>5、修改Nginx配置</h4><h5 id="5-1-进入到Nginx文件夹"><a href="#5-1-进入到Nginx文件夹" class="headerlink" title="5.1 进入到Nginx文件夹"></a>5.1 进入到Nginx文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.16.1</span><br></pre></td></tr></table></figure><h5 id="5-2-创建临时目录"><a href="#5-2-创建临时目录" class="headerlink" title="5.2 创建临时目录"></a>5.2 创建临时目录</h5><p>​修改配置文件中好多位置都使用了&#x2F;var&#x2F;temp&#x2F;nginx目录，但是默认不会自动创建这个目录，需要手动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/temp/nginx</span><br></pre></td></tr></table></figure><h5 id="5-3-修改配置文件参数"><a href="#5-3-修改配置文件参数" class="headerlink" title="5.3 修改配置文件参数"></a>5.3 修改配置文件参数</h5><p>内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--add-module=/usr/local/tmp/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​–add-module 必须定义，此配置信息是用于指定安装Nginx时需要加载的模块，如果未指定，Nginx安装过程不会加载fastdfs-nginx-module模块，后续功能无法实现。</p><p>【报错：执行文件无权限】</p><p>先执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x configure</span><br></pre></td></tr></table></figure><p>​再继续执行后续代码</p><h4 id="6、编译并安装"><a href="#6、编译并安装" class="headerlink" title="6、编译并安装"></a>6、编译并安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="7、配置fastdfs-nginx-module模块配置文件"><a href="#7、配置fastdfs-nginx-module模块配置文件" class="headerlink" title="7、配置fastdfs-nginx-module模块配置文件"></a>7、配置fastdfs-nginx-module模块配置文件</h4><p>​复制配置文件fastdfs-nginx-module&#x2F;src&#x2F;mod_fastdfs.conf 到 &#x2F;etc&#x2F;fdfs目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/tmp/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure><h4 id="8、修改-mod-fastdfs-conf"><a href="#8、修改-mod-fastdfs-conf" class="headerlink" title="8、修改 mod_fastdfs.conf"></a>8、修改 mod_fastdfs.conf</h4><h5 id="8-1-进入到-x2F-etc-x2F-fdfs"><a href="#8-1-进入到-x2F-etc-x2F-fdfs" class="headerlink" title="8.1 进入到 &#x2F;etc&#x2F;fdfs"></a>8.1 进入到 &#x2F;etc&#x2F;fdfs</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br></pre></td></tr></table></figure><h5 id="8-2-编辑配置文件"><a href="#8-2-编辑配置文件" class="headerlink" title="8.2 编辑配置文件"></a>8.2 编辑配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mod_fastdfs.conf</span><br></pre></td></tr></table></figure><h5 id="8-3-文件内容修改"><a href="#8-3-文件内容修改" class="headerlink" title="8.3 文件内容修改"></a>8.3 文件内容修改</h5><p>​需要修改文件中四处内容， 这四处内容的含义：</p><p>​connect_timeout&#x3D;2 #连接超时时间，单位秒</p><p>​tracker_server&#x3D;tracker:22122 #tracker 服务结点</p><p>​url_have_group_name&#x3D;false #URL是否包含group名称</p><p>​store_path0&#x3D;&#x2F;home&#x2F;yuqing&#x2F;fastdfs #storage服务结点的存储位置，与配置storage结点一致</p><p>​修改为以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=10</span><br><span class="line">tracker_server=192.168.93.10:22122</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/usr/local/fastdfs/storage/store</span><br></pre></td></tr></table></figure><h4 id="9、提供FastDFS需要的HTTP配置文件"><a href="#9、提供FastDFS需要的HTTP配置文件" class="headerlink" title="9、提供FastDFS需要的HTTP配置文件"></a>9、提供FastDFS需要的HTTP配置文件</h4><p>​复制FastDFS安装包中的两个配置文件(http.conf 和 mine.types) 到 &#x2F;etc&#x2F;fdfs目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/tmp/FastDFS/conf/http.conf /etc/fdfs/</span><br><span class="line">cp /usr/local/tmp/FastDFS/conf/mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><h4 id="10、创建网络访问存储服务的软连接"><a href="#10、创建网络访问存储服务的软连接" class="headerlink" title="10、创建网络访问存储服务的软连接"></a>10、创建网络访问存储服务的软连接</h4><p>​在上传文件到FastDFS后，FastDFS会返回group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;xxxxxxxxx.xxx其中group1是卷名，在mod_fastdfs.conf配置文件中已配置了url_have_group_name， 以保证URL解析正确。其中的M00是FastDFS保存数据时使用的虚拟目录， 需要将这个虚拟目录定位到真实数据目录上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/fastdfs/storage/store/data/ /usr/local/fastdfs/storage/store/data/M00</span><br></pre></td></tr></table></figure><h4 id="11、修改nginx配置文件"><a href="#11、修改nginx配置文件" class="headerlink" title="11、修改nginx配置文件"></a>11、修改nginx配置文件</h4><h5 id="11-1-进入到安装后-nginx目录"><a href="#11-1-进入到安装后-nginx目录" class="headerlink" title="11.1 进入到安装后 nginx目录"></a>11.1 进入到安装后 nginx目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br></pre></td></tr></table></figure><h5 id="11-2-编辑配置文件"><a href="#11-2-编辑配置文件" class="headerlink" title="11.2 编辑配置文件"></a>11.2 编辑配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><h6 id="11-2-1-修改1"><a href="#11-2-1-修改1" class="headerlink" title="11.2.1 修改1"></a>11.2.1 修改1</h6><p>​user root； #Nginx需要访问linux文件系统，必须有文件系统的权限。User root代表nginx文件系统的权限是root用户权限。如果不开启权限，可能有404反问错误。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">user</span>  <span class="string">root;</span></span><br><span class="line"><span class="attr">worker_processes</span>  <span class="string">1;</span></span><br></pre></td></tr></table></figure><h5 id="11-2-2-修改2"><a href="#11-2-2-修改2" class="headerlink" title="11.2.2 修改2"></a>11.2.2 修改2</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server&#123;</span></span><br><span class="line">  <span class="attr">listen</span> <span class="string">8888; #storage 配置中， 有http.server_port=8888的配置信息，必须一致。配置文件是 /etc/fdfs/storaged.conf</span></span><br><span class="line">  <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line">  <span class="attr">location</span> <span class="string">~/group([0-9])/M00&#123;</span></span><br><span class="line">      <span class="attr">ngx_fastdfs_module;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="12、启动nginx"><a href="#12、启动nginx" class="headerlink" title="12、启动nginx"></a>12、启动nginx</h4><p>进入到nginx安装目录的sbin文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/ </span><br></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>关闭nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;centos8安装nginx&lt;/p&gt;</summary>
    
    
    
    <category term="CentOs 8" scheme="https://lyblog2022.github.io/categories/CentOs-8/"/>
    
    <category term="software" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/categories/CentOs-8/software/nginx/"/>
    
    
    <category term="software" scheme="https://lyblog2022.github.io/tags/software/"/>
    
    <category term="CentOS 8" scheme="https://lyblog2022.github.io/tags/CentOS-8/"/>
    
    <category term="nginx" scheme="https://lyblog2022.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
