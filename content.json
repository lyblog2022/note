[{"title":"CentOS8安装MySQL环境","date":"2022-10-05T04:42:47.000Z","path":"2022/10/05/study/database/CentOS8安装MySQL环境/","text":"CentOS8安装MySQL环境，使用数据库软件远程链接，并配置主从连接 1、删除环境自带MySQL使用yml命令删除已经安装的MySQL 1yum remove -y mysql 使用find命令找到残留文件 1find / -name mysql 使用rm -rf命令删除残留文件 123rm -rf /var/lib/selinux/targeted/active/modules/100/mysqlrm -rf /usr/share/bash-completion/completions/mysqlrm -rf /usr/share/selinux/targeted/default/active/modules/100/mysql 2、安装执行以下命令 12wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpmyum install mysql80-community-release-el8-1.noarch.rpm 查看mysql数据源是否安装成功 1yum repolist enabled | grep &quot;mysql.*-community.*&quot; ​ 执行以下命令安装mysql 1yum install mysql-community-server --nogpgcheck 如果出现No match for argument: mysql-community-server可执行 yum module disable mysql命令 1yum module disable mysql // 禁用命令 3、启动启动mysql 1service mysqld start 报错： ​ 正确启动命令： 12/bin/systemctl start mysqld.serviceservice mysqld status ​ 4、登录并修改密码4.1 显示随机密码执行以下命令： 1grep &#x27;temporary password&#x27; /var/log/mysqld.log ​ 方框中的密码即为生成的随机密码 4.2 登录执行以下命令 1mysql -u root -p ​ 4.3 修改密码【注意】密码先修改成”Root_2022”，因为我们随便修改密码时,一般都不满足它的策略，会报错误: ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 【解决方案】一定要先修改默认密码为: Root_2022 满足它的策略,再进行下面的操作: 12345678910111213141516171819202122232425mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Root_2022&#x27;;Query OK, 0 rows affected (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password.check_user_name | ON || validate_password.dictionary_file | || validate_password.length | 8 || validate_password.mixed_case_count | 1 || validate_password.number_count | 1 || validate_password.policy | MEDIUM || validate_password.special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.02 sec)mysql&gt; set global validate_password.length=1;Query OK, 0 rows affected (0.01 sec)mysql&gt; set global validate_password.policy=0; Query OK, 0 rows affected (0.00 sec)mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;your password&#x27;;Query OK, 0 rows affected (0.01 sec) 5、开放远程访问创建权限记录 1create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;; 授权 1grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option; 关闭系统防火墙 1systemctl status firewall; //查看防火墙状态 ​ systemctl stop firewalld.service （关闭防火墙） systemctl start firewalld.service （开启防火墙） systemctl disable firewalld.service （禁止防火墙自启动） systemctl enable firewalld.service （防火墙随系统开启启动） 使用navicat远程连接mysql ​ 6、配置主从现有两台服务器 192.168.213.164 和 192.168.213.165，在这两台服务器之间搭建一主一从MySQL，配置164位主，165为从 6.1 主数据库修改修改&#x2F;etc&#x2F;my.cnf ​ server-id值要唯一不能与从数据库重复； log-bin 设置为 mysql-bin； 关闭164的MySQL服务 1netstat -lnpt | grep mysql ​ 使用kill命令关闭 1kill -9 33830 再次启动mysql 6.2 从数据库修改修改&#x2F;etc&#x2F;my.cnf ​ server-id值要唯一不能与主数据库重复； log-bin 设置为 mysql-bin； 关闭165的MySQL服务 ​ 再次启动mysql 6.3 查看主服务器的状态1234567mysql&gt; show master status;+------------------+----------+--------------+------------------+-------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 | 157 | | | |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.01 sec) 6.4 从服务器执行1change master to master_host=&#x27;192.168.213.164&#x27;, master_port=3306, master_user=&#x27;root&#x27;, master_password=&#x27;password&#x27;, master_log_file=&#x27;mysql-bin.000001&#x27;, master_log_pos=157; master_host 为主服务器的地址 master_port 为MySQL端口号。 master_user 为主服务器的用户名。 master_password 为用户密码。 master_log_file 为主数据库中File处的值。 master_log_pos 为主数据库中Position处的值。 6.5 测试主：创建test的数据库 ​ 刷新从数据库： ​ 6.6 解除主从关闭主从： 12mysql&gt; start slave;Query OK, 0 rows affected (0.01 sec) 重置： 12mysql&gt; reset slave all;Query OK, 0 rows affected (0.02 sec) 显示主从状态： 12mysql&gt; show slave status;Empty set","tags":[{"name":"数据库","slug":"数据库","permalink":"https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"CentOS8","slug":"CentOS8","permalink":"https://lyblog2022.github.io/tags/CentOS8/"}]},{"title":"使用post方式调用接口并传递参数","date":"2022-05-18T13:06:35.000Z","path":"2022/05/18/summary/20220518/使用post方式调用接口并传递参数/","text":"使用post方式调用接口并传递参数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package com.summary;import java.nio.charset.Charset;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;import org.apache.http.HttpEntity;import org.apache.http.NameValuePair;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;import com.alibaba.fastjson.JSONObject;public class Summary &#123; /** * 发送post请求 * @param url：请求URL * @param headerParamsJson：请求header参数 * @param paramJson：请求参数 * @return */ public JSONObject sendData(String url, JSONObject headerParamsJson, JSONObject paramJson) &#123; JSONObject resultJson = new JSONObject(); // 发送post请求 try &#123; HttpPost httppost = new HttpPost(url); RequestConfig defaultRequestConfig = RequestConfig.custom().setConnectTimeout(5000) .setConnectionRequestTimeout(5000).setSocketTimeout(15000).build(); httppost.setConfig(defaultRequestConfig); StringEntity entity = new StringEntity(paramJson.toJSONString(), &quot;utf-8&quot;);// 解决中文乱码问题 entity.setContentEncoding(&quot;UTF-8&quot;); entity.setContentType(&quot;text/json&quot;); httppost.setEntity(entity); httppost.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;); // 添加header参数 Iterator headerParamsIterator = headerParamsJson.entrySet().iterator(); while (headerParamsIterator.hasNext()) &#123; Map.Entry entry = (Map.Entry) headerParamsIterator.next(); httppost.setHeader(entry.getKey().toString(), entry.getValue().toString()); &#125; // 装填参数 List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;(); if (paramJson != null) &#123; Iterator iterator = paramJson.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry entry = (Map.Entry) iterator.next(); nvps.add(new BasicNameValuePair((String) entry.getKey(), (String) entry.getValue())); &#125; &#125; UrlEncodedFormEntity reqEntity = new UrlEncodedFormEntity(nvps, &quot;utf-8&quot;); httppost.setEntity(reqEntity); // 执行post请求. CloseableHttpClient httpclient = HttpClients.createDefault(); CloseableHttpResponse response1 = httpclient.execute(httppost); String resultText = &quot;&quot;; try &#123; int statusCode = response1.getStatusLine().getStatusCode(); if (statusCode != 200) &#123; throw new RuntimeException(&quot;请求失败&quot;); &#125; else &#123; // 响应实体 HttpEntity entity2 = response1.getEntity(); if (entity2 != null) &#123; // 响应内容 resultText = EntityUtils.toString(entity2, Charset.forName(&quot;UTF-8&quot;)); resultJson = JSONObject.parseObject(resultText); &#125; &#125; resultJson.put(&quot;code&quot;, statusCode); &#125; finally &#123; response1.close(); &#125; &#125; catch (Exception e) &#123; resultJson.put(&quot;code&quot;, &quot;410&quot;); resultJson.put(&quot;err&quot;, e.toString()); &#125; return resultJson; &#125;&#125;","tags":[{"name":"httpClient","slug":"httpClient","permalink":"https://lyblog2022.github.io/tags/httpClient/"},{"name":"接口调用","slug":"接口调用","permalink":"https://lyblog2022.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"}]}]