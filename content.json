[{"title":"MyCat安装","date":"2022-10-24T09:01:24.000Z","path":"2022/10/24/study/framework/mycat/mycat安装/","text":"CentOS8 安装 MyCat 1、安装JDKCentOS8配置JDK 2、安装MyCat2.1 下载MyCat从官网下载需要的安装包，并且上传到具体的虚拟机中 下载地址为：http://dl.mycat.org.cn/ 解压文件到&#x2F;usr&#x2F;local文件夹下 配置环境变量 1vim /etc/profile 添加以下配置信息： 12export MYCAT_HOME=/usr/local/mycatexport PATH=$MYCAT_HOME/bin:$PATH:$JAVA_HOME/bin 当执行到这步的时候，其实就可以启动了，但是为了能正确显示出效果，最好修改下mycat的具体配置，让我们能够正常进行访问。 2.2 配置MyCat进入到&#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf目录下，修改该文件夹下的配置文件 1、修改server.xml 1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); - you may not use this file except in compliance with the License. - You may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 - - Unless required by applicable law or agreed to in writing, software - distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the License for the specific language governing permissions and - limitations under the License. --&gt;&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;&lt;mycat:server xmlns:mycat=&quot;http://io.mycat/&quot;&gt; &lt;user name=&quot;root&quot; defaultAccount=&quot;true&quot;&gt; &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;defaultSchema&quot;&gt;TESTDB&lt;/property&gt; &lt;/user&gt;&lt;/mycat:server&gt; 2、修改schema.xml 123456789101112131415&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt; &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;host1&quot; database=&quot;msb&quot; /&gt; &lt;dataHost name=&quot;host1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.213.164:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;readHost host=&quot;hostS1&quot; url=&quot;192.168.213.165:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;&lt;/readHost&gt; &lt;/writeHost&gt; &lt;/dataHost&gt;&lt;/mycat:schema&gt; 2.3 启动MyCat​ MyCat的启动有两种方式，一种是控制台启动，一种是后台启动，在初学的时候建议使用控制台启动的方式，当配置文件写错之后，可以方便的看到错误，及时修改，但是在生产环境中，使用后台启动的方式比较稳妥。 控制台启动：去mycat&#x2F;bin目录下执行 .&#x2F;mycat console 后台启动：去mycat&#x2F;bin目录下执行 .&#x2F;mycat start 2.4 登录验证 管理窗口的登录 从另外的虚拟机去登录访问当前mycat，输入如下命令即可 1mysql -uroot -p123456 -P 9066 -h 192.168.213.168 ​ 数据窗口的登录 从另外的虚拟机去登录访问mycat，输入命令如下： 1mysql -uroot -p123456 -P8066 -h 192.168.213.168 当都能够成功的时候以为着mycat已经搭建完成。 2.5 报错启动报错 ​ 提示 .&#x2F;wrapper-linux-x86-64 (Found but not executable.)、.&#x2F;wrapper-linux-x86-32 (Found but not executable.) 这两个文件不可执行 解决方案 12# 给权限chmod 755 ./wrapper-linux-x86-64 ./wrapper-linux-x86-32","tags":[{"name":"软件安装","slug":"软件安装","permalink":"https://lyblog2022.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"MyCat","slug":"MyCat","permalink":"https://lyblog2022.github.io/tags/MyCat/"},{"name":"framework","slug":"framework","permalink":"https://lyblog2022.github.io/tags/framework/"}]},{"title":"MyCat数据切分及配置文件介绍","date":"2022-10-09T05:55:55.000Z","path":"2022/10/09/study/framework/mycat/mycat数据切分及配置文件介绍/","text":"MyCat数据切分及配置文件介绍 1、数据切分​ 数据切分指的是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库上面，以达到分散单台设备负载的效果。 ​ 数据的切分根据其切分规则的类型，可以分为两种切分模式。一种是按照不同的表来切分到不同的数据库之上，这种切可以称之为数据的垂直切分或者纵向切分，另外一种则是根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库上面，这种切分称之为数据的水平切分或者横向切分。 ​ 垂直切分的最大特点就是 规则简单，实施也更为方便，尤其适合各业务之间的耦合度非常低，相互影响很小，业务逻辑非常清晰的系统。在这种系统中，可以很容易做到将不同业务模块所使用的表分拆到不同的数据库中。根据不同的表来进行拆分，对应用程序的影响也很小，拆分规则也会比较简单清晰。 ​ 水平切分与垂直切分相比，相对来说稍微复杂一些。因为要将同一个表中的不同数据拆分到不同的数据库中，对于应用程序来说，拆分规则本身就较根据表明来拆分更为复杂，后期的数据维护也会更为复杂一些。 1.1 垂直切分​ 一个数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者压力分担到不同的库上面。 ​ ​ 如上图，一个系统被切分成了用户系统、订单交易、支付系统等多个库 ​ 一个架构设计较好的应用系统，其总体功能肯定是又多个功能模块所组成的。而每一个功能模块所需要的数据对应到数据库中就是一个或者多个表。而在架构设计中，各个功能模块相关质检的交互点越统一越少，系统的耦合度就越低，系统各个模块的维护性以及扩展性也就越好。这样的系统，实现数据的垂直切分也就越容易。 ​ 但是往往系统中有些表难以做到完全的独立，存在着跨库join的情况，对于这类的表，就需要去做平衡，是数据让步业务，共用一个数据源还是分成多个库，业务之间通过接口来做调用。在系统初期，数据量比较少，或者资源有限的情况下，会选择共用数据源，但是当数据发展到一定规模，负载很大的情况下就必须要做分割。 ​ 一般来讲业务存在着复杂join的场景是难以切分的，往往业务独立的易于切分。如何切分，切分到何种程度是考验技术架构的一个难题。下面来分析下垂直切分的优缺点： 优点： 拆分后业务清晰，拆分规则明确 系统之间整合或扩展容易 数据维护简单 缺点： 部分业务表无法实现join，只能通过接口方式解决，提高了系统复杂度 受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高 事务处理复杂 1.2 水平切分​ 相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库中，每个表中包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行切分，就是将表中的某些行切分到一个数据库，而另外的某些行又切分到其他的数据库中， ​ ​ 拆分数据就需要定义分片规则。关系型数据库是行列的二维模型，拆分的第一原则是找到拆分维度。比如从会员的角度来分析，商户订单交易类系统中查询会员某天某月某个订单，那么就需要按照会员结合日期来拆分，不同的数据按照会员id做分组，这样所有的数据查询join都会在单库内解决；如果从商户的角度来讲，要查询某个商家某天所有的订单数，就需要按照商户id做拆分；但是如果系统既想按照会员拆分，又想按照商家数据拆分，就会有一定的困难，需要综合考虑找到合适的分片。 几种典型的分片规则包括： 按照用户id取模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中； 按照日期，将不同月甚至日的数据分散到不同的库中； 按照某个特定的字段求模，或者根据特定范围段分散到不同的库中。 如图，切分原则都是根据业务找到适合的切分规则分散到不同的库，下图是用用户id求模的案例： ​ 数据做完了水平拆分之后也是有优缺点的。 优点： 拆分规则抽象好，join操作基本可以数据库做； 不存在单库大数据，高并发的性能瓶颈； 应用端改造较少； 提高了系统的稳定性跟负载能力 缺点： 拆分规则难以抽象 分片事务一致性难以解决 数据多次扩展跟维护量极大 跨库join性能较差 1.3 总结垂直切分和水平切分共同的缺点： 引入了分布式事务的问题 跨节点join的问题 跨节点合并排序分页的问题 多数据源管理的问题 针对数据源管理，目前主要有两种思路： 客户端模式，在每个应用程序模块中配置管理自己需要的一个或多个数据源，直接访问各个数据库，在模块内完成数据的整合 通过中间代理层来统一管理所有的数据源，后端数据库集群对前端应用程序透明； ​ 在实际的生产环境中，我们都会选择第二种方案来解决问题，尤其是系统不断变得庞大复杂的时候，其实这是非常正确的，虽然短期内付出的成本可能会比较大，但是对整个系统的扩展性来说，是非常有帮助的。 ​ mycat通过数据切分解决传统数据库的缺陷，又有了nosql易于扩展的优点。通过中间代理层规避了多数据源的数据问题，对应用完全透明，同时对数据切分后存在的问题，也做了解决方案。 ​ mycat在做数据切分的时候应该尽可能的遵循以下原则，当然这也是经验之谈，最终的落地实现还是要看具体的应用场景在做具体的分析 第一原则：能不切分尽量不要切分 第二原则：如果要切分一定要选择合适的切分规则，提前规划好 第三原则：数据切分尽量通过数据冗余或表分组来降低跨库join的可能 第四原则：由于数据库中间件对数据join实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表join。 2、MyCat配置文件2.1 schema.xml文件schema.xml作为mycat中重要地配置文件之一，管理着mycat的逻辑库、表、分片规则、DataNode以及DataSource。 2.1.1 schema标签1&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;&gt;&lt;/schema&gt; schema标签用于定义mycat实例中的逻辑库，mycat可以有多个逻辑库，每个逻辑库都有自己相关的配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schame，那么所有的表配置都将属于同一个默认的逻辑库。 dataNode：该属性用于绑定逻辑库到某个具体的database上。 checkSQLschema：当该值为true时，如果执行select * from TESTDB.user，那么mycat会将语句修改为select * from user,即把表示schema的字符去掉，避免发送到后端数据库执行时报错。 sqlMaxLimit：当该值设置为某个数值的时候，每次执行的sql语句，如果没有加上limit语句，mycat也会自动加上对应的值。例如，当设置值为100的时候，那么select * from user的效果跟执行select * from user limit 100相同。如果不设置该值的话，mycat默认会把所有的数据信息都查询出来，造成过多的输出，所以，还是建议设置一个具体的值，以减少过多的数据返回。当然sql语句中可以显式的制定limit的大小，不受该属性的约束。 2.1.2 table标签1&lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; &gt;&lt;/table&gt; table标签定义了mycat中的逻辑表，所有需要拆分的表都需要在这个标签中定义。 name：定义逻辑表的表名，这个名字就如同创建表的时候指定的表名一样，同个schema标签中定义的名字必须唯一。 dataNode：定义这个逻辑表所属的dataNode，该属性的值需要和dataNode标签中的name属性值对应，如果需要定义的dn过多，可以使用如下方法减少配置： 123&lt;table name=&quot;travelrecord&quot; dataNode=&quot;multipleDn$0-99,multipleDn2$100-199&quot; rule=&quot;auto-shardinglong&quot; &gt;&lt;/table&gt;&lt;dataNode name=&quot;multipleDn$0-99&quot; dataHost=&quot;localhost1&quot; database=&quot;db$0-99&quot; &gt;&lt;/dataNode&gt;&lt;dataNode name=&quot;multipleDn2$100-199&quot; dataHost=&quot;localhost1&quot; database=&quot; db$100-199&quot; &gt;&lt;/dataNode&gt; rule：该属性用于指定逻辑表要使用的规则名字，规则名字在rule.xml中定义，必须与tableRule标签中的name属性值一一对应 ruleRequired：该属性用于指定表是否绑定分片规则，如果配置为true，但没有配置具体rule的话，程序会报错。 primaryKey：该逻辑表对应真实表的主键，例如：分片的规则是使用非主键进行分片的，那么在使用主键查询的时候，就会发送查询语句到所有配置的DN上，如果使用改属性配置真实表的主键。那么mycat会缓存主键与具体DN的信息，那么再次使用非主键进行查询的时候就不会进行广播式的查询，就会直接发送语句到具体的DN，但是尽管配置改属性，如果缓存没有命中的话，还是会发送语句给具体的DN来获得数据 type：该属性定义了逻辑表的类型，目前逻辑表只有全局表和普通表两种类型。对应的配置： 全局表：global 普通表：不指定该值为global的所有表 autoIncrement：mysql 对非自增长主键，使用 last_insert_id()是不会返回结果的，只会返回 0。所以，只有定义了自增长主键的表才可以用 last_insert_id()返回主键值。mycat 目前提供了自增长主键功能，但是如果对应的 mysql 节点上数据表，没有定义 auto_increment，那么在 mycat 层调用 last_insert_id()也是不会返回结果的。由于 insert 操作的时候没有带入分片键， mycat 会先取下这个表对应的全局序列，然后赋值给分片键。 这样才能正常的插入到数据库中，最后使用 last_insert_id()才会返回插入的分片键值。如果要使用这个功能最好配合使用数据库模式的全局序列。使用 autoIncrement&#x3D;“true” 指定这个表有使用自增长主键，这样 mycat 才会不抛出分片键找不到的异常。使用 autoIncrement&#x3D;“false” 来禁用这个功能，当然你也可以直接删除掉这个属性。默认就是禁用的。 needAddLimit：指定表是否需要自动的在每个语句后面加上limit限制。由于使用了分库分表，数据量有时会特别巨大。这时候执行查询语句，如果恰巧又忘记了加上数量限制的话，那么查询所有的数据出来，就会执行很久的时间，所以mycat自动为我们加上了limit 100。当前如果语句中又limit，那么就不会添加了。 2.1.3 childTable标签childTable标签用于定义ER分片的子表。通过标签上的属性与父表进行关联。 name：定义子表的表名 joinKey：插入子表的时候会使用这个列的值查找父表存储的数据节点 parentKey：属性指定的值一般为与父表建立关联关系的列名。程序首先获取joinkey的值，再通过parentKey属性指定的列名产生查询语句，通过执行该语句得到父表存储再哪个分片上，从而确定子表存储的位置。 primaryKey：跟table标签所描述相同 needAddLimit：跟table标签所描述相同 2.1.4 dataNode标签1&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;lch3307&quot; database=&quot;db1&quot; &gt;&lt;/dataNode&gt; dataNode标签定义了mycat中的数据节点，也就是我们通常说的数据分片，一个dataNode标签就是一个独立的数据分片。 name：定义数据节点的名字，这个名字需要是唯一的，我们需要再table标签上应用这个名字，来建立表与分片对应的关系 dataHost：该属性用于定义该分片属于哪个数据库实例，属性值是引用dataHost标签上定义的name属性。 database：该属性用于定义该分片属性哪个具体数据库实力上的具体库 2.1.5 dataHost标签​ 该标签定义了具体的数据库实例、读写分离配置和心跳语句 123456789101112&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;&lt;!-- can have multi write hosts --&gt;&lt;writeHost host=&quot;hostM1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot;password=&quot;123456&quot;&gt;&lt;!-- can have multi read hosts --&gt;&lt;!-- &lt;readHost host=&quot;hostS1&quot; url=&quot;localhost:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;&lt;/writeHost&gt;&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;&lt;/dataHost&gt; name：唯一标识dataHost标签，供上层的标签使用 maxcon：指定每个读写实例连接池的最大连接 mincon：指定每个读写实例连接连接池的最小链接，初始化连接池的大小 balance：负载均衡类型： 0：不开启读写分离机制，所有读操作都发送到当前可用的writeHost上 1：全部的readHost和stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式（M1-&gt;S1,M2-&gt;S2,并且M1与M2互为主备），正常情况下，M2,S1,S2都参与select语句的负载均衡 2：所有读操作都随机的再writeHost、readHost上分发 3：所有读请求随机的分发到writeHost对应readHost执行，writeHost不负担读压力，在之后的版本中失效。 writeType：写类型 writeType&#x3D;0：所有的写操作发送到配置的第一个writeHost，第一个挂了切换到还生存的第二个writeHost，重启之后以切换后的为准，切换记录保存在配置文件 dnindex.properties writeType&#x3D;1：所有写操作都随机的发送到配置的writeHost，1.5以后废弃不推荐 dbType：指定后端连接的数据库类型，如MySQL，mongodb,oracle dbDriver：指定连接后端数据库使用的Driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和maridb，其他类型的数据库则需要使用JDBC驱动来支持 switchType：是否进行主从切换 -1：表示不自动切换 1：默认值，自动切换 2：基于mysql主从同步的状态决定是否切换 2.1.6 heartbeat标签​ 这个标签指明用于和后端数据库进行心跳检测的语句。 2.2 server.xml文件server.xml几乎保存了所有mycat需要的系统配置信息。 12345678910111213&lt;user name=&quot;test&quot;&gt; &lt;property name=&quot;password&quot;&gt;test&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt; &lt;privileges check=&quot;false&quot;&gt; &lt;schema name=&quot;TESTDB&quot; dml=&quot;0010&quot; showTables=&quot;custome/mysql&quot;&gt; &lt;table name=&quot;tbl_user&quot; dml=&quot;0110&quot;&gt;&lt;/table&gt; &lt;table name=&quot;tbl_dynamic&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt; &lt;/schema&gt; &lt;/privileges&gt;&lt;/user&gt; ​ server.xml中的标签本就不多，这个标签主要用于定义登录mycat的用户和权限。 property标签用来声明具体的属性值 name用来指定用户名 password用来修改密码 readonly用来限制用户是否是只读的 schemas用来控制用户课访问的schema，如果有多个的话，用逗号分隔 privileges标签是对用户的schema及下级的table进行精细化的DML控制 check属性适用于标识是否开启DML权限检查，默认false标识不检查，当然不配置等同于不检查 在进行检查的时候，是通过四个二进制位来标识的，insert，update，select，delete按照顺序标识，0表示未检查，1表示要检查 system标签表示系统的相关属性： charset：字符集设置，utf8，utf8mb4 defaultSqlParser：指定的默认解析器，druidparser，fdbparser(1.4之后作废) processors：系统可用的线程数， 默认为机器CPU核心线程数 processorBufferChunk：每次分配socket direct buffer的大小，默认是4096个字节 processorExecutor：指定NIOProcessor共享的businessExecutor固定线程池大小，mycat在处理异步逻辑的时候会把任务提交到这个线程池中 sequnceHandlerType：mycat全局序列的类型，0为本地文件，1为数据库方式，2为时间戳方式，3为分布式ZK ID生成器，4为zk递增id生成 2.3 rule.xml​ rule.xml里面就定义了我们对表进行拆分所涉及到的规则定义。我们可以灵活的对表使用不同的分片算法，或者对表使用相同的算法但具体的参数不同，这个文件里面主要有tableRule和function这两个标签。 2.3.1 tableRule​ 这个标签被用来定义表规则，定义的表规则在schema.xml文件中 123456&lt;tableRule name=&quot;rule1&quot;&gt; &lt;rule&gt; &lt;columns&gt;id&lt;/columns&gt; &lt;algorithm&gt;func1&lt;/algorithm&gt; &lt;/rule&gt;&lt;/tableRule&gt; name属性：指定唯一的名字，用来标识不同的表规则 内嵌的rule标签：指定对物理表中的哪一列进行拆分和使用什么路由算法 columns内指定要拆分的列的名字 algorithm使用function标签中的那么属性，连接表规则和具体路由算法。当然，多个表规则可以连接到同一个路由算法上。 2.3.2 function123&lt;function name=&quot;hash-int&quot; class=&quot;io.mycat.route.function.PartitionByFileMap&quot;&gt; &lt;property name=&quot;mapFile&quot;&gt;partition-hash-int.txt&lt;/property&gt;&lt;/function&gt; name：指定算法的名字 class：指定路由算法具体的类名字 property：具体算法需要用到的一些属性","tags":[{"name":"MyCat","slug":"MyCat","permalink":"https://lyblog2022.github.io/tags/MyCat/"},{"name":"framework","slug":"framework","permalink":"https://lyblog2022.github.io/tags/framework/"}]},{"title":"MyCat的基本介绍","date":"2022-10-08T05:47:44.000Z","path":"2022/10/08/study/framework/mycat/mycat前置知识及基本介绍/","text":"MyCat的前置知识及基本介绍 1、前置知识1.1 分布式系统​ 分布式系统是指其组件分布在网络上，组件之间通过传递消息进行通信和动作协调的系统。它的核心理念是让多台服务器协同工作，完成单台服务器无法处理的任务，尤其是高并发或者大数据量的额任务。它的特点是： 透明性：分布式系统对于用户是透明的，一个分布式系统在用户面前的表现就像一个传统的单处理机分时系统，可用用户不必了解其内部结构就能使用; 扩展性：分布式系统的最大特点是可扩展性，它能够根据需求的增加而扩展，可以通过横向扩展使集群的整体性能得到线性提升，也可以通过纵向扩展单台服务器的性能使服务器集群的性能得到提升; 可靠性：分布式系统不允许单点失效的问题存在，它的基本思想是，如果一台机器坏了，则其他机器能够接替它进行工作，具有持续服务的特性; 高性能：高性能才是设计分布式系统的初衷. 分布式系统的缺点： 在节点通信部分的开销比较大，线程安全问题也变得复杂，需要在保证数据完整性的同时兼顾性能 过分依赖网络，网络信息的丢失和饱和将会抵消分布式系统的大部分优势 有潜在的数据安全和网络安全等安全性问题。 1.2 分布式数据库​ 随着技术的发展，各个行业所产生的数据量呈爆炸式增长，动辄就达到数百TB或者PB的级别，已经远远超过了传统单机数据库的处理能力，因此分布式数据库已经成为了最最迫切的需求。 ​ 分布式数据库是指数据在物理上分步而在逻辑上集中管理的数据库系统。物理上分步是指分布式数据库的数据分步在物理位置不同并由网络连接的节点或站点上；逻辑上集中是指各数据库节点之间在逻辑上是一个整体，并由统一的数据库管理系统管理，不同的节点分步可以跨不同的机房、城市甚至国家。 分布式数据库的特点: 透明性：用户不必关系数据的逻辑分区和物理位置分步的细节，也不必关系重复副本的一致性问题，同时不必关心在局部场地上数据库支持哪种数据模型 数据冗余性：分布式数据库通过冗余实现系统的可靠性、可用性，并改善其性能。多个节点存储数据副本，当某一个节点的数据遭到破坏时，冗余的副本可保证数据的完整性；当工作的节点受损害时，可通过心跳等机制进行切换，系统整体不被破坏。还可以通过热点数据的就近分步原则减少网络通信的消耗，加快访问速度，改善性能。 易于扩展性：在分布式数据库中能够方便地通过水平扩展提高系统的整体性能，也能够通过垂直扩展来提高性能，扩展并不需要修改系统程序。 自治性：各节点上的数据由本地的DBMS管理，具有自治处理能力，完成本场地的应用或局部应用 ​ 分布式数据库还具有经济、性能优越、响应速度更快、灵活的体系结构、易于继承现有系统等特点。 1.3 分布式数据库的实现原理​ 分布式数据库具有逻辑整体性、物理分布式，正是因为其物理分布性才使得分布式数据库的实现变得更加复杂，因为数据划分后存储在不同的节点上，而为了保证可靠性，需要存储多个副本，所以产生了数据复制的问题。为了保证良好的性能，分布式数据库必须易于扩展，具体来讲分布式数据库应有4个优势：数据分片及复制管理、具有事务的可靠性存取、良好的性能、易于扩展，所以分布式数据库在设计上需要实现数据库数据库的目录管理、数据分片、分布式查询处理、分布式并发控制、分布式锁管理、分布式存储、分布式网络架构、分布式安全管理等。 ​ 1、分布式数据库的目录管理 ​ 分布式数据库的目录存放着系统元数据及数据库的元数据的全部信息，这些数据的存在是为了正确、有效地访问数据。数据的增删改查操作都需要用到目录，用户授权、安全管理及并发控制等也都需要用到目录，目录结构的合理性直接影响数据库的性能。目录一般包括各级的描述、访问方法的描述、关于数据库的统计数据和一致性信息等，系统根据这些信息将用户查询转换为物理数据库上的查询，选择一条最佳的存取路径进行事务管理及安全性、完整性检查等。 ​ 分布式数据库的目录课分为全局目录、分布式目录、全局与本地混合目录。 ​ 2、数据分片 ​ 当数据库过于庞大，尤其是写入过于频繁且很难由一台主机支撑时，我们还是会面临扩展瓶颈。我们将存放在同一个数据库实例中的数据分散存放到多个数据库实例上，进行多台设备存取以提高性能，在切分数据的同时可以提高系统整体的可用性。 ​ 数据分片是指将数据全局地划分为相关的逻辑片段，有水平切分、垂直切分、混合切分三种类型。 ​ 水平切分：按照某个字段的某种规则分散到多个节点库中，每个节点中包含一部分数据。可以将数据的水平切分简单理解为按照数据行进行切分，就是将表中的某些行分到一个节点，将另外某些行切分到其他节点，从分布式的整体来看它们是一个整体的表 ​ 垂直切分：一个数据库由很多表构成，每个表对应不同的业务，垂直切分是指按照业务将表进行分类并分不到不同的节点上，垂直拆分简单明了，拆分规则明确，应用程序模块清晰、明确、容易整合，但是某个表的数据量达到一定程度后扩展起来比较困难。 ​ 混合切分：水平切分和垂直切分的结合 ​ 3、分布式查询处理 ​ 分布式查询处理的任务就是把一个分布式数据库上的高层次查询映射为在本地数据库上的操作，查询的解析必须拆分为代数查询的关系运算序列，将要查询的数据定位到各节点，使得查询在各节点进行，最后通过网络通信的操作汇聚查询结果。 ​ 4、分布式并发控制 ​ 并发控制是分布式事务管理的基本任务之一，其目的是保证分布式数据库中的多个事务并发高效、正确的执行。并发控制用来保证事务的可串行性，也就是说事务的并发执行等价于它们按某种次序的串行执行，从而为用户提供并发的透明性。进行并发控制的方法主要有三种：加锁并发控制、时间戳控制、乐观并发控制 加锁并发控制应用广泛，但是容易发生死锁 时间戳控制消除了死锁，一旦发生冲突变回重启而不是等待，需要有全局的统一时钟 乐观并发控制对于冲突较少的系统较为合适，对于冲突多的系统则效率低下。 1.4 OLTP和OLAP​ 在互联网时代，海量数据的存储和访问成为系统设计与使用的瓶颈，对于海量数据处理，按照使用场景，主要分为两种类型：联级事务处理（OLTP）和联级分析处理（OLAP）。 联级事务处理也称为面向事务的处理系统，其基本特征是原始数据可以立即传送到计算中心进行处理，在很短的时间内给出处理结果。 联级分析处理是指通过多维的方式对数据进行分析、查询和报表，可以同数据挖掘工具、统计分析工具配合使用，增强决策分析功能。 两者之间的区别: OLTP OLAP 系统功能 日常交易处理 统计、分析、报表 DB设计 面向实时交易类应用 面向统计分析类应用 数据处理 当前的，最新的细节的， 历史的、聚集的、多维的、集成的 实时性 实时读写要求高 实时要求读写低 事务 强一致性 弱事务 分析要求 低，简单 高，复杂 1.5 关系型数据库和NoSQL​ NoSQL数据库，全称为Not Only SQL,意思就是适用关系型数据库的时候就是用关系型数据库，不适用的时候也没必要非使用关系型数据库不可，可以考虑更加合适的数据存储，主要分为临时性键值存储（memcached，redis），永久性键值存储（redis），面向文档的数据库（mongoDB，CouchDB）,面向列的数据库（Cassandra，HBase），每种NoSQL都有其特有的使用场景及优点。 关系型数据库 NoSQL数据库 特点 数据关系模型基于关系模型，结构化存储，完整性约束基于二维表及其之间的联系，需要连接、并、交、差等操作采用结构化的查询语言做数据读写操作需要数据的一致性，需要事务甚至强一致性 非结构化的存储基于多维关系模型具有特色的使用场景 优点 保证数据的一致性可以进行join等复杂查询通用化，技术成熟 高并发、大数据下读写能力强支持分布式，易于扩展，可伸缩简单，弱结构化存储 缺点 数据读写必须经过sql解析，大量数据、高并发读写性能不足对数据做读写，或修改数据结构时需要加锁，影响并发操作无法适应非结构化存储扩展困难昂贵、复杂 join等复杂操作能力较弱事务支持较弱通用性差无完整约束复杂业务场景支持较差 2、MyCat2.1 MyCat是什么 从定义和分类来看，它是一个开源的分布式数据库系统，是一个实现了 MySQL 协议的 Server 前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问 后端可以用 MySQL 原生（Native） 协议与多个 MySQL 服务器通信，也可以用 JDBC 协议与大多数主流数据库服务器通信 其核心功能是分表分库，即将一个大表水平分割为 N 个小表，存储在后端 MySQL 服务器里或者其他数据库里。 Mycat 发展到目前的版本，已经不是一个单纯的 MySQL 代理了，它的后端可以支持 MySQL、 SQL Server、Oracle、 DB2、 PostgreSQL 等主流数据库，也支持 MongoDB 这种新型 NoSQL 方式的存储，未来还会支持更多类型的存储。 而在最终用户看来，无论是那种存储方式，在 Mycat 里，都是一个传统的数据库表，支持标准的SQL 语句进行数据的操作，这样一来，对前端业务系统来说，可以大幅降低开发难度，提升开发速度，在测试阶段，可以将一个表定义为任何一种 Mycat 支持的存储方式，比如 MySQL 的 MyASIM 表、内存表、或者MongoDB、 LevelDB 以及号称是世界上最快的内存数据库 MemSQL 上。 试想一下，用户表存放在 MemSQL 上，大量读频率远超过写频率的数据如订单的快照数据存放于 InnoDB 中，一些日志数据存放于 MongoDB 中，而且还能把 Oracle 的表跟 MySQL 的表做关联查询，你是否有一种不能呼吸的感觉？而未来，还能通过 Mycat 自动将一些计算分析后的数据灌入到 Hadoop 中，并能用 Mycat+Storm&#x2F;Spark Stream 引擎做大规模数据分析 【不同角色对MyCat的理解】 对于DBA而言，可以这么理解MyCat： Mycat就是MySQL Server，而Mycat后面连接的MySQL Server，就好像是MySQL的存储引擎，如InnoDB，MyISAM等，因此，Mycat本身并不存储数据，数据是在后端的MySQL上存储的，因此数据可靠性以及事务都是MySQL保证的，简单说，Mycat就是MySQL最佳伴侣，它再一定程度上让MySQL拥有了能跟Oracle PK的能力。 对于软件工程师来说，可以这么理解MyCat: Mycat就是一个近似等于MySQL的数据库服务器，你可以用连接MySQL的方式去连接Mycat，除了端口不同，默认的mycat端口是8066而不是mysql的3306，因此需要再连接字符串上增加端口信息，大多数情况下，可以用你熟悉的对象映射框架使用mycat，但建议对于分片表，尽量使用基础的SQL语句，因为这样能达到最佳性能，特别是几千万甚至几百亿条记录的情况下。 对于架构师来说，可以这么理解MyCat： mycat是一个强大的数据库中间件，不仅仅可以用作读写分离、以及分库分表、容灾备份，而且可以用于多租户应用开发，云平台基础设施，让你的架构具备很强的适应性和灵活性，借助于即将发布的mycat只能优化模块，系统的数据访问瓶颈和热点一目了然，根据这些统计分析数据，你可以自动或手工调整后端存储，将不同的表映射到不同的存储引擎上，而整个应用的代码一行也不用改变。 2.2 MyCat原理​ mycat的原理并不复杂，复杂的是代码 ​ mycat的原理中最重要的一个动作是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发送后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户 ​ 上述图片里，orders表被分为了三个分片datanode（简称dn），这三个分片是分布在两台MySQL Server上（Datahost），即datanode&#x3D;database@datahost方式，因此你可以用一台到N台服务器来分片，分片规则为（sharding rule）典型的字符串枚举分片规则，一个规则的定义是分片字段（sharding column）+ 分片函数（rule function），这里的分片字段为prov而分片函数为字符串枚举方式。 ​ 当mycat收到一个SQL时，会先解析这个SQL，查找涉及到的表，然后看此表的定义，如果有分片规则，则获取到SQL里分片字段的值，并分配分片函数，得到该SQL对应的分片列表，然后将SQL发往这些分片去执行，最后收集和处理所有分片返回的结果数据，并输出到客户端，以select * from orders where prov &#x3D; ?语句为例，查到prov&#x3D;wuhan，按照分片函数，wuhan返回dn1，于是sql就发给了mysql1，去取db1上的查询结果，并返回给用户。 ​ 如果上述sql改为select * from orders where prov in (wuhan,beijing)，那么，sql就会发给MySQL1和MySQL2去执行，然后结果集合并后输出给用户。但通常业务中我们的SQL会有order by以及limit翻页语法，此时就设计到结果集在mycat端的二次处理，这部分代码也比较复杂，而最复杂的则属两个表的join，为此，mycat提出了创新性的ER分片，全局表，HBT（human brain tech）人工智能的catlet，以及结合storm&#x2F;spark引擎等十八般武艺的解决办法 2.3 应用场景mycat发展到现在，使用的场景已经很丰富，而且不断有新用户给出新的创新性的方案，以下是典型的应用场景： 单纯的读写分离，此时配置最为简单，支持读写分离，主从切换 分库分表，对于超过1000万的表进行分片，最大支持1000亿的单表分片 多租户应用，每个应用一个库，但应用程序只连接mycat，从而不改造程序本身，实现多租户化 报表系统，借助mycat的分表能力，处理大规模报表的统计 整合多数据源 作为海量数据实时查询的一种简单有效方案，比如100亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时mycat可能是最简单有效的选择 数据库路由器，mycat基于mysql实例的连接池复用机制，可以让每一个应用最大程度地共享一个mysql实例地所有连接池，让数据库地并发访问能力大大提升 2.4 为什么使用mycat java与数据库紧耦合 高访问量高并发对数据库的压力 读写请求数据不一致 2.5 数据库中间件对比 对比项目 mycat mango cobar heisenberg altas amoeba 数据切片 支持 支持 支持 支持 支持 支持 读写分离 支持 支持 支持 支持 支持 支持 宕机自动切换 支持 不支持 支持 不支持 半支持，影响写 不支持 mysql协议 前后端支持 JDBC 前端支持 前后端支持 前后端支持 JDBC 支持的数据库 mysql，oracle，mongodb，postgresql mysql mysql mysql mysql mysql，mongodb 社区活跃度 高 活跃 停滞 低 中等 停滞 文档资料 极丰富 较齐全 较齐全 较少 中等 缺少 是否开源 开源 开源 开源 开源 开源 开源 是否支持事务 弱XA 支持 单库强一致，分布式弱事务 单库强一致，多库弱事务 单库强一致，分布弱事务 不支持 3、MyCat核心概念​ mycat是数据库中间件，就是介于数据库与应用之间，进行数据处理和交互的中间服务。从原有的一个库，被切分为多个分片数据库，所有的分片数据库集群构成了整个完整的数据库存储。 ​ 如上图所示，数据被分到多个分片数据库之后，应用如果需要读取数据，就要处理多个数据源的数据。如果没有数据库中间件，那么应用将直接面对分片集群，数据源切换、事务处理、数据聚合都需要应用直接处理，原本该是专注于业务的应用，将会话大量的工作来处理分片后的问题，最重要的是每个应用处理将是完全的重复造轮子。 3.1 逻辑库​ 对于实际应用而言，其实并不需要知道中间件的存在，开发人员只需要知道数据库的概念即可，所以数据库中间件可以被看作是一个或多个数据库集群构成的逻辑库。 ​ 在云计算时代，数据库中间件可以以多租户的形式给一个或多个应用提供服务，每个应用访问的可能是一个独立或者共享的物理库，常见的如阿里云数据库服务器RDS ​ 3.2 逻辑表​ 既然有逻辑库，那么就应该有逻辑表，在分布式数据库中，对应用来说，读写数据的表就是逻辑表。逻辑表可以使数据切分后，分步在一个或多个分片库中，也可以不做数据切分，不分片，只有一个表构成 3.3 分片表​ 分片表，是指那些原有的很大数据的表，需要切分到多个数据库的表，这样每一个分片都会有一部分数据，所有分片构成了完整的数据。 3.4 非分片表​ 一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。 3.5 ER表​ 关系型数据库是基于实体关系模型之上，通过其描述了真实世界中事物与关系，mycat中的ER表就是来源于此。根据这一思路，提出了基于ER关系的数据分片策略，子表的记录与所关联的父表记录存放在同一个数据分片上，即子类依赖于父类，通过表分组保证数据join不会跨库操作。 ​ 表分组是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则。 3.6 全局表​ 一个真实的业务系统中，往往存在大量的类似字典表的表，这些表基本上很少变动，字典表具有以下几个特点： 变动不频繁 数据量总体变化不大 数据规模不大，很少有超过数十万条记录 ​ 对于这类的表，在分片的情况下，当业务表因为规模而进行分片以后，业务表与这些附属的字典表之间的关联，就成了比较棘手的问题，所以mycat中通过数据冗余来解决这类表的join，即所有的分片都有一份数据的拷贝，所有将字典表或者符合字典表特性的一些表定义为全局表。 ​ 数据冗余是解决跨分片数据join的一种很好思路，也是数据切分规划的另外一条重要原则 3.7 分片节点（dataNode）​ 数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点（dataNode） 3.8 节点主机（dataHost）​ 数据切分后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（dataNode）所在的机器就是节点主机（dataHost），为了规避单节点主机并发数限制，尽量将读写压力高的分片节点（dataNode）均衡的放在不同的节点主机（dataHost）。 3.9 分片规则​ 数据切分是指一个大表被分成若干个分片表，就需要一定的规则，这样按照某种规则把数据分到某个分片的规则就是分片规则，数据切分选择合适的分片规则非常重要，将极大的避免后续数据处理的难度。 3.10 全局序列号​ 数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号。 3.11 多租户​ 多租户技术或称多重租赁技术，是一种软件架构技术，它是在探讨与实现如何于多用户的环境下共用相同的系统或程序组件，并且扔可确保各用户间数据的隔离性。在云计算时代，多租户技术在共用的数据中心以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。目前各种各样的云计算服务就是这类技术范畴，例如阿里云数据库服务（RDS），阿里云服务器等等。 ​ 多租户在数据存储上存在三种主要的方案，分别是： 独立数据库：一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本也高。 优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求，如果出现故障，恢复数据比较简单。 缺点：增大了数据库的安装数量，随之带来维护成本和购置成本的增加 共享数据库，隔离数据架构：多个或者所有租户共享database，但是每一个租户一个schema 优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可以支持更多的租户数量 缺点：如果出现故障，数据恢复比较困难，因此恢复数据库将牵扯到其他租户的数据，如果需要跨租户统计数据，存在一定困难 共享数据库，共享数据结构：租户共享同一个database，同一个schema，但在表中通过tenantID区分租户的数据。这是共享程度最高、隔离级别最低的模式 优点：维护和购置成本最低，运行每个数据库支持的租户数量最多 缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量，数据备份和恢复最困难，需要逐表逐条备份和还原。","tags":[{"name":"MyCat","slug":"MyCat","permalink":"https://lyblog2022.github.io/tags/MyCat/"},{"name":"framework","slug":"framework","permalink":"https://lyblog2022.github.io/tags/framework/"}]},{"title":"CentOS8安装MySQL环境","date":"2022-10-05T04:42:47.000Z","path":"2022/10/05/study/database/CentOS8安装MySQL环境/","text":"CentOS8安装MySQL环境，使用数据库软件远程链接，并配置主从连接 1、删除环境自带MySQL使用yml命令删除已经安装的MySQL 1yum remove -y mysql 使用find命令找到残留文件 1find / -name mysql 使用rm -rf命令删除残留文件 123rm -rf /var/lib/selinux/targeted/active/modules/100/mysqlrm -rf /usr/share/bash-completion/completions/mysqlrm -rf /usr/share/selinux/targeted/default/active/modules/100/mysql 2、安装执行以下命令 12wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpmyum install mysql80-community-release-el8-1.noarch.rpm 查看mysql数据源是否安装成功 1yum repolist enabled | grep &quot;mysql.*-community.*&quot; ​ 执行以下命令安装mysql 1yum install mysql-community-server --nogpgcheck 如果出现No match for argument: mysql-community-server可执行 yum module disable mysql命令 1yum module disable mysql // 禁用命令 3、启动启动mysql 1service mysqld start 报错： ​ 正确启动命令： 12/bin/systemctl start mysqld.serviceservice mysqld status ​ 4、登录并修改密码4.1 显示随机密码执行以下命令： 1grep &#x27;temporary password&#x27; /var/log/mysqld.log ​ 方框中的密码即为生成的随机密码 4.2 登录执行以下命令 1mysql -u root -p ​ 4.3 修改密码【注意】密码先修改成”Root_2022”，因为我们随便修改密码时,一般都不满足它的策略，会报错误: ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 【解决方案】一定要先修改默认密码为: Root_2022 满足它的策略,再进行下面的操作: 12345678910111213141516171819202122232425mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Root_2022&#x27;;Query OK, 0 rows affected (0.00 sec)mysql&gt; SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password.check_user_name | ON || validate_password.dictionary_file | || validate_password.length | 8 || validate_password.mixed_case_count | 1 || validate_password.number_count | 1 || validate_password.policy | MEDIUM || validate_password.special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.02 sec)mysql&gt; set global validate_password.length=1;Query OK, 0 rows affected (0.01 sec)mysql&gt; set global validate_password.policy=0; Query OK, 0 rows affected (0.00 sec)mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;your password&#x27;;Query OK, 0 rows affected (0.01 sec) 5、开放远程访问创建权限记录 1create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;; 授权 1grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option; 关闭系统防火墙 1systemctl status firewall; //查看防火墙状态 ​ systemctl stop firewalld.service （关闭防火墙） systemctl start firewalld.service （开启防火墙） systemctl disable firewalld.service （禁止防火墙自启动） systemctl enable firewalld.service （防火墙随系统开启启动） 使用navicat远程连接mysql ​ 6、配置主从现有两台服务器 192.168.213.164 和 192.168.213.165，在这两台服务器之间搭建一主一从MySQL，配置164位主，165为从 6.1 主数据库修改修改&#x2F;etc&#x2F;my.cnf ​ server-id值要唯一不能与从数据库重复； log-bin 设置为 mysql-bin； 关闭164的MySQL服务 1netstat -lnpt | grep mysql ​ 使用kill命令关闭 1kill -9 33830 再次启动mysql 6.2 从数据库修改修改&#x2F;etc&#x2F;my.cnf ​ server-id值要唯一不能与主数据库重复； log-bin 设置为 mysql-bin； 关闭165的MySQL服务 ​ 再次启动mysql 6.3 查看主服务器的状态1234567mysql&gt; show master status;+------------------+----------+--------------+------------------+-------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 | 157 | | | |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.01 sec) 6.4 从服务器执行1change master to master_host=&#x27;192.168.213.164&#x27;, master_port=3306, master_user=&#x27;root&#x27;, master_password=&#x27;password&#x27;, master_log_file=&#x27;mysql-bin.000001&#x27;, master_log_pos=157; master_host 为主服务器的地址 master_port 为MySQL端口号。 master_user 为主服务器的用户名。 master_password 为用户密码。 master_log_file 为主数据库中File处的值。 master_log_pos 为主数据库中Position处的值。 6.5 测试主：创建test的数据库 ​ 刷新从数据库： ​ 6.6 解除主从关闭主从： 12mysql&gt; start slave;Query OK, 0 rows affected (0.01 sec) 重置： 12mysql&gt; reset slave all;Query OK, 0 rows affected (0.02 sec) 显示主从状态： 12mysql&gt; show slave status;Empty set","tags":[{"name":"数据库","slug":"数据库","permalink":"https://lyblog2022.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"软件安装","slug":"软件安装","permalink":"https://lyblog2022.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"MySQL","slug":"MySQL","permalink":"https://lyblog2022.github.io/tags/MySQL/"}]},{"title":"CentOS8配置JDK环境","date":"2022-06-06T13:41:00.000Z","path":"2022/06/06/study/other/CentOS8配置jdk环境/","text":"CentOS8配置JDK环境 1、使用Yum安装安装OpenJDK的可以选择此方法，方便快捷 1.1 查看是否有JDK环境1java -version 可以看到系统自带的 OpenJDK 版本信息，如果不满足，则卸载现有JDK 1.2 卸载现有JDK使用 rpm 命令查询 java 1rpm -qa | grep java .noarch文件可以不用管，卸载其余条目 执行一下命令卸载信息 1rpm -e --nodeps java-1.8.0-openjdk-1.8.0.201.b09-2.el8.x86_64 1rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.201.b09-2.el8.x86_64 卸载完后查询版本信息 1.3 使用Yum安装OpenJDK1yum install -y java-1.8.0-openjdk 1.3.1 报错 报错信息为： 12Failed to synchronize cache for repo &#x27;AppStream&#x27;, ignoring this repo.Failed to synchronize cache for repo &#x27;BaseOS&#x27;, ignoring this repo. 1.3.2 解决方案切换阿里源 1、备份 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2、下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F; 1wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo 3、生成缓存 1yum makecache 1.4 校验 2、使用rpm包安装适用于有提供RPM Package的情况，例如Oracle JDK有提供。 Oracle JDK所有版本下载 OracleJDK8下载 待定","tags":[{"name":"软件安装","slug":"软件安装","permalink":"https://lyblog2022.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"JDK","slug":"JDK","permalink":"https://lyblog2022.github.io/tags/JDK/"}]},{"title":"使用post方式调用接口并传递参数","date":"2022-05-18T13:06:35.000Z","path":"2022/05/18/summary/20220518/使用post方式调用接口并传递参数/","text":"使用post方式调用接口并传递参数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package com.summary;import java.nio.charset.Charset;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;import org.apache.http.HttpEntity;import org.apache.http.NameValuePair;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;import com.alibaba.fastjson.JSONObject;public class Summary &#123; /** * 发送post请求 * @param url：请求URL * @param headerParamsJson：请求header参数 * @param paramJson：请求参数 * @return */ public JSONObject sendData(String url, JSONObject headerParamsJson, JSONObject paramJson) &#123; JSONObject resultJson = new JSONObject(); // 发送post请求 try &#123; HttpPost httppost = new HttpPost(url); RequestConfig defaultRequestConfig = RequestConfig.custom().setConnectTimeout(5000) .setConnectionRequestTimeout(5000).setSocketTimeout(15000).build(); httppost.setConfig(defaultRequestConfig); StringEntity entity = new StringEntity(paramJson.toJSONString(), &quot;utf-8&quot;);// 解决中文乱码问题 entity.setContentEncoding(&quot;UTF-8&quot;); entity.setContentType(&quot;text/json&quot;); httppost.setEntity(entity); httppost.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;); // 添加header参数 Iterator headerParamsIterator = headerParamsJson.entrySet().iterator(); while (headerParamsIterator.hasNext()) &#123; Map.Entry entry = (Map.Entry) headerParamsIterator.next(); httppost.setHeader(entry.getKey().toString(), entry.getValue().toString()); &#125; // 装填参数 List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;(); if (paramJson != null) &#123; Iterator iterator = paramJson.entrySet().iterator(); while (iterator.hasNext()) &#123; Map.Entry entry = (Map.Entry) iterator.next(); nvps.add(new BasicNameValuePair((String) entry.getKey(), (String) entry.getValue())); &#125; &#125; UrlEncodedFormEntity reqEntity = new UrlEncodedFormEntity(nvps, &quot;utf-8&quot;); httppost.setEntity(reqEntity); // 执行post请求. CloseableHttpClient httpclient = HttpClients.createDefault(); CloseableHttpResponse response1 = httpclient.execute(httppost); String resultText = &quot;&quot;; try &#123; int statusCode = response1.getStatusLine().getStatusCode(); if (statusCode != 200) &#123; throw new RuntimeException(&quot;请求失败&quot;); &#125; else &#123; // 响应实体 HttpEntity entity2 = response1.getEntity(); if (entity2 != null) &#123; // 响应内容 resultText = EntityUtils.toString(entity2, Charset.forName(&quot;UTF-8&quot;)); resultJson = JSONObject.parseObject(resultText); &#125; &#125; resultJson.put(&quot;code&quot;, statusCode); &#125; finally &#123; response1.close(); &#125; &#125; catch (Exception e) &#123; resultJson.put(&quot;code&quot;, &quot;410&quot;); resultJson.put(&quot;err&quot;, e.toString()); &#125; return resultJson; &#125;&#125;","tags":[{"name":"httpClient","slug":"httpClient","permalink":"https://lyblog2022.github.io/tags/httpClient/"},{"name":"接口调用","slug":"接口调用","permalink":"https://lyblog2022.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"}]}]